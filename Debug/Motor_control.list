
Motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000948  080071e0  080071e0  000171e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b28  08007b28  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007b28  08007b28  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b28  08007b28  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  200001dc  08007d0c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000be4  08007d0c  00020be4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be46  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bb5  00000000  00000000  0002c04b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002dc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  0002e890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001807e  00000000  00000000  0002f438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0ac  00000000  00000000  000474b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e980  00000000  00000000  00051562  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000405c  00000000  00000000  000dff60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080071c4 	.word	0x080071c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080071c4 	.word	0x080071c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr
 800115c:	0000      	movs	r0, r0
	...

08001160 <_sin.6903>:
  // function approximating the sine calculation by using fixed size array
  // ~40us (float array)
  // ~50us (int array)
  // precision +-0.005
  // it has to receive an angle in between 0 and 2PI
  float _sin(float a){
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	4664      	mov	r4, ip
 800116a:	f8c7 c000 	str.w	ip, [r7]
    if(a < _PI_2){
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff f95a 	bl	8000428 <__aeabi_f2d>
 8001174:	a3c6      	add	r3, pc, #792	; (adr r3, 8001490 <_sin.6903+0x330>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fc1f 	bl	80009bc <__aeabi_dcmplt>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d057      	beq.n	8001234 <_sin.6903+0xd4>
      //return sine_array[(int)(199.0*( a / (_PI/2.0)))];
      //return sine_array[(int)(126.6873* a)];           // float array optimized
      return 0.0001*sine_array[_round(126.6873* a)];      // int array optimized
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff f94f 	bl	8000428 <__aeabi_f2d>
 800118a:	a3c3      	add	r3, pc, #780	; (adr r3, 8001498 <_sin.6903+0x338>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff f9a2 	bl	80004d8 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	f7ff fc1e 	bl	80009e4 <__aeabi_dcmpge>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d018      	beq.n	80011e0 <_sin.6903+0x80>
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff f93a 	bl	8000428 <__aeabi_f2d>
 80011b4:	a3b8      	add	r3, pc, #736	; (adr r3, 8001498 <_sin.6903+0x338>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff f98d 	bl	80004d8 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4bbd      	ldr	r3, [pc, #756]	; (80014c0 <_sin.6903+0x360>)
 80011cc:	f7fe ffce 	bl	800016c <__adddf3>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fc2e 	bl	8000a38 <__aeabi_d2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	e017      	b.n	8001210 <_sin.6903+0xb0>
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff f921 	bl	8000428 <__aeabi_f2d>
 80011e6:	a3ac      	add	r3, pc, #688	; (adr r3, 8001498 <_sin.6903+0x338>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4bb0      	ldr	r3, [pc, #704]	; (80014c0 <_sin.6903+0x360>)
 80011fe:	f7fe ffb3 	bl	8000168 <__aeabi_dsub>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fc15 	bl	8000a38 <__aeabi_d2iz>
 800120e:	4603      	mov	r3, r0
 8001210:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f8f5 	bl	8000404 <__aeabi_i2d>
 800121a:	a3a1      	add	r3, pc, #644	; (adr r3, 80014a0 <_sin.6903+0x340>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f95a 	bl	80004d8 <__aeabi_dmul>
 8001224:	4603      	mov	r3, r0
 8001226:	460c      	mov	r4, r1
 8001228:	4618      	mov	r0, r3
 800122a:	4621      	mov	r1, r4
 800122c:	f7ff fc4c 	bl	8000ac8 <__aeabi_d2f>
 8001230:	4603      	mov	r3, r0
 8001232:	e128      	b.n	8001486 <_sin.6903+0x326>
    }else if(a < _PI){
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f8f7 	bl	8000428 <__aeabi_f2d>
 800123a:	a39b      	add	r3, pc, #620	; (adr r3, 80014a8 <_sin.6903+0x348>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff fbbc 	bl	80009bc <__aeabi_dcmplt>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d05b      	beq.n	8001302 <_sin.6903+0x1a2>
      // return sine_array[(int)(199.0*(1.0 - (a-_PI/2.0) / (_PI/2.0)))];
      //return sine_array[398 - (int)(126.6873*a)];          // float array optimized
      return 0.0001*sine_array[398 - _round(126.6873*a)];     // int array optimized
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff f8ec 	bl	8000428 <__aeabi_f2d>
 8001250:	a391      	add	r3, pc, #580	; (adr r3, 8001498 <_sin.6903+0x338>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f93f 	bl	80004d8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	f7ff fbbb 	bl	80009e4 <__aeabi_dcmpge>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d01a      	beq.n	80012aa <_sin.6903+0x14a>
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f8d7 	bl	8000428 <__aeabi_f2d>
 800127a:	a387      	add	r3, pc, #540	; (adr r3, 8001498 <_sin.6903+0x338>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f92a 	bl	80004d8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <_sin.6903+0x360>)
 8001292:	f7fe ff6b 	bl	800016c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fbcb 	bl	8000a38 <__aeabi_d2iz>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80012a8:	e019      	b.n	80012de <_sin.6903+0x17e>
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff f8bc 	bl	8000428 <__aeabi_f2d>
 80012b0:	a379      	add	r3, pc, #484	; (adr r3, 8001498 <_sin.6903+0x338>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f90f 	bl	80004d8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <_sin.6903+0x360>)
 80012c8:	f7fe ff4e 	bl	8000168 <__aeabi_dsub>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fbb0 	bl	8000a38 <__aeabi_d2iz>
 80012d8:	4603      	mov	r3, r0
 80012da:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80012de:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f88e 	bl	8000404 <__aeabi_i2d>
 80012e8:	a36d      	add	r3, pc, #436	; (adr r3, 80014a0 <_sin.6903+0x340>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f8f3 	bl	80004d8 <__aeabi_dmul>
 80012f2:	4603      	mov	r3, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	4618      	mov	r0, r3
 80012f8:	4621      	mov	r1, r4
 80012fa:	f7ff fbe5 	bl	8000ac8 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	e0c1      	b.n	8001486 <_sin.6903+0x326>
    }else if(a < _3PI_2){
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff f890 	bl	8000428 <__aeabi_f2d>
 8001308:	a369      	add	r3, pc, #420	; (adr r3, 80014b0 <_sin.6903+0x350>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fb55 	bl	80009bc <__aeabi_dcmplt>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <_sin.6903+0x270>
      // return -sine_array[(int)(199.0*((a - _PI) / (_PI/2.0)))];
      //return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
      return -0.0001*sine_array[-398 + _round(126.6873*a)];      // int array optimized
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff f885 	bl	8000428 <__aeabi_f2d>
 800131e:	a35e      	add	r3, pc, #376	; (adr r3, 8001498 <_sin.6903+0x338>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f8d8 	bl	80004d8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	f7ff fb54 	bl	80009e4 <__aeabi_dcmpge>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d01a      	beq.n	8001378 <_sin.6903+0x218>
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff f870 	bl	8000428 <__aeabi_f2d>
 8001348:	a353      	add	r3, pc, #332	; (adr r3, 8001498 <_sin.6903+0x338>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f8c3 	bl	80004d8 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b58      	ldr	r3, [pc, #352]	; (80014c0 <_sin.6903+0x360>)
 8001360:	f7fe ff04 	bl	800016c <__adddf3>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fb64 	bl	8000a38 <__aeabi_d2iz>
 8001370:	4603      	mov	r3, r0
 8001372:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 8001376:	e019      	b.n	80013ac <_sin.6903+0x24c>
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff f855 	bl	8000428 <__aeabi_f2d>
 800137e:	a346      	add	r3, pc, #280	; (adr r3, 8001498 <_sin.6903+0x338>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f7ff f8a8 	bl	80004d8 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <_sin.6903+0x360>)
 8001396:	f7fe fee7 	bl	8000168 <__aeabi_dsub>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb49 	bl	8000a38 <__aeabi_d2iz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 80013ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f827 	bl	8000404 <__aeabi_i2d>
 80013b6:	a340      	add	r3, pc, #256	; (adr r3, 80014b8 <_sin.6903+0x358>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f88c 	bl	80004d8 <__aeabi_dmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	4618      	mov	r0, r3
 80013c6:	4621      	mov	r1, r4
 80013c8:	f7ff fb7e 	bl	8000ac8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	e05a      	b.n	8001486 <_sin.6903+0x326>
    } else {
      // return -sine_array[(int)(199.0*(1.0 - (a - 3*_PI/2) / (_PI/2.0)))];
      //return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
      return -0.0001*sine_array[796 - _round(126.6873*a)];      // int array optimized
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff f829 	bl	8000428 <__aeabi_f2d>
 80013d6:	a330      	add	r3, pc, #192	; (adr r3, 8001498 <_sin.6903+0x338>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff f87c 	bl	80004d8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	f7ff faf8 	bl	80009e4 <__aeabi_dcmpge>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d01a      	beq.n	8001430 <_sin.6903+0x2d0>
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff f814 	bl	8000428 <__aeabi_f2d>
 8001400:	a325      	add	r3, pc, #148	; (adr r3, 8001498 <_sin.6903+0x338>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f867 	bl	80004d8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <_sin.6903+0x360>)
 8001418:	f7fe fea8 	bl	800016c <__adddf3>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb08 	bl	8000a38 <__aeabi_d2iz>
 8001428:	4603      	mov	r3, r0
 800142a:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800142e:	e019      	b.n	8001464 <_sin.6903+0x304>
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7fe fff9 	bl	8000428 <__aeabi_f2d>
 8001436:	a318      	add	r3, pc, #96	; (adr r3, 8001498 <_sin.6903+0x338>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f84c 	bl	80004d8 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <_sin.6903+0x360>)
 800144e:	f7fe fe8b 	bl	8000168 <__aeabi_dsub>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff faed 	bl	8000a38 <__aeabi_d2iz>
 800145e:	4603      	mov	r3, r0
 8001460:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8001464:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffcb 	bl	8000404 <__aeabi_i2d>
 800146e:	a312      	add	r3, pc, #72	; (adr r3, 80014b8 <_sin.6903+0x358>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f830 	bl	80004d8 <__aeabi_dmul>
 8001478:	4603      	mov	r3, r0
 800147a:	460c      	mov	r4, r1
 800147c:	4618      	mov	r0, r3
 800147e:	4621      	mov	r1, r4
 8001480:	f7ff fb22 	bl	8000ac8 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
    }
  }
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	5443d6f4 	.word	0x5443d6f4
 8001494:	3ff921fb 	.word	0x3ff921fb
 8001498:	b923a29c 	.word	0xb923a29c
 800149c:	405fabfc 	.word	0x405fabfc
 80014a0:	eb1c432d 	.word	0xeb1c432d
 80014a4:	3f1a36e2 	.word	0x3f1a36e2
 80014a8:	54442eea 	.word	0x54442eea
 80014ac:	400921fb 	.word	0x400921fb
 80014b0:	7f330d32 	.word	0x7f330d32
 80014b4:	4012d97c 	.word	0x4012d97c
 80014b8:	eb1c432d 	.word	0xeb1c432d
 80014bc:	bf1a36e2 	.word	0xbf1a36e2
 80014c0:	3fe00000 	.word	0x3fe00000
 80014c4:	00000000 	.word	0x00000000

080014c8 <main>:
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	f5ad 6dd0 	sub.w	sp, sp, #1664	; 0x680
 80014ce:	af00      	add	r7, sp, #0
int main(void)
 80014d0:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 80014d4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80014d8:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
  HAL_Init();
 80014dc:	f000 ff74 	bl	80023c8 <HAL_Init>
  SystemClock_Config();
 80014e0:	f000 fb1a 	bl	8001b18 <SystemClock_Config>
  MX_GPIO_Init();
 80014e4:	f000 fd0a 	bl	8001efc <MX_GPIO_Init>
  MX_TIM1_Init();
 80014e8:	f000 fbac 	bl	8001c44 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80014ec:	f000 fcdc 	bl	8001ea8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014f0:	f000 fb6a 	bl	8001bc8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014f4:	f000 fc66 	bl	8001dc4 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80014f8:	48c7      	ldr	r0, [pc, #796]	; (8001818 <main+0x350>)
 80014fa:	f002 f973 	bl	80037e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 80014fe:	2100      	movs	r1, #0
 8001500:	48c5      	ldr	r0, [pc, #788]	; (8001818 <main+0x350>)
 8001502:	f002 fa71 	bl	80039e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 8001506:	2104      	movs	r1, #4
 8001508:	48c3      	ldr	r0, [pc, #780]	; (8001818 <main+0x350>)
 800150a:	f002 fa6d 	bl	80039e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 800150e:	2108      	movs	r1, #8
 8001510:	48c1      	ldr	r0, [pc, #772]	; (8001818 <main+0x350>)
 8001512:	f002 fa69 	bl	80039e8 <HAL_TIM_PWM_Start_IT>
  for(int i=0;i<SIN_STEPS;i++)
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800151c:	e047      	b.n	80015ae <main+0xe6>
	  float value =  (i*M_TWOPI/SIN_STEPS);
 800151e:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 8001522:	f7fe ff6f 	bl	8000404 <__aeabi_i2d>
 8001526:	a3b6      	add	r3, pc, #728	; (adr r3, 8001800 <main+0x338>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7fe ffd4 	bl	80004d8 <__aeabi_dmul>
 8001530:	4603      	mov	r3, r0
 8001532:	460c      	mov	r4, r1
 8001534:	4618      	mov	r0, r3
 8001536:	4621      	mov	r1, r4
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4bb7      	ldr	r3, [pc, #732]	; (800181c <main+0x354>)
 800153e:	f7ff f8f5 	bl	800072c <__aeabi_ddiv>
 8001542:	4603      	mov	r3, r0
 8001544:	460c      	mov	r4, r1
 8001546:	4618      	mov	r0, r3
 8001548:	4621      	mov	r1, r4
 800154a:	f7ff fabd 	bl	8000ac8 <__aeabi_d2f>
 800154e:	4603      	mov	r3, r0
 8001550:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
      sin_array[i]= (uint16_t)round((sinf(value)+1)*SIN_SCALE)+5;
 8001554:	f8d7 0648 	ldr.w	r0, [r7, #1608]	; 0x648
 8001558:	f005 f87c 	bl	8006654 <sinf>
 800155c:	4603      	mov	r3, r0
 800155e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb06 	bl	8000b74 <__addsf3>
 8001568:	4603      	mov	r3, r0
 800156a:	49ad      	ldr	r1, [pc, #692]	; (8001820 <main+0x358>)
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fc09 	bl	8000d84 <__aeabi_fmul>
 8001572:	4603      	mov	r3, r0
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ff57 	bl	8000428 <__aeabi_f2d>
 800157a:	4603      	mov	r3, r0
 800157c:	460c      	mov	r4, r1
 800157e:	4618      	mov	r0, r3
 8001580:	4621      	mov	r1, r4
 8001582:	f005 f821 	bl	80065c8 <round>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	4618      	mov	r0, r3
 800158c:	4621      	mov	r1, r4
 800158e:	f7ff fa7b 	bl	8000a88 <__aeabi_d2uiz>
 8001592:	4603      	mov	r3, r0
 8001594:	b29b      	uxth	r3, r3
 8001596:	3305      	adds	r3, #5
 8001598:	b299      	uxth	r1, r3
 800159a:	4aa2      	ldr	r2, [pc, #648]	; (8001824 <main+0x35c>)
 800159c:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 80015a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<SIN_STEPS;i++)
 80015a4:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 80015ae:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	dbb2      	blt.n	800151e <main+0x56>
  int sine_array[200] = {0,79,158,237,316,395,473,552,631,710,789,867,946,1024,1103,1181,1260,1338,1416,1494,1572,1650,1728,1806,1883,1961,2038,2115,2192,2269,2346,2423,2499,2575,2652,2728,2804,2879,2955,3030,3105,3180,3255,3329,3404,3478,3552,3625,3699,3772,3845,3918,3990,4063,4135,4206,4278,4349,4420,4491,4561,4631,4701,4770,4840,4909,4977,5046,5113,5181,5249,5316,5382,5449,5515,5580,5646,5711,5775,5839,5903,5967,6030,6093,6155,6217,6279,6340,6401,6461,6521,6581,6640,6699,6758,6815,6873,6930,6987,7043,7099,7154,7209,7264,7318,7371,7424,7477,7529,7581,7632,7683,7733,7783,7832,7881,7930,7977,8025,8072,8118,8164,8209,8254,8298,8342,8385,8428,8470,8512,8553,8594,8634,8673,8712,8751,8789,8826,8863,8899,8935,8970,9005,9039,9072,9105,9138,9169,9201,9231,9261,9291,9320,9348,9376,9403,9429,9455,9481,9506,9530,9554,9577,9599,9621,9642,9663,9683,9702,9721,9739,9757,9774,9790,9806,9821,9836,9850,9863,9876,9888,9899,9910,9920,9930,9939,9947,9955,9962,9969,9975,9980,9985,9989,9992,9995,9997,9999,10000,10000};
 80015b8:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80015bc:	4a9a      	ldr	r2, [pc, #616]	; (8001828 <main+0x360>)
 80015be:	4618      	mov	r0, r3
 80015c0:	4611      	mov	r1, r2
 80015c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80015c6:	461a      	mov	r2, r3
 80015c8:	f003 fa5a 	bl	8004a80 <memcpy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
  int angle_el = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
  float angle_r= 0;
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
  int steps = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
  int direction = 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c

  while (1)
  {
	     // we have 6 sectors for svpwm

	     angle_r = (((angle_el%SIN_STEPS)*M_TWOPI/SIN_STEPS));
 80015ec:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 80015f0:	425a      	negs	r2, r3
 80015f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80015fa:	bf58      	it	pl
 80015fc:	4253      	negpl	r3, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff00 	bl	8000404 <__aeabi_i2d>
 8001604:	a37e      	add	r3, pc, #504	; (adr r3, 8001800 <main+0x338>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe ff65 	bl	80004d8 <__aeabi_dmul>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	4618      	mov	r0, r3
 8001614:	4621      	mov	r1, r4
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b80      	ldr	r3, [pc, #512]	; (800181c <main+0x354>)
 800161c:	f7ff f886 	bl	800072c <__aeabi_ddiv>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4618      	mov	r0, r3
 8001626:	4621      	mov	r1, r4
 8001628:	f7ff fa4e 	bl	8000ac8 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
	     int sector = floor(angle_r / _PI_3) + 1;
 8001632:	f8d7 0664 	ldr.w	r0, [r7, #1636]	; 0x664
 8001636:	f7fe fef7 	bl	8000428 <__aeabi_f2d>
 800163a:	a373      	add	r3, pc, #460	; (adr r3, 8001808 <main+0x340>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7ff f874 	bl	800072c <__aeabi_ddiv>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	4618      	mov	r0, r3
 800164a:	4621      	mov	r1, r4
 800164c:	f004 ff38 	bl	80064c0 <floor>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b75      	ldr	r3, [pc, #468]	; (800182c <main+0x364>)
 8001656:	f7fe fd89 	bl	800016c <__adddf3>
 800165a:	4603      	mov	r3, r0
 800165c:	460c      	mov	r4, r1
 800165e:	4618      	mov	r0, r3
 8001660:	4621      	mov	r1, r4
 8001662:	f7ff f9e9 	bl	8000a38 <__aeabi_d2iz>
 8001666:	4603      	mov	r3, r0
 8001668:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658

	     float T1 = _SQRT3*_sin(sector*_PI_3 - angle_r);
 800166c:	f8d7 0658 	ldr.w	r0, [r7, #1624]	; 0x658
 8001670:	f7fe fec8 	bl	8000404 <__aeabi_i2d>
 8001674:	a364      	add	r3, pc, #400	; (adr r3, 8001808 <main+0x340>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe ff2d 	bl	80004d8 <__aeabi_dmul>
 800167e:	4603      	mov	r3, r0
 8001680:	460c      	mov	r4, r1
 8001682:	4625      	mov	r5, r4
 8001684:	461c      	mov	r4, r3
 8001686:	f8d7 0664 	ldr.w	r0, [r7, #1636]	; 0x664
 800168a:	f7fe fecd 	bl	8000428 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7fe fd67 	bl	8000168 <__aeabi_dsub>
 800169a:	4603      	mov	r3, r0
 800169c:	460c      	mov	r4, r1
 800169e:	4618      	mov	r0, r3
 80016a0:	4621      	mov	r1, r4
 80016a2:	f7ff fa11 	bl	8000ac8 <__aeabi_d2f>
 80016a6:	4602      	mov	r2, r0
 80016a8:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80016ac:	469c      	mov	ip, r3
 80016ae:	4610      	mov	r0, r2
 80016b0:	f7ff fd56 	bl	8001160 <_sin.6903>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe feb6 	bl	8000428 <__aeabi_f2d>
 80016bc:	a354      	add	r3, pc, #336	; (adr r3, 8001810 <main+0x348>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe ff09 	bl	80004d8 <__aeabi_dmul>
 80016c6:	4603      	mov	r3, r0
 80016c8:	460c      	mov	r4, r1
 80016ca:	4618      	mov	r0, r3
 80016cc:	4621      	mov	r1, r4
 80016ce:	f7ff f9fb 	bl	8000ac8 <__aeabi_d2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
	     float T2 = _SQRT3*_sin(angle_r - (sector-1.0)*_PI_3);
 80016d8:	f8d7 0664 	ldr.w	r0, [r7, #1636]	; 0x664
 80016dc:	f7fe fea4 	bl	8000428 <__aeabi_f2d>
 80016e0:	4604      	mov	r4, r0
 80016e2:	460d      	mov	r5, r1
 80016e4:	f8d7 0658 	ldr.w	r0, [r7, #1624]	; 0x658
 80016e8:	f7fe fe8c 	bl	8000404 <__aeabi_i2d>
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b4e      	ldr	r3, [pc, #312]	; (800182c <main+0x364>)
 80016f2:	f7fe fd39 	bl	8000168 <__aeabi_dsub>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	a342      	add	r3, pc, #264	; (adr r3, 8001808 <main+0x340>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe fee8 	bl	80004d8 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fd2a 	bl	8000168 <__aeabi_dsub>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	4618      	mov	r0, r3
 800171a:	4621      	mov	r1, r4
 800171c:	f7ff f9d4 	bl	8000ac8 <__aeabi_d2f>
 8001720:	4602      	mov	r2, r0
 8001722:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8001726:	469c      	mov	ip, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f7ff fd19 	bl	8001160 <_sin.6903>
 800172e:	4603      	mov	r3, r0
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fe79 	bl	8000428 <__aeabi_f2d>
 8001736:	a336      	add	r3, pc, #216	; (adr r3, 8001810 <main+0x348>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe fecc 	bl	80004d8 <__aeabi_dmul>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	4618      	mov	r0, r3
 8001746:	4621      	mov	r1, r4
 8001748:	f7ff f9be 	bl	8000ac8 <__aeabi_d2f>
 800174c:	4603      	mov	r3, r0
 800174e:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
	      // two versions possible
	      // centered around voltage_power_supply/2
	     float T0 = 1 - T1 - T2;
 8001752:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 8001756:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800175a:	f7ff fa09 	bl	8000b70 <__aeabi_fsub>
 800175e:	4603      	mov	r3, r0
 8001760:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fa03 	bl	8000b70 <__aeabi_fsub>
 800176a:	4603      	mov	r3, r0
 800176c:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c

	     float duty_u_f,duty_v_f,duty_w_f;



	      switch(sector){
 8001770:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8001774:	3b01      	subs	r3, #1
 8001776:	2b05      	cmp	r3, #5
 8001778:	f200 8145 	bhi.w	8001a06 <main+0x53e>
 800177c:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <main+0x2bc>)
 800177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001782:	bf00      	nop
 8001784:	0800179d 	.word	0x0800179d
 8001788:	08001831 	.word	0x08001831
 800178c:	0800188f 	.word	0x0800188f
 8001790:	080018ed 	.word	0x080018ed
 8001794:	0800194b 	.word	0x0800194b
 8001798:	080019a9 	.word	0x080019a9
	        case 1:
	          duty_u_f = T1 + T2 + T0/2;
 800179c:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 80017a0:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 80017a4:	f7ff f9e6 	bl	8000b74 <__addsf3>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461c      	mov	r4, r3
 80017ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017b0:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80017b4:	f7ff fb9a 	bl	8000eec <__aeabi_fdiv>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff f9d9 	bl	8000b74 <__addsf3>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	          duty_v_f = T2 + T0/2;
 80017c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017cc:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80017d0:	f7ff fb8c 	bl	8000eec <__aeabi_fdiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	f8d7 0650 	ldr.w	r0, [r7, #1616]	; 0x650
 80017dc:	f7ff f9ca 	bl	8000b74 <__addsf3>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
	          duty_w_f = T0/2;
 80017e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017ea:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80017ee:	f7ff fb7d 	bl	8000eec <__aeabi_fdiv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	          break;
 80017f8:	e111      	b.n	8001a1e <main+0x556>
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	54442d18 	.word	0x54442d18
 8001804:	401921fb 	.word	0x401921fb
 8001808:	382daf40 	.word	0x382daf40
 800180c:	3ff0c152 	.word	0x3ff0c152
 8001810:	e858606b 	.word	0xe858606b
 8001814:	3ffbb67a 	.word	0x3ffbb67a
 8001818:	20000a44 	.word	0x20000a44
 800181c:	40900000 	.word	0x40900000
 8001820:	44430000 	.word	0x44430000
 8001824:	20000214 	.word	0x20000214
 8001828:	080071e0 	.word	0x080071e0
 800182c:	3ff00000 	.word	0x3ff00000
	        case 2:
	          duty_u_f = T1 +  T0/2;
 8001830:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001834:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001838:	f7ff fb58 	bl	8000eec <__aeabi_fdiv>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8001844:	f7ff f996 	bl	8000b74 <__addsf3>
 8001848:	4603      	mov	r3, r0
 800184a:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	          duty_v_f = T1 + T2 + T0/2;
 800184e:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8001852:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8001856:	f7ff f98d 	bl	8000b74 <__addsf3>
 800185a:	4603      	mov	r3, r0
 800185c:	461c      	mov	r4, r3
 800185e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001862:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001866:	f7ff fb41 	bl	8000eec <__aeabi_fdiv>
 800186a:	4603      	mov	r3, r0
 800186c:	4619      	mov	r1, r3
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff f980 	bl	8000b74 <__addsf3>
 8001874:	4603      	mov	r3, r0
 8001876:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
	          duty_w_f = T0/2;
 800187a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800187e:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001882:	f7ff fb33 	bl	8000eec <__aeabi_fdiv>
 8001886:	4603      	mov	r3, r0
 8001888:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	          break;
 800188c:	e0c7      	b.n	8001a1e <main+0x556>
	        case 3:
	          duty_u_f = T0/2;
 800188e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001892:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001896:	f7ff fb29 	bl	8000eec <__aeabi_fdiv>
 800189a:	4603      	mov	r3, r0
 800189c:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	          duty_v_f = T1 + T2 + T0/2;
 80018a0:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 80018a4:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 80018a8:	f7ff f964 	bl	8000b74 <__addsf3>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461c      	mov	r4, r3
 80018b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018b4:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80018b8:	f7ff fb18 	bl	8000eec <__aeabi_fdiv>
 80018bc:	4603      	mov	r3, r0
 80018be:	4619      	mov	r1, r3
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff f957 	bl	8000b74 <__addsf3>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
	          duty_w_f = T2 + T0/2;
 80018cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018d0:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80018d4:	f7ff fb0a 	bl	8000eec <__aeabi_fdiv>
 80018d8:	4603      	mov	r3, r0
 80018da:	4619      	mov	r1, r3
 80018dc:	f8d7 0650 	ldr.w	r0, [r7, #1616]	; 0x650
 80018e0:	f7ff f948 	bl	8000b74 <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	          break;
 80018ea:	e098      	b.n	8001a1e <main+0x556>
	        case 4:
	          duty_u_f = T0/2;
 80018ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018f0:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80018f4:	f7ff fafa 	bl	8000eec <__aeabi_fdiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	          duty_v_f = T1+ T0/2;
 80018fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001902:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001906:	f7ff faf1 	bl	8000eec <__aeabi_fdiv>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8001912:	f7ff f92f 	bl	8000b74 <__addsf3>
 8001916:	4603      	mov	r3, r0
 8001918:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
	          duty_w_f = T1 + T2 + T0/2;
 800191c:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8001920:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8001924:	f7ff f926 	bl	8000b74 <__addsf3>
 8001928:	4603      	mov	r3, r0
 800192a:	461c      	mov	r4, r3
 800192c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001930:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001934:	f7ff fada 	bl	8000eec <__aeabi_fdiv>
 8001938:	4603      	mov	r3, r0
 800193a:	4619      	mov	r1, r3
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff f919 	bl	8000b74 <__addsf3>
 8001942:	4603      	mov	r3, r0
 8001944:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	          break;
 8001948:	e069      	b.n	8001a1e <main+0x556>
	        case 5:
	          duty_u_f = T2 + T0/2;
 800194a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800194e:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001952:	f7ff facb 	bl	8000eec <__aeabi_fdiv>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	f8d7 0650 	ldr.w	r0, [r7, #1616]	; 0x650
 800195e:	f7ff f909 	bl	8000b74 <__addsf3>
 8001962:	4603      	mov	r3, r0
 8001964:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	          duty_v_f = T0/2;
 8001968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800196c:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001970:	f7ff fabc 	bl	8000eec <__aeabi_fdiv>
 8001974:	4603      	mov	r3, r0
 8001976:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
	          duty_w_f = T1 + T2 + T0/2;
 800197a:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 800197e:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 8001982:	f7ff f8f7 	bl	8000b74 <__addsf3>
 8001986:	4603      	mov	r3, r0
 8001988:	461c      	mov	r4, r3
 800198a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800198e:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 8001992:	f7ff faab 	bl	8000eec <__aeabi_fdiv>
 8001996:	4603      	mov	r3, r0
 8001998:	4619      	mov	r1, r3
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff f8ea 	bl	8000b74 <__addsf3>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	          break;
 80019a6:	e03a      	b.n	8001a1e <main+0x556>
	        case 6:
	          duty_u_f = T1 + T2 + T0/2;
 80019a8:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 80019ac:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 80019b0:	f7ff f8e0 	bl	8000b74 <__addsf3>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461c      	mov	r4, r3
 80019b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019bc:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80019c0:	f7ff fa94 	bl	8000eec <__aeabi_fdiv>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff f8d3 	bl	8000b74 <__addsf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	          duty_v_f = T0/2;
 80019d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019d8:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80019dc:	f7ff fa86 	bl	8000eec <__aeabi_fdiv>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
	          duty_w_f = T1 + T0/2;
 80019e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019ea:	f8d7 064c 	ldr.w	r0, [r7, #1612]	; 0x64c
 80019ee:	f7ff fa7d 	bl	8000eec <__aeabi_fdiv>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4619      	mov	r1, r3
 80019f6:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 80019fa:	f7ff f8bb 	bl	8000b74 <__addsf3>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	          break;
 8001a04:	e00b      	b.n	8001a1e <main+0x556>
	        default:
	         // possible error state
	          duty_u_f = 0;
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	          duty_v_f = 0;
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
	          duty_w_f = 0;
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	      }
	      duty_u = (duty_u_f+0.4)*900;
 8001a1e:	f8d7 0674 	ldr.w	r0, [r7, #1652]	; 0x674
 8001a22:	f7fe fd01 	bl	8000428 <__aeabi_f2d>
 8001a26:	a334      	add	r3, pc, #208	; (adr r3, 8001af8 <main+0x630>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fb9e 	bl	800016c <__adddf3>
 8001a30:	4603      	mov	r3, r0
 8001a32:	460c      	mov	r4, r1
 8001a34:	4618      	mov	r0, r3
 8001a36:	4621      	mov	r1, r4
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <main+0x638>)
 8001a3e:	f7fe fd4b 	bl	80004d8 <__aeabi_dmul>
 8001a42:	4603      	mov	r3, r0
 8001a44:	460c      	mov	r4, r1
 8001a46:	4618      	mov	r0, r3
 8001a48:	4621      	mov	r1, r4
 8001a4a:	f7ff f81d 	bl	8000a88 <__aeabi_d2uiz>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <main+0x63c>)
 8001a54:	801a      	strh	r2, [r3, #0]
	      duty_v = (duty_v_f+0.4)*900;
 8001a56:	f8d7 0670 	ldr.w	r0, [r7, #1648]	; 0x670
 8001a5a:	f7fe fce5 	bl	8000428 <__aeabi_f2d>
 8001a5e:	a326      	add	r3, pc, #152	; (adr r3, 8001af8 <main+0x630>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fb82 	bl	800016c <__adddf3>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	4621      	mov	r1, r4
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <main+0x638>)
 8001a76:	f7fe fd2f 	bl	80004d8 <__aeabi_dmul>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	4618      	mov	r0, r3
 8001a80:	4621      	mov	r1, r4
 8001a82:	f7ff f801 	bl	8000a88 <__aeabi_d2uiz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <main+0x640>)
 8001a8c:	801a      	strh	r2, [r3, #0]
	      duty_w = (duty_w_f+0.4)*900;
 8001a8e:	f8d7 066c 	ldr.w	r0, [r7, #1644]	; 0x66c
 8001a92:	f7fe fcc9 	bl	8000428 <__aeabi_f2d>
 8001a96:	a318      	add	r3, pc, #96	; (adr r3, 8001af8 <main+0x630>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fb66 	bl	800016c <__adddf3>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <main+0x638>)
 8001aae:	f7fe fd13 	bl	80004d8 <__aeabi_dmul>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	4621      	mov	r1, r4
 8001aba:	f7fe ffe5 	bl	8000a88 <__aeabi_d2uiz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <main+0x644>)
 8001ac4:	801a      	strh	r2, [r3, #0]

//	     sprintf(buf,"U:%d U:%d U:%d U:%d U:%f\t\n",sector, duty_u,duty_v,duty_w,angle_r);
//	     HAL_UART_Transmit(&huart2,buf,strlen(buf),10);
	   	gpio_b12 = !gpio_b12;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <main+0x648>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <main+0x648>)
 8001ad8:	601a      	str	r2, [r3, #0]
	   	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, gpio_b12);
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <main+0x648>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <main+0x64c>)
 8001ae8:	f001 f942 	bl	8002d70 <HAL_GPIO_WritePin>

	    angle_el=angle_el+8;
 8001aec:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8001af0:	3308      	adds	r3, #8
 8001af2:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
  {
 8001af6:	e579      	b.n	80015ec <main+0x124>
 8001af8:	9999999a 	.word	0x9999999a
 8001afc:	3fd99999 	.word	0x3fd99999
 8001b00:	408c2000 	.word	0x408c2000
 8001b04:	200001fc 	.word	0x200001fc
 8001b08:	200001fe 	.word	0x200001fe
 8001b0c:	20000200 	.word	0x20000200
 8001b10:	200001f8 	.word	0x200001f8
 8001b14:	40010c00 	.word	0x40010c00

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b094      	sub	sp, #80	; 0x50
 8001b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b22:	2228      	movs	r2, #40	; 0x28
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 ffb5 	bl	8004a96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b50:	2310      	movs	r3, #16
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b54:	2302      	movs	r3, #2
 8001b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b5c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 f91a 	bl	8002da0 <HAL_RCC_OscConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001b72:	f000 fa2e 	bl	8001fd2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b76:	230f      	movs	r3, #15
 8001b78:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2102      	movs	r1, #2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fb84 	bl	80032a0 <HAL_RCC_ClockConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b9e:	f000 fa18 	bl	8001fd2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001baa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fd12 	bl	80035d8 <HAL_RCCEx_PeriphCLKConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001bba:	f000 fa0a 	bl	8001fd2 <Error_Handler>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3750      	adds	r7, #80	; 0x50
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <MX_ADC1_Init+0x78>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001bf2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001bf6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001c06:	f000 fc41 	bl	800248c <HAL_ADC_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c10:	f000 f9df 	bl	8001fd2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_ADC1_Init+0x74>)
 8001c26:	f000 fd09 	bl	800263c <HAL_ADC_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c30:	f000 f9cf 	bl	8001fd2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000a14 	.word	0x20000a14
 8001c40:	40012400 	.word	0x40012400

08001c44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b096      	sub	sp, #88	; 0x58
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2220      	movs	r2, #32
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 ff0a 	bl	8004a96 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c82:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001c84:	4a4e      	ldr	r2, [pc, #312]	; (8001dc0 <MX_TIM1_Init+0x17c>)
 8001c86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600;
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001c96:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001c9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ca8:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cae:	4843      	ldr	r0, [pc, #268]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001cb0:	f001 fd48 	bl	8003744 <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001cba:	f000 f98a 	bl	8001fd2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483c      	ldr	r0, [pc, #240]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001ccc:	f002 f992 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cd6:	f000 f97c 	bl	8001fd2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cda:	4838      	ldr	r0, [pc, #224]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001cdc:	f001 fe2c 	bl	8003938 <HAL_TIM_PWM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ce6:	f000 f974 	bl	8001fd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4830      	ldr	r0, [pc, #192]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001cfa:	f002 fcfb 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d04:	f000 f965 	bl	8001fd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d08:	2360      	movs	r3, #96	; 0x60
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4823      	ldr	r0, [pc, #140]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001d2e:	f002 f8a3 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d38:	f000 f94b 	bl	8001fd2 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8001d3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d46:	2204      	movs	r2, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481c      	ldr	r0, [pc, #112]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001d4c:	f002 f894 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d56:	f000 f93c 	bl	8001fd2 <Error_Handler>
  }
  sConfigOC.Pulse = 1300;
 8001d5a:	f240 5314 	movw	r3, #1300	; 0x514
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	2208      	movs	r2, #8
 8001d66:	4619      	mov	r1, r3
 8001d68:	4814      	ldr	r0, [pc, #80]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001d6a:	f002 f885 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001d74:	f000 f92d 	bl	8001fd2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001da0:	f002 fd06 	bl	80047b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8001daa:	f000 f912 	bl	8001fd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dae:	4803      	ldr	r0, [pc, #12]	; (8001dbc <MX_TIM1_Init+0x178>)
 8001db0:	f000 f9c4 	bl	800213c <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3758      	adds	r7, #88	; 0x58
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000a44 	.word	0x20000a44
 8001dc0:	40012c00 	.word	0x40012c00

08001dc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08e      	sub	sp, #56	; 0x38
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	f107 0320 	add.w	r3, r7, #32
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32;
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e1a:	4822      	ldr	r0, [pc, #136]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e1c:	f001 fc92 	bl	8003744 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001e26:	f000 f8d4 	bl	8001fd2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e34:	4619      	mov	r1, r3
 8001e36:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e38:	f002 f8dc 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001e42:	f000 f8c6 	bl	8001fd2 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001e46:	4817      	ldr	r0, [pc, #92]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e48:	f001 fd1e 	bl	8003888 <HAL_TIM_OC_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001e52:	f000 f8be 	bl	8001fd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5e:	f107 0320 	add.w	r3, r7, #32
 8001e62:	4619      	mov	r1, r3
 8001e64:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e66:	f002 fc45 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001e70:	f000 f8af 	bl	8001fd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <MX_TIM2_Init+0xe0>)
 8001e8c:	f001 ff9c 	bl	8003dc8 <HAL_TIM_OC_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001e96:	f000 f89c 	bl	8001fd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	3738      	adds	r7, #56	; 0x38
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000b54 	.word	0x20000b54

08001ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <MX_USART2_UART_Init+0x50>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	f002 fcc9 	bl	8004876 <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eea:	f000 f872 	bl	8001fd2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000b9c 	.word	0x20000b9c
 8001ef8:	40004400 	.word	0x40004400

08001efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f16:	f043 0310 	orr.w	r3, r3, #16
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_GPIO_Init+0xb8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f5e:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <MX_GPIO_Init+0xbc>)
 8001f60:	f000 ff06 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001f6c:	f000 ff00 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f76:	2301      	movs	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	4619      	mov	r1, r3
 8001f88:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <MX_GPIO_Init+0xbc>)
 8001f8a:	f000 fd97 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_GPIO_Init+0xc0>)
 8001fa8:	f000 fd88 	bl	8002abc <HAL_GPIO_Init>

}
 8001fac:	bf00      	nop
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40011000 	.word	0x40011000
 8001fbc:	40010c00 	.word	0x40010c00

08001fc0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
//
//	    break;
//	    case HAL_TIM_ACTIVE_CHANNEL_3:
//	    break;
//	}
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_MspInit+0x5c>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6193      	str	r3, [r2, #24]
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_MspInit+0x5c>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_MspInit+0x5c>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_MspInit+0x5c>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_MspInit+0x5c>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_MspInit+0x60>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_MspInit+0x60>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_ADC_MspInit+0x6c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d121      	bne.n	80020a8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_ADC_MspInit+0x70>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <HAL_ADC_MspInit+0x70>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_ADC_MspInit+0x70>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_ADC_MspInit+0x70>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_ADC_MspInit+0x70>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_ADC_MspInit+0x70>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002094:	2302      	movs	r3, #2
 8002096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002098:	2303      	movs	r3, #3
 800209a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <HAL_ADC_MspInit+0x74>)
 80020a4:	f000 fd0a 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020a8:	bf00      	nop
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40012400 	.word	0x40012400
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010800 	.word	0x40010800

080020bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HAL_TIM_Base_MspInit+0x78>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d114      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_TIM_Base_MspInit+0x7c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_TIM_Base_MspInit+0x7c>)
 80020d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d8:	6193      	str	r3, [r2, #24]
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_TIM_Base_MspInit+0x7c>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2019      	movs	r0, #25
 80020ec:	f000 fcaf 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020f0:	2019      	movs	r0, #25
 80020f2:	f000 fcc8 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020f6:	e018      	b.n	800212a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002100:	d113      	bne.n	800212a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_TIM_Base_MspInit+0x7c>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_TIM_Base_MspInit+0x7c>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_TIM_Base_MspInit+0x7c>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	201c      	movs	r0, #28
 8002120:	f000 fc95 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002124:	201c      	movs	r0, #28
 8002126:	f000 fcae 	bl	8002a86 <HAL_NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_TIM_MspPostInit+0x5c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d118      	bne.n	800218e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_TIM_MspPostInit+0x60>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <HAL_TIM_MspPostInit+0x60>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_TIM_MspPostInit+0x60>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002174:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002178:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2302      	movs	r3, #2
 8002180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	4619      	mov	r1, r3
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <HAL_TIM_MspPostInit+0x64>)
 800218a:	f000 fc97 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40012c00 	.word	0x40012c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010800 	.word	0x40010800

080021a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1b      	ldr	r2, [pc, #108]	; (800222c <HAL_UART_MspInit+0x88>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d12f      	bne.n	8002224 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_UART_MspInit+0x8c>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_UART_MspInit+0x8c>)
 80021ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ce:	61d3      	str	r3, [r2, #28]
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_UART_MspInit+0x8c>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_UART_MspInit+0x8c>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a13      	ldr	r2, [pc, #76]	; (8002230 <HAL_UART_MspInit+0x8c>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_UART_MspInit+0x8c>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021f4:	2304      	movs	r3, #4
 80021f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	4619      	mov	r1, r3
 8002206:	480b      	ldr	r0, [pc, #44]	; (8002234 <HAL_UART_MspInit+0x90>)
 8002208:	f000 fc58 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800220c:	2308      	movs	r3, #8
 800220e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	4619      	mov	r1, r3
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <HAL_UART_MspInit+0x90>)
 8002220:	f000 fc4c 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40004400 	.word	0x40004400
 8002230:	40021000 	.word	0x40021000
 8002234:	40010800 	.word	0x40010800

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <HardFault_Handler+0x4>

0800224a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <MemManage_Handler+0x4>

08002250 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <BusFault_Handler+0x4>

08002256 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <UsageFault_Handler+0x4>

0800225c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002284:	f000 f8e6 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

     TIM1->CCR1 = duty_u;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <TIM1_UP_IRQHandler+0x28>)
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <TIM1_UP_IRQHandler+0x2c>)
 8002296:	635a      	str	r2, [r3, #52]	; 0x34
     TIM1->CCR2 = duty_v;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <TIM1_UP_IRQHandler+0x30>)
 800229a:	881a      	ldrh	r2, [r3, #0]
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <TIM1_UP_IRQHandler+0x2c>)
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
     TIM1->CCR3 = duty_w;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <TIM1_UP_IRQHandler+0x34>)
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <TIM1_UP_IRQHandler+0x2c>)
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <TIM1_UP_IRQHandler+0x38>)
 80022aa:	f001 fc85 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200001fc 	.word	0x200001fc
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	200001fe 	.word	0x200001fe
 80022c0:	20000200 	.word	0x20000200
 80022c4:	20000a44 	.word	0x20000a44

080022c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if((countpin%100)==0)
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <TIM2_IRQHandler+0x30>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <TIM2_IRQHandler+0x34>)
 80022d2:	fb82 1203 	smull	r1, r2, r2, r3
 80022d6:	1151      	asrs	r1, r2, #5
 80022d8:	17da      	asrs	r2, r3, #31
 80022da:	1a8a      	subs	r2, r1, r2
 80022dc:	2164      	movs	r1, #100	; 0x64
 80022de:	fb01 f202 	mul.w	r2, r1, r2
 80022e2:	1a9a      	subs	r2, r3, r2
	{
//    	gpio_b12 = !gpio_b12;
//    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, gpio_b12);

	}
	countpin++;
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <TIM2_IRQHandler+0x30>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <TIM2_IRQHandler+0x30>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <TIM2_IRQHandler+0x38>)
 80022f0:	f001 fc62 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000204 	.word	0x20000204
 80022fc:	51eb851f 	.word	0x51eb851f
 8002300:	20000b54 	.word	0x20000b54

08002304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <_sbrk+0x5c>)
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <_sbrk+0x60>)
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <_sbrk+0x64>)
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <_sbrk+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	429a      	cmp	r2, r3
 8002332:	d207      	bcs.n	8002344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002334:	f002 fb7a 	bl	8004a2c <__errno>
 8002338:	4602      	mov	r2, r0
 800233a:	230c      	movs	r3, #12
 800233c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002342:	e009      	b.n	8002358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <_sbrk+0x64>)
 8002354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002356:	68fb      	ldr	r3, [r7, #12]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20005000 	.word	0x20005000
 8002364:	00000400 	.word	0x00000400
 8002368:	20000208 	.word	0x20000208
 800236c:	20000be8 	.word	0x20000be8

08002370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800237c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800237e:	e003      	b.n	8002388 <LoopCopyDataInit>

08002380 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002382:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002384:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002386:	3104      	adds	r1, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002388:	480a      	ldr	r0, [pc, #40]	; (80023b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800238c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800238e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002390:	d3f6      	bcc.n	8002380 <CopyDataInit>
  ldr r2, =_sbss
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002394:	e002      	b.n	800239c <LoopFillZerobss>

08002396 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002398:	f842 3b04 	str.w	r3, [r2], #4

0800239c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800239e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023a0:	d3f9      	bcc.n	8002396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023a2:	f7ff ffe5 	bl	8002370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a6:	f002 fb47 	bl	8004a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023aa:	f7ff f88d 	bl	80014c8 <main>
  bx lr
 80023ae:	4770      	bx	lr
  ldr r3, =_sidata
 80023b0:	08007b30 	.word	0x08007b30
  ldr r0, =_sdata
 80023b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023b8:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80023bc:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80023c0:	20000be4 	.word	0x20000be4

080023c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <ADC1_2_IRQHandler>
	...

080023c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_Init+0x28>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_Init+0x28>)
 80023d2:	f043 0310 	orr.w	r3, r3, #16
 80023d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f000 fb2d 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023de:	2000      	movs	r0, #0
 80023e0:	f000 f808 	bl	80023f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e4:	f7ff fdfc 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40022000 	.word	0x40022000

080023f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_InitTick+0x54>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_InitTick+0x58>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240a:	fbb3 f3f1 	udiv	r3, r3, r1
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fb45 	bl	8002aa2 <HAL_SYSTICK_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00e      	b.n	8002440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d80a      	bhi.n	800243e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002428:	2200      	movs	r2, #0
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002430:	f000 fb0d 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <HAL_InitTick+0x5c>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000000 	.word	0x20000000
 800244c:	20000008 	.word	0x20000008
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_IncTick+0x1c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_IncTick+0x20>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a03      	ldr	r2, [pc, #12]	; (8002474 <HAL_IncTick+0x20>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000008 	.word	0x20000008
 8002474:	20000bdc 	.word	0x20000bdc

08002478 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return uwTick;
 800247c:	4b02      	ldr	r3, [pc, #8]	; (8002488 <HAL_GetTick+0x10>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	20000bdc 	.word	0x20000bdc

0800248c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0be      	b.n	800262c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fdba 	bl	8002044 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f9ab 	bl	800282c <ADC_ConversionStop_Disable>
 80024d6:	4603      	mov	r3, r0
 80024d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 8099 	bne.w	800261a <HAL_ADC_Init+0x18e>
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 8095 	bne.w	800261a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024f8:	f023 0302 	bic.w	r3, r3, #2
 80024fc:	f043 0202 	orr.w	r2, r3, #2
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800250c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7b1b      	ldrb	r3, [r3, #12]
 8002512:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002514:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4313      	orrs	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002524:	d003      	beq.n	800252e <HAL_ADC_Init+0xa2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d102      	bne.n	8002534 <HAL_ADC_Init+0xa8>
 800252e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002532:	e000      	b.n	8002536 <HAL_ADC_Init+0xaa>
 8002534:	2300      	movs	r3, #0
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7d1b      	ldrb	r3, [r3, #20]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7b1b      	ldrb	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	3b01      	subs	r3, #1
 8002552:	035a      	lsls	r2, r3, #13
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e00b      	b.n	8002578 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_ADC_Init+0x1a8>)
 8002594:	4013      	ands	r3, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	430b      	orrs	r3, r1
 800259e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a8:	d003      	beq.n	80025b2 <HAL_ADC_Init+0x126>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d104      	bne.n	80025bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	051b      	lsls	r3, r3, #20
 80025ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_ADC_Init+0x1ac>)
 80025d8:	4013      	ands	r3, r2
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10b      	bne.n	80025f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025f6:	e018      	b.n	800262a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f023 0312 	bic.w	r3, r3, #18
 8002600:	f043 0210 	orr.w	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002618:	e007      	b.n	800262a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800262a:	7dfb      	ldrb	r3, [r7, #23]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	ffe1f7fd 	.word	0xffe1f7fd
 8002638:	ff1f0efe 	.word	0xff1f0efe

0800263c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x20>
 8002658:	2302      	movs	r3, #2
 800265a:	e0dc      	b.n	8002816 <HAL_ADC_ConfigChannel+0x1da>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b06      	cmp	r3, #6
 800266a:	d81c      	bhi.n	80026a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b05      	subs	r3, #5
 800267e:	221f      	movs	r2, #31
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3b05      	subs	r3, #5
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	635a      	str	r2, [r3, #52]	; 0x34
 80026a4:	e03c      	b.n	8002720 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d81c      	bhi.n	80026e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	3b23      	subs	r3, #35	; 0x23
 80026c0:	221f      	movs	r2, #31
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	4019      	ands	r1, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	3b23      	subs	r3, #35	; 0x23
 80026da:	fa00 f203 	lsl.w	r2, r0, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
 80026e6:	e01b      	b.n	8002720 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	3b41      	subs	r3, #65	; 0x41
 80026fa:	221f      	movs	r2, #31
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	4019      	ands	r1, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	3b41      	subs	r3, #65	; 0x41
 8002714:	fa00 f203 	lsl.w	r2, r0, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b09      	cmp	r3, #9
 8002726:	d91c      	bls.n	8002762 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68d9      	ldr	r1, [r3, #12]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	3b1e      	subs	r3, #30
 800273a:	2207      	movs	r2, #7
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	4019      	ands	r1, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6898      	ldr	r0, [r3, #8]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	3b1e      	subs	r3, #30
 8002754:	fa00 f203 	lsl.w	r2, r0, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	e019      	b.n	8002796 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6919      	ldr	r1, [r3, #16]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	2207      	movs	r2, #7
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	4019      	ands	r1, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6898      	ldr	r0, [r3, #8]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	fa00 f203 	lsl.w	r2, r0, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b10      	cmp	r3, #16
 800279c:	d003      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027a2:	2b11      	cmp	r3, #17
 80027a4:	d132      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_ADC_ConfigChannel+0x1e4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d125      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d126      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027cc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d11a      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_ADC_ConfigChannel+0x1e8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a13      	ldr	r2, [pc, #76]	; (8002828 <HAL_ADC_ConfigChannel+0x1ec>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	0c9a      	lsrs	r2, r3, #18
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027ec:	e002      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x1b2>
 80027fa:	e007      	b.n	800280c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40012400 	.word	0x40012400
 8002824:	20000000 	.word	0x20000000
 8002828:	431bde83 	.word	0x431bde83

0800282c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d127      	bne.n	8002896 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002856:	f7ff fe0f 	bl	8002478 <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800285c:	e014      	b.n	8002888 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800285e:	f7ff fe0b 	bl	8002478 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d90d      	bls.n	8002888 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	f043 0210 	orr.w	r2, r3, #16
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e007      	b.n	8002898 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d0e3      	beq.n	800285e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028bc:	4013      	ands	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d2:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <__NVIC_SetPriorityGrouping+0x44>)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	60d3      	str	r3, [r2, #12]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <__NVIC_GetPriorityGrouping+0x18>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	f003 0307 	and.w	r3, r3, #7
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	2b00      	cmp	r3, #0
 8002914:	db0b      	blt.n	800292e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	f003 021f 	and.w	r2, r3, #31
 800291c:	4906      	ldr	r1, [pc, #24]	; (8002938 <__NVIC_EnableIRQ+0x34>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	2001      	movs	r0, #1
 8002926:	fa00 f202 	lsl.w	r2, r0, r2
 800292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100

0800293c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	6039      	str	r1, [r7, #0]
 8002946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	2b00      	cmp	r3, #0
 800294e:	db0a      	blt.n	8002966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	b2da      	uxtb	r2, r3
 8002954:	490c      	ldr	r1, [pc, #48]	; (8002988 <__NVIC_SetPriority+0x4c>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	0112      	lsls	r2, r2, #4
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	440b      	add	r3, r1
 8002960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002964:	e00a      	b.n	800297c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4908      	ldr	r1, [pc, #32]	; (800298c <__NVIC_SetPriority+0x50>)
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	3b04      	subs	r3, #4
 8002974:	0112      	lsls	r2, r2, #4
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	440b      	add	r3, r1
 800297a:	761a      	strb	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000e100 	.word	0xe000e100
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f1c3 0307 	rsb	r3, r3, #7
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	bf28      	it	cs
 80029ae:	2304      	movcs	r3, #4
 80029b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2b06      	cmp	r3, #6
 80029b8:	d902      	bls.n	80029c0 <NVIC_EncodePriority+0x30>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3b03      	subs	r3, #3
 80029be:	e000      	b.n	80029c2 <NVIC_EncodePriority+0x32>
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	401a      	ands	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43d9      	mvns	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	4313      	orrs	r3, r2
         );
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a18:	f7ff ff90 	bl	800293c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff2d 	bl	80028a0 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff42 	bl	80028e8 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff90 	bl	8002990 <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5f 	bl	800293c <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff35 	bl	8002904 <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b08b      	sub	sp, #44	; 0x2c
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ace:	e127      	b.n	8002d20 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	f040 8116 	bne.w	8002d1a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b12      	cmp	r3, #18
 8002af4:	d034      	beq.n	8002b60 <HAL_GPIO_Init+0xa4>
 8002af6:	2b12      	cmp	r3, #18
 8002af8:	d80d      	bhi.n	8002b16 <HAL_GPIO_Init+0x5a>
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d02b      	beq.n	8002b56 <HAL_GPIO_Init+0x9a>
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d804      	bhi.n	8002b0c <HAL_GPIO_Init+0x50>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d031      	beq.n	8002b6a <HAL_GPIO_Init+0xae>
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d01c      	beq.n	8002b44 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b0a:	e048      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d043      	beq.n	8002b98 <HAL_GPIO_Init+0xdc>
 8002b10:	2b11      	cmp	r3, #17
 8002b12:	d01b      	beq.n	8002b4c <HAL_GPIO_Init+0x90>
          break;
 8002b14:	e043      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b16:	4a89      	ldr	r2, [pc, #548]	; (8002d3c <HAL_GPIO_Init+0x280>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d026      	beq.n	8002b6a <HAL_GPIO_Init+0xae>
 8002b1c:	4a87      	ldr	r2, [pc, #540]	; (8002d3c <HAL_GPIO_Init+0x280>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d806      	bhi.n	8002b30 <HAL_GPIO_Init+0x74>
 8002b22:	4a87      	ldr	r2, [pc, #540]	; (8002d40 <HAL_GPIO_Init+0x284>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d020      	beq.n	8002b6a <HAL_GPIO_Init+0xae>
 8002b28:	4a86      	ldr	r2, [pc, #536]	; (8002d44 <HAL_GPIO_Init+0x288>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01d      	beq.n	8002b6a <HAL_GPIO_Init+0xae>
          break;
 8002b2e:	e036      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b30:	4a85      	ldr	r2, [pc, #532]	; (8002d48 <HAL_GPIO_Init+0x28c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0xae>
 8002b36:	4a85      	ldr	r2, [pc, #532]	; (8002d4c <HAL_GPIO_Init+0x290>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d016      	beq.n	8002b6a <HAL_GPIO_Init+0xae>
 8002b3c:	4a84      	ldr	r2, [pc, #528]	; (8002d50 <HAL_GPIO_Init+0x294>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0xae>
          break;
 8002b42:	e02c      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	623b      	str	r3, [r7, #32]
          break;
 8002b4a:	e028      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	3304      	adds	r3, #4
 8002b52:	623b      	str	r3, [r7, #32]
          break;
 8002b54:	e023      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	623b      	str	r3, [r7, #32]
          break;
 8002b5e:	e01e      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	330c      	adds	r3, #12
 8002b66:	623b      	str	r3, [r7, #32]
          break;
 8002b68:	e019      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b72:	2304      	movs	r3, #4
 8002b74:	623b      	str	r3, [r7, #32]
          break;
 8002b76:	e012      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b80:	2308      	movs	r3, #8
 8002b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	611a      	str	r2, [r3, #16]
          break;
 8002b8a:	e008      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	615a      	str	r2, [r3, #20]
          break;
 8002b96:	e002      	b.n	8002b9e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
          break;
 8002b9c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2bff      	cmp	r3, #255	; 0xff
 8002ba2:	d801      	bhi.n	8002ba8 <HAL_GPIO_Init+0xec>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	e001      	b.n	8002bac <HAL_GPIO_Init+0xf0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2bff      	cmp	r3, #255	; 0xff
 8002bb2:	d802      	bhi.n	8002bba <HAL_GPIO_Init+0xfe>
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_Init+0x104>
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	3b08      	subs	r3, #8
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	6a39      	ldr	r1, [r7, #32]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8096 	beq.w	8002d1a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bee:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_GPIO_Init+0x298>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_GPIO_Init+0x298>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6193      	str	r3, [r2, #24]
 8002bfa:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_GPIO_Init+0x298>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c06:	4a54      	ldr	r2, [pc, #336]	; (8002d58 <HAL_GPIO_Init+0x29c>)
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4013      	ands	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4b      	ldr	r2, [pc, #300]	; (8002d5c <HAL_GPIO_Init+0x2a0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x19e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <HAL_GPIO_Init+0x2a4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x19a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a49      	ldr	r2, [pc, #292]	; (8002d64 <HAL_GPIO_Init+0x2a8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x196>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a48      	ldr	r2, [pc, #288]	; (8002d68 <HAL_GPIO_Init+0x2ac>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x192>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x1a0>
 8002c4e:	2304      	movs	r3, #4
 8002c50:	e004      	b.n	8002c5c <HAL_GPIO_Init+0x1a0>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x1a0>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_GPIO_Init+0x1a0>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	f002 0203 	and.w	r2, r2, #3
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	4093      	lsls	r3, r2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c6c:	493a      	ldr	r1, [pc, #232]	; (8002d58 <HAL_GPIO_Init+0x29c>)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c86:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4938      	ldr	r1, [pc, #224]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
 8002c92:	e006      	b.n	8002ca2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c94:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	4933      	ldr	r1, [pc, #204]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	492e      	ldr	r1, [pc, #184]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
 8002cba:	e006      	b.n	8002cca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	4929      	ldr	r1, [pc, #164]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cd6:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	4924      	ldr	r1, [pc, #144]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
 8002ce2:	e006      	b.n	8002cf2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ce4:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	491f      	ldr	r1, [pc, #124]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	491a      	ldr	r1, [pc, #104]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60cb      	str	r3, [r1, #12]
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	4915      	ldr	r1, [pc, #84]	; (8002d6c <HAL_GPIO_Init+0x2b0>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f47f aed0 	bne.w	8002ad0 <HAL_GPIO_Init+0x14>
  }
}
 8002d30:	bf00      	nop
 8002d32:	372c      	adds	r7, #44	; 0x2c
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	10210000 	.word	0x10210000
 8002d40:	10110000 	.word	0x10110000
 8002d44:	10120000 	.word	0x10120000
 8002d48:	10310000 	.word	0x10310000
 8002d4c:	10320000 	.word	0x10320000
 8002d50:	10220000 	.word	0x10220000
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40010000 	.word	0x40010000
 8002d5c:	40010800 	.word	0x40010800
 8002d60:	40010c00 	.word	0x40010c00
 8002d64:	40011000 	.word	0x40011000
 8002d68:	40011400 	.word	0x40011400
 8002d6c:	40010400 	.word	0x40010400

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d8c:	e003      	b.n	8002d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e26c      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8087 	beq.w	8002ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dc0:	4b92      	ldr	r3, [pc, #584]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d00c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dcc:	4b8f      	ldr	r3, [pc, #572]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d112      	bne.n	8002dfe <HAL_RCC_OscConfig+0x5e>
 8002dd8:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d10b      	bne.n	8002dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de6:	4b89      	ldr	r3, [pc, #548]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d06c      	beq.n	8002ecc <HAL_RCC_OscConfig+0x12c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d168      	bne.n	8002ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e246      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x76>
 8002e08:	4b80      	ldr	r3, [pc, #512]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a7f      	ldr	r2, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e02e      	b.n	8002e74 <HAL_RCC_OscConfig+0xd4>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x98>
 8002e1e:	4b7b      	ldr	r3, [pc, #492]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7a      	ldr	r2, [pc, #488]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b78      	ldr	r3, [pc, #480]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a77      	ldr	r2, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e01d      	b.n	8002e74 <HAL_RCC_OscConfig+0xd4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0xbc>
 8002e42:	4b72      	ldr	r3, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a71      	ldr	r2, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6e      	ldr	r2, [pc, #440]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0xd4>
 8002e5c:	4b6b      	ldr	r3, [pc, #428]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6a      	ldr	r2, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a67      	ldr	r2, [pc, #412]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7ff fafc 	bl	8002478 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7ff faf8 	bl	8002478 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1fa      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b5d      	ldr	r3, [pc, #372]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0xe4>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7ff fae8 	bl	8002478 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7ff fae4 	bl	8002478 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1e6      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x10c>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d063      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eda:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ee6:	4b49      	ldr	r3, [pc, #292]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d11c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x18c>
 8002ef2:	4b46      	ldr	r3, [pc, #280]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_RCC_OscConfig+0x176>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e1ba      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f16:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4939      	ldr	r1, [pc, #228]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2a:	e03a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d020      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7ff fa9d 	bl	8002478 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f42:	f7ff fa99 	bl	8002478 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e19b      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4927      	ldr	r1, [pc, #156]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
 8002f74:	e015      	b.n	8002fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff fa7c 	bl	8002478 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f84:	f7ff fa78 	bl	8002478 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e17a      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d03a      	beq.n	8003024 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d019      	beq.n	8002fea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbc:	f7ff fa5c 	bl	8002478 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc4:	f7ff fa58 	bl	8002478 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e15a      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f000 fada 	bl	800359c <RCC_Delay>
 8002fe8:	e01c      	b.n	8003024 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff0:	f7ff fa42 	bl	8002478 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff6:	e00f      	b.n	8003018 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7ff fa3e 	bl	8002478 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d908      	bls.n	8003018 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e140      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	42420000 	.word	0x42420000
 8003014:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	4b9e      	ldr	r3, [pc, #632]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e9      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80a6 	beq.w	800317e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003036:	4b97      	ldr	r3, [pc, #604]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	4b94      	ldr	r3, [pc, #592]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4a93      	ldr	r2, [pc, #588]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304c:	61d3      	str	r3, [r2, #28]
 800304e:	4b91      	ldr	r3, [pc, #580]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b8e      	ldr	r3, [pc, #568]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b8b      	ldr	r3, [pc, #556]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a8a      	ldr	r2, [pc, #552]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7ff f9ff 	bl	8002478 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307e:	f7ff f9fb 	bl	8002478 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	; 0x64
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0fd      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_RCC_OscConfig+0x4f8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_OscConfig+0x312>
 80030a4:	4b7b      	ldr	r3, [pc, #492]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4a7a      	ldr	r2, [pc, #488]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	e02d      	b.n	800310e <HAL_RCC_OscConfig+0x36e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x334>
 80030ba:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4a75      	ldr	r2, [pc, #468]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6213      	str	r3, [r2, #32]
 80030c6:	4b73      	ldr	r3, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4a72      	ldr	r2, [pc, #456]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	6213      	str	r3, [r2, #32]
 80030d2:	e01c      	b.n	800310e <HAL_RCC_OscConfig+0x36e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x356>
 80030dc:	4b6d      	ldr	r3, [pc, #436]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4a6c      	ldr	r2, [pc, #432]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	6213      	str	r3, [r2, #32]
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4a69      	ldr	r2, [pc, #420]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	e00b      	b.n	800310e <HAL_RCC_OscConfig+0x36e>
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a66      	ldr	r2, [pc, #408]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a63      	ldr	r2, [pc, #396]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d015      	beq.n	8003142 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7ff f9af 	bl	8002478 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7ff f9ab 	bl	8002478 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0ab      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ee      	beq.n	800311e <HAL_RCC_OscConfig+0x37e>
 8003140:	e014      	b.n	800316c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7ff f999 	bl	8002478 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7ff f995 	bl	8002478 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	; 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e095      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ee      	bne.n	800314a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d105      	bne.n	800317e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003172:	4b48      	ldr	r3, [pc, #288]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4a47      	ldr	r2, [pc, #284]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8081 	beq.w	800328a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003188:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d061      	beq.n	8003258 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d146      	bne.n	800322a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCC_OscConfig+0x4fc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7ff f969 	bl	8002478 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031aa:	f7ff f965 	bl	8002478 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e067      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	492d      	ldr	r1, [pc, #180]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e4:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a19      	ldr	r1, [r3, #32]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	430b      	orrs	r3, r1
 80031f6:	4927      	ldr	r1, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <HAL_RCC_OscConfig+0x4fc>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7ff f939 	bl	8002478 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7ff f935 	bl	8002478 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e037      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x46a>
 8003228:	e02f      	b.n	800328a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b1c      	ldr	r3, [pc, #112]	; (800329c <HAL_RCC_OscConfig+0x4fc>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7ff f922 	bl	8002478 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003238:	f7ff f91e 	bl	8002478 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e020      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x498>
 8003256:	e018      	b.n	800328a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e013      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_OscConfig+0x4f4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	429a      	cmp	r2, r3
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	42420060 	.word	0x42420060

080032a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0d0      	b.n	8003456 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d910      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 0207 	bic.w	r2, r3, #7
 80032ca:	4965      	ldr	r1, [pc, #404]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b63      	ldr	r3, [pc, #396]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0b8      	b.n	8003456 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4a58      	ldr	r2, [pc, #352]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003306:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a52      	ldr	r2, [pc, #328]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800331e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	494d      	ldr	r1, [pc, #308]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d040      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d115      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e07f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b41      	ldr	r3, [pc, #260]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e073      	b.n	8003456 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	4b3d      	ldr	r3, [pc, #244]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e06b      	b.n	8003456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337e:	4b39      	ldr	r3, [pc, #228]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f023 0203 	bic.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4936      	ldr	r1, [pc, #216]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003390:	f7ff f872 	bl	8002478 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	e00a      	b.n	80033ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003398:	f7ff f86e 	bl	8002478 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e053      	b.n	8003456 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 020c 	and.w	r2, r3, #12
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	429a      	cmp	r2, r3
 80033be:	d1eb      	bne.n	8003398 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c0:	4b27      	ldr	r3, [pc, #156]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d210      	bcs.n	80033f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0207 	bic.w	r2, r3, #7
 80033d6:	4922      	ldr	r1, [pc, #136]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e032      	b.n	8003456 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4916      	ldr	r1, [pc, #88]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	490e      	ldr	r1, [pc, #56]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800342e:	f000 f821 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003432:	4601      	mov	r1, r0
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	5cd3      	ldrb	r3, [r2, r3]
 8003442:	fa21 f303 	lsr.w	r3, r1, r3
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <HAL_RCC_ClockConfig+0x1cc>)
 8003448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1d0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe ffd0 	bl	80023f4 <HAL_InitTick>

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40022000 	.word	0x40022000
 8003464:	40021000 	.word	0x40021000
 8003468:	08007514 	.word	0x08007514
 800346c:	20000000 	.word	0x20000000
 8003470:	20000004 	.word	0x20000004

08003474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	b490      	push	{r4, r7}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800347a:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb0>)
 800347c:	1d3c      	adds	r4, r7, #4
 800347e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003484:	4b28      	ldr	r3, [pc, #160]	; (8003528 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800349e:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x40>
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x46>
 80034b2:	e02d      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b6:	623b      	str	r3, [r7, #32]
      break;
 80034b8:	e02d      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	0c9b      	lsrs	r3, r3, #18
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034c6:	4413      	add	r3, r2
 80034c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	0c5b      	lsrs	r3, r3, #17
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034e6:	4413      	add	r3, r2
 80034e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4a0f      	ldr	r2, [pc, #60]	; (8003530 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034f2:	fb02 f203 	mul.w	r2, r2, r3
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
 80034fe:	e004      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	4a0c      	ldr	r2, [pc, #48]	; (8003534 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	623b      	str	r3, [r7, #32]
      break;
 800350e:	e002      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003512:	623b      	str	r3, [r7, #32]
      break;
 8003514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003516:	6a3b      	ldr	r3, [r7, #32]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bc90      	pop	{r4, r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	08007500 	.word	0x08007500
 8003528:	08007510 	.word	0x08007510
 800352c:	40021000 	.word	0x40021000
 8003530:	007a1200 	.word	0x007a1200
 8003534:	003d0900 	.word	0x003d0900

08003538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800353c:	4b02      	ldr	r3, [pc, #8]	; (8003548 <HAL_RCC_GetHCLKFreq+0x10>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	20000000 	.word	0x20000000

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003550:	f7ff fff2 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003554:	4601      	mov	r1, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4a03      	ldr	r2, [pc, #12]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	08007524 	.word	0x08007524

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003578:	f7ff ffde 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 800357c:	4601      	mov	r1, r0
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	0adb      	lsrs	r3, r3, #11
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4a03      	ldr	r2, [pc, #12]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800358a:	5cd3      	ldrb	r3, [r2, r3]
 800358c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40021000 	.word	0x40021000
 8003598:	08007524 	.word	0x08007524

0800359c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <RCC_Delay+0x34>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <RCC_Delay+0x38>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0a5b      	lsrs	r3, r3, #9
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035b8:	bf00      	nop
  }
  while (Delay --);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f9      	bne.n	80035b8 <RCC_Delay+0x1c>
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000000 	.word	0x20000000
 80035d4:	10624dd3 	.word	0x10624dd3

080035d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d07d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f8:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10d      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003604:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4a4b      	ldr	r2, [pc, #300]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360e:	61d3      	str	r3, [r2, #28]
 8003610:	4b49      	ldr	r3, [pc, #292]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b46      	ldr	r3, [pc, #280]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d118      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362c:	4b43      	ldr	r3, [pc, #268]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a42      	ldr	r2, [pc, #264]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003638:	f7fe ff1e 	bl	8002478 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	e008      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fe ff1a 	bl	8002478 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e06d      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d02e      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	429a      	cmp	r2, r3
 800367a:	d027      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800368c:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003692:	4a29      	ldr	r2, [pc, #164]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d014      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fee9 	bl	8002478 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a8:	e00a      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fe fee5 	bl	8002478 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e036      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ee      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036cc:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4917      	ldr	r1, [pc, #92]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d105      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	4a13      	ldr	r2, [pc, #76]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	490b      	ldr	r1, [pc, #44]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4904      	ldr	r1, [pc, #16]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
 8003740:	42420440 	.word	0x42420440

08003744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fca6 	bl	80020bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fd12 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e03a      	b.n	8003872 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <HAL_TIM_Base_Start_IT+0x98>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d009      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a14      	ldr	r2, [pc, #80]	; (8003880 <HAL_TIM_Base_Start_IT+0x9c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <HAL_TIM_Base_Start_IT+0xa0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d111      	bne.n	8003860 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b06      	cmp	r3, #6
 800384c:	d010      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	e007      	b.n	8003870 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800

08003888 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e041      	b.n	800391e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f839 	bl	8003926 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f000 fc70 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e041      	b.n	80039ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f839 	bl	80039d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 fc18 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_TIM_PWM_Start_IT+0x24>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e022      	b.n	8003a52 <HAL_TIM_PWM_Start_IT+0x6a>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d109      	bne.n	8003a26 <HAL_TIM_PWM_Start_IT+0x3e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e015      	b.n	8003a52 <HAL_TIM_PWM_Start_IT+0x6a>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d109      	bne.n	8003a40 <HAL_TIM_PWM_Start_IT+0x58>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e008      	b.n	8003a52 <HAL_TIM_PWM_Start_IT+0x6a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0a4      	b.n	8003ba4 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_PWM_Start_IT+0x82>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a68:	e013      	b.n	8003a92 <HAL_TIM_PWM_Start_IT+0xaa>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_PWM_Start_IT+0x92>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a78:	e00b      	b.n	8003a92 <HAL_TIM_PWM_Start_IT+0xaa>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_PWM_Start_IT+0xa2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	e003      	b.n	8003a92 <HAL_TIM_PWM_Start_IT+0xaa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d841      	bhi.n	8003b1c <HAL_TIM_PWM_Start_IT+0x134>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_TIM_PWM_Start_IT+0xb8>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003b1d 	.word	0x08003b1d
 8003aa8:	08003b1d 	.word	0x08003b1d
 8003aac:	08003b1d 	.word	0x08003b1d
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003b1d 	.word	0x08003b1d
 8003ab8:	08003b1d 	.word	0x08003b1d
 8003abc:	08003b1d 	.word	0x08003b1d
 8003ac0:	08003af9 	.word	0x08003af9
 8003ac4:	08003b1d 	.word	0x08003b1d
 8003ac8:	08003b1d 	.word	0x08003b1d
 8003acc:	08003b1d 	.word	0x08003b1d
 8003ad0:	08003b0b 	.word	0x08003b0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0202 	orr.w	r2, r2, #2
 8003ae2:	60da      	str	r2, [r3, #12]
      break;
 8003ae4:	e01b      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0204 	orr.w	r2, r2, #4
 8003af4:	60da      	str	r2, [r3, #12]
      break;
 8003af6:	e012      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	60da      	str	r2, [r3, #12]
      break;
 8003b08:	e009      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0210 	orr.w	r2, r2, #16
 8003b18:	60da      	str	r2, [r3, #12]
      break;
 8003b1a:	e000      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003b1c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fdc0 	bl	80046ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d107      	bne.n	8003b46 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_PWM_Start_IT+0x1c4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_TIM_PWM_Start_IT+0x186>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d009      	beq.n	8003b6e <HAL_TIM_PWM_Start_IT+0x186>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIM_PWM_Start_IT+0x186>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d111      	bne.n	8003b92 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d010      	beq.n	8003ba2 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	e007      	b.n	8003ba2 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800

08003bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 faba 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe f9dc 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fabc 	bl	8004186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0204 	mvn.w	r2, #4
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa90 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe f9b2 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa92 	bl	8004186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0208 	mvn.w	r2, #8
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2204      	movs	r2, #4
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fa66 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fe f988 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fa68 	bl	8004186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0210 	mvn.w	r2, #16
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fa3c 	bl	8004174 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fe f95e 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa3e 	bl	8004186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10e      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0201 	mvn.w	r2, #1
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa13 	bl	8004162 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b80      	cmp	r3, #128	; 0x80
 8003d48:	d10e      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d107      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fd7e 	bl	8004864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa02 	bl	8004198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0220 	mvn.w	r2, #32
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fd49 	bl	8004852 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e046      	b.n	8003e70 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	d839      	bhi.n	8003e64 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003e65 	.word	0x08003e65
 8003e00:	08003e65 	.word	0x08003e65
 8003e04:	08003e65 	.word	0x08003e65
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e65 	.word	0x08003e65
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003e65 	.word	0x08003e65
 8003e18:	08003e49 	.word	0x08003e49
 8003e1c:	08003e65 	.word	0x08003e65
 8003e20:	08003e65 	.word	0x08003e65
 8003e24:	08003e65 	.word	0x08003e65
 8003e28:	08003e57 	.word	0x08003e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fa1c 	bl	8004270 <TIM_OC1_SetConfig>
      break;
 8003e38:	e015      	b.n	8003e66 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fa7b 	bl	800433c <TIM_OC2_SetConfig>
      break;
 8003e46:	e00e      	b.n	8003e66 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fade 	bl	8004410 <TIM_OC3_SetConfig>
      break;
 8003e54:	e007      	b.n	8003e66 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fb41 	bl	80044e4 <TIM_OC4_SetConfig>
      break;
 8003e62:	e000      	b.n	8003e66 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0ac      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	f200 809f 	bhi.w	8003fe0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003fe1 	.word	0x08003fe1
 8003eb0:	08003fe1 	.word	0x08003fe1
 8003eb4:	08003fe1 	.word	0x08003fe1
 8003eb8:	08003f1d 	.word	0x08003f1d
 8003ebc:	08003fe1 	.word	0x08003fe1
 8003ec0:	08003fe1 	.word	0x08003fe1
 8003ec4:	08003fe1 	.word	0x08003fe1
 8003ec8:	08003f5f 	.word	0x08003f5f
 8003ecc:	08003fe1 	.word	0x08003fe1
 8003ed0:	08003fe1 	.word	0x08003fe1
 8003ed4:	08003fe1 	.word	0x08003fe1
 8003ed8:	08003f9f 	.word	0x08003f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f9c4 	bl	8004270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0208 	orr.w	r2, r2, #8
 8003ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0204 	bic.w	r2, r2, #4
 8003f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6999      	ldr	r1, [r3, #24]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	619a      	str	r2, [r3, #24]
      break;
 8003f1a:	e062      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fa0a 	bl	800433c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6999      	ldr	r1, [r3, #24]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	619a      	str	r2, [r3, #24]
      break;
 8003f5c:	e041      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fa53 	bl	8004410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0208 	orr.w	r2, r2, #8
 8003f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0204 	bic.w	r2, r2, #4
 8003f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69d9      	ldr	r1, [r3, #28]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	61da      	str	r2, [r3, #28]
      break;
 8003f9c:	e021      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fa9d 	bl	80044e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69d9      	ldr	r1, [r3, #28]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	021a      	lsls	r2, r3, #8
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	61da      	str	r2, [r3, #28]
      break;
 8003fde:	e000      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x18>
 8004008:	2302      	movs	r3, #2
 800400a:	e0a6      	b.n	800415a <HAL_TIM_ConfigClockSource+0x166>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800402a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004032:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d067      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0x120>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d80b      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x6c>
 8004048:	2b10      	cmp	r3, #16
 800404a:	d073      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x140>
 800404c:	2b10      	cmp	r3, #16
 800404e:	d802      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x62>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d06f      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004054:	e078      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004056:	2b20      	cmp	r3, #32
 8004058:	d06c      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x140>
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d06a      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800405e:	e073      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004060:	2b70      	cmp	r3, #112	; 0x70
 8004062:	d00d      	beq.n	8004080 <HAL_TIM_ConfigClockSource+0x8c>
 8004064:	2b70      	cmp	r3, #112	; 0x70
 8004066:	d804      	bhi.n	8004072 <HAL_TIM_ConfigClockSource+0x7e>
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d033      	beq.n	80040d4 <HAL_TIM_ConfigClockSource+0xe0>
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d041      	beq.n	80040f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004070:	e06a      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004076:	d066      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x152>
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407c:	d017      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800407e:	e063      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6899      	ldr	r1, [r3, #8]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f000 faed 	bl	800466e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]
      break;
 80040ac:	e04c      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6899      	ldr	r1, [r3, #8]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f000 fad6 	bl	800466e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d0:	609a      	str	r2, [r3, #8]
      break;
 80040d2:	e039      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	461a      	mov	r2, r3
 80040e2:	f000 fa4d 	bl	8004580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2150      	movs	r1, #80	; 0x50
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 faa4 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 80040f2:	e029      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	461a      	mov	r2, r3
 8004102:	f000 fa6b 	bl	80045dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2160      	movs	r1, #96	; 0x60
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fa94 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 8004112:	e019      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	461a      	mov	r2, r3
 8004122:	f000 fa2d 	bl	8004580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa84 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 8004132:	e009      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f000 fa7b 	bl	800463a <TIM_ITRx_SetConfig>
        break;
 8004144:	e000      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
	...

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a29      	ldr	r2, [pc, #164]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d007      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a26      	ldr	r2, [pc, #152]	; (8004268 <TIM_Base_SetConfig+0xbc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a25      	ldr	r2, [pc, #148]	; (800426c <TIM_Base_SetConfig+0xc0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00b      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d007      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <TIM_Base_SetConfig+0xbc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <TIM_Base_SetConfig+0xc0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d108      	bne.n	8004220 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	615a      	str	r2, [r3, #20]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800

08004270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 0302 	bic.w	r3, r3, #2
 80042b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <TIM_OC1_SetConfig+0xc8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d10c      	bne.n	80042e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0308 	bic.w	r3, r3, #8
 80042d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 0304 	bic.w	r3, r3, #4
 80042e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a13      	ldr	r2, [pc, #76]	; (8004338 <TIM_OC1_SetConfig+0xc8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d111      	bne.n	8004312 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	621a      	str	r2, [r3, #32]
}
 800432c:	bf00      	nop
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40012c00 	.word	0x40012c00

0800433c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f023 0210 	bic.w	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0320 	bic.w	r3, r3, #32
 8004386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a1d      	ldr	r2, [pc, #116]	; (800440c <TIM_OC2_SetConfig+0xd0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d10d      	bne.n	80043b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a14      	ldr	r2, [pc, #80]	; (800440c <TIM_OC2_SetConfig+0xd0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d113      	bne.n	80043e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00

08004410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0303 	bic.w	r3, r3, #3
 8004446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1d      	ldr	r2, [pc, #116]	; (80044e0 <TIM_OC3_SetConfig+0xd0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10d      	bne.n	800448a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <TIM_OC3_SetConfig+0xd0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d113      	bne.n	80044ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00

080044e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800452e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	031b      	lsls	r3, r3, #12
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0f      	ldr	r2, [pc, #60]	; (800457c <TIM_OC4_SetConfig+0x98>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d109      	bne.n	8004558 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800454a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	40012c00 	.word	0x40012c00

08004580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f023 030a 	bic.w	r3, r3, #10
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f023 0210 	bic.w	r2, r3, #16
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004606:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	031b      	lsls	r3, r3, #12
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004618:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	f043 0307 	orr.w	r3, r3, #7
 800465c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800466e:	b480      	push	{r7}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004688:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	021a      	lsls	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	431a      	orrs	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4313      	orrs	r3, r2
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	609a      	str	r2, [r3, #8]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2201      	movs	r2, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	401a      	ands	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1a      	ldr	r2, [r3, #32]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e046      	b.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d009      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a10      	ldr	r2, [pc, #64]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10c      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4313      	orrs	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800

080047b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e03d      	b.n	8004848 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr

08004852 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e03f      	b.n	8004908 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fd fc81 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2224      	movs	r2, #36	; 0x24
 80048a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f828 	bl	8004910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800494a:	f023 030c 	bic.w	r3, r3, #12
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	430b      	orrs	r3, r1
 8004956:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2c      	ldr	r2, [pc, #176]	; (8004a24 <UART_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004978:	f7fe fdfc 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	e002      	b.n	8004986 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe fde4 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 8004984:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009a      	lsls	r2, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	4a22      	ldr	r2, [pc, #136]	; (8004a28 <UART_SetConfig+0x118>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	0119      	lsls	r1, r3, #4
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <UART_SetConfig+0x118>)
 80049be:	fba3 0302 	umull	r0, r3, r3, r2
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2064      	movs	r0, #100	; 0x64
 80049c6:	fb00 f303 	mul.w	r3, r0, r3
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	3332      	adds	r3, #50	; 0x32
 80049d0:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <UART_SetConfig+0x118>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049dc:	4419      	add	r1, r3
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009a      	lsls	r2, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <UART_SetConfig+0x118>)
 80049f6:	fba3 0302 	umull	r0, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2064      	movs	r0, #100	; 0x64
 80049fe:	fb00 f303 	mul.w	r3, r0, r3
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	3332      	adds	r3, #50	; 0x32
 8004a08:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <UART_SetConfig+0x118>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	f003 020f 	and.w	r2, r3, #15
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	440a      	add	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40013800 	.word	0x40013800
 8004a28:	51eb851f 	.word	0x51eb851f

08004a2c <__errno>:
 8004a2c:	4b01      	ldr	r3, [pc, #4]	; (8004a34 <__errno+0x8>)
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	2000000c 	.word	0x2000000c

08004a38 <__libc_init_array>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	4e0c      	ldr	r6, [pc, #48]	; (8004a70 <__libc_init_array+0x38>)
 8004a3e:	4c0d      	ldr	r4, [pc, #52]	; (8004a74 <__libc_init_array+0x3c>)
 8004a40:	1ba4      	subs	r4, r4, r6
 8004a42:	10a4      	asrs	r4, r4, #2
 8004a44:	42a5      	cmp	r5, r4
 8004a46:	d109      	bne.n	8004a5c <__libc_init_array+0x24>
 8004a48:	f002 fbbc 	bl	80071c4 <_init>
 8004a4c:	2500      	movs	r5, #0
 8004a4e:	4e0a      	ldr	r6, [pc, #40]	; (8004a78 <__libc_init_array+0x40>)
 8004a50:	4c0a      	ldr	r4, [pc, #40]	; (8004a7c <__libc_init_array+0x44>)
 8004a52:	1ba4      	subs	r4, r4, r6
 8004a54:	10a4      	asrs	r4, r4, #2
 8004a56:	42a5      	cmp	r5, r4
 8004a58:	d105      	bne.n	8004a66 <__libc_init_array+0x2e>
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a60:	4798      	blx	r3
 8004a62:	3501      	adds	r5, #1
 8004a64:	e7ee      	b.n	8004a44 <__libc_init_array+0xc>
 8004a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a6a:	4798      	blx	r3
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	e7f2      	b.n	8004a56 <__libc_init_array+0x1e>
 8004a70:	08007b28 	.word	0x08007b28
 8004a74:	08007b28 	.word	0x08007b28
 8004a78:	08007b28 	.word	0x08007b28
 8004a7c:	08007b2c 	.word	0x08007b2c

08004a80 <memcpy>:
 8004a80:	b510      	push	{r4, lr}
 8004a82:	1e43      	subs	r3, r0, #1
 8004a84:	440a      	add	r2, r1
 8004a86:	4291      	cmp	r1, r2
 8004a88:	d100      	bne.n	8004a8c <memcpy+0xc>
 8004a8a:	bd10      	pop	{r4, pc}
 8004a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a94:	e7f7      	b.n	8004a86 <memcpy+0x6>

08004a96 <memset>:
 8004a96:	4603      	mov	r3, r0
 8004a98:	4402      	add	r2, r0
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d100      	bne.n	8004aa0 <memset+0xa>
 8004a9e:	4770      	bx	lr
 8004aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa4:	e7f9      	b.n	8004a9a <memset+0x4>

08004aa6 <__cvt>:
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	461e      	mov	r6, r3
 8004aae:	bfbb      	ittet	lt
 8004ab0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004ab4:	461e      	movlt	r6, r3
 8004ab6:	2300      	movge	r3, #0
 8004ab8:	232d      	movlt	r3, #45	; 0x2d
 8004aba:	b088      	sub	sp, #32
 8004abc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004abe:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004ac2:	f027 0720 	bic.w	r7, r7, #32
 8004ac6:	2f46      	cmp	r7, #70	; 0x46
 8004ac8:	4614      	mov	r4, r2
 8004aca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004acc:	700b      	strb	r3, [r1, #0]
 8004ace:	d004      	beq.n	8004ada <__cvt+0x34>
 8004ad0:	2f45      	cmp	r7, #69	; 0x45
 8004ad2:	d100      	bne.n	8004ad6 <__cvt+0x30>
 8004ad4:	3501      	adds	r5, #1
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e000      	b.n	8004adc <__cvt+0x36>
 8004ada:	2303      	movs	r3, #3
 8004adc:	aa07      	add	r2, sp, #28
 8004ade:	9204      	str	r2, [sp, #16]
 8004ae0:	aa06      	add	r2, sp, #24
 8004ae2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ae6:	e9cd 3500 	strd	r3, r5, [sp]
 8004aea:	4622      	mov	r2, r4
 8004aec:	4633      	mov	r3, r6
 8004aee:	f000 fba7 	bl	8005240 <_dtoa_r>
 8004af2:	2f47      	cmp	r7, #71	; 0x47
 8004af4:	4680      	mov	r8, r0
 8004af6:	d102      	bne.n	8004afe <__cvt+0x58>
 8004af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004afa:	07db      	lsls	r3, r3, #31
 8004afc:	d526      	bpl.n	8004b4c <__cvt+0xa6>
 8004afe:	2f46      	cmp	r7, #70	; 0x46
 8004b00:	eb08 0905 	add.w	r9, r8, r5
 8004b04:	d111      	bne.n	8004b2a <__cvt+0x84>
 8004b06:	f898 3000 	ldrb.w	r3, [r8]
 8004b0a:	2b30      	cmp	r3, #48	; 0x30
 8004b0c:	d10a      	bne.n	8004b24 <__cvt+0x7e>
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2300      	movs	r3, #0
 8004b12:	4620      	mov	r0, r4
 8004b14:	4631      	mov	r1, r6
 8004b16:	f7fb ff47 	bl	80009a8 <__aeabi_dcmpeq>
 8004b1a:	b918      	cbnz	r0, 8004b24 <__cvt+0x7e>
 8004b1c:	f1c5 0501 	rsb	r5, r5, #1
 8004b20:	f8ca 5000 	str.w	r5, [sl]
 8004b24:	f8da 3000 	ldr.w	r3, [sl]
 8004b28:	4499      	add	r9, r3
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4631      	mov	r1, r6
 8004b32:	f7fb ff39 	bl	80009a8 <__aeabi_dcmpeq>
 8004b36:	b938      	cbnz	r0, 8004b48 <__cvt+0xa2>
 8004b38:	2230      	movs	r2, #48	; 0x30
 8004b3a:	9b07      	ldr	r3, [sp, #28]
 8004b3c:	454b      	cmp	r3, r9
 8004b3e:	d205      	bcs.n	8004b4c <__cvt+0xa6>
 8004b40:	1c59      	adds	r1, r3, #1
 8004b42:	9107      	str	r1, [sp, #28]
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e7f8      	b.n	8004b3a <__cvt+0x94>
 8004b48:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	9b07      	ldr	r3, [sp, #28]
 8004b50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b52:	eba3 0308 	sub.w	r3, r3, r8
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	b008      	add	sp, #32
 8004b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004b5e <__exponent>:
 8004b5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b60:	2900      	cmp	r1, #0
 8004b62:	bfb4      	ite	lt
 8004b64:	232d      	movlt	r3, #45	; 0x2d
 8004b66:	232b      	movge	r3, #43	; 0x2b
 8004b68:	4604      	mov	r4, r0
 8004b6a:	bfb8      	it	lt
 8004b6c:	4249      	neglt	r1, r1
 8004b6e:	2909      	cmp	r1, #9
 8004b70:	f804 2b02 	strb.w	r2, [r4], #2
 8004b74:	7043      	strb	r3, [r0, #1]
 8004b76:	dd21      	ble.n	8004bbc <__exponent+0x5e>
 8004b78:	f10d 0307 	add.w	r3, sp, #7
 8004b7c:	461f      	mov	r7, r3
 8004b7e:	260a      	movs	r6, #10
 8004b80:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b84:	fb06 1115 	mls	r1, r6, r5, r1
 8004b88:	2d09      	cmp	r5, #9
 8004b8a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004b8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b92:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004b96:	4629      	mov	r1, r5
 8004b98:	dc09      	bgt.n	8004bae <__exponent+0x50>
 8004b9a:	3130      	adds	r1, #48	; 0x30
 8004b9c:	3b02      	subs	r3, #2
 8004b9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ba2:	42bb      	cmp	r3, r7
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	d304      	bcc.n	8004bb2 <__exponent+0x54>
 8004ba8:	1a10      	subs	r0, r2, r0
 8004baa:	b003      	add	sp, #12
 8004bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bae:	4613      	mov	r3, r2
 8004bb0:	e7e6      	b.n	8004b80 <__exponent+0x22>
 8004bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb6:	f804 2b01 	strb.w	r2, [r4], #1
 8004bba:	e7f2      	b.n	8004ba2 <__exponent+0x44>
 8004bbc:	2330      	movs	r3, #48	; 0x30
 8004bbe:	4419      	add	r1, r3
 8004bc0:	7083      	strb	r3, [r0, #2]
 8004bc2:	1d02      	adds	r2, r0, #4
 8004bc4:	70c1      	strb	r1, [r0, #3]
 8004bc6:	e7ef      	b.n	8004ba8 <__exponent+0x4a>

08004bc8 <_printf_float>:
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	b091      	sub	sp, #68	; 0x44
 8004bce:	460c      	mov	r4, r1
 8004bd0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004bd2:	4693      	mov	fp, r2
 8004bd4:	461e      	mov	r6, r3
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	f001 f8e6 	bl	8005da8 <_localeconv_r>
 8004bdc:	6803      	ldr	r3, [r0, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	9309      	str	r3, [sp, #36]	; 0x24
 8004be2:	f7fb fab5 	bl	8000150 <strlen>
 8004be6:	2300      	movs	r3, #0
 8004be8:	930e      	str	r3, [sp, #56]	; 0x38
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	900a      	str	r0, [sp, #40]	; 0x28
 8004bee:	3307      	adds	r3, #7
 8004bf0:	f023 0307 	bic.w	r3, r3, #7
 8004bf4:	f103 0208 	add.w	r2, r3, #8
 8004bf8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004bfc:	f8d4 a000 	ldr.w	sl, [r4]
 8004c00:	603a      	str	r2, [r7, #0]
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c0a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004c0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c18:	4ba6      	ldr	r3, [pc, #664]	; (8004eb4 <_printf_float+0x2ec>)
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c1e:	f7fb fef5 	bl	8000a0c <__aeabi_dcmpun>
 8004c22:	bb68      	cbnz	r0, 8004c80 <_printf_float+0xb8>
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c28:	4ba2      	ldr	r3, [pc, #648]	; (8004eb4 <_printf_float+0x2ec>)
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c2e:	f7fb fecf 	bl	80009d0 <__aeabi_dcmple>
 8004c32:	bb28      	cbnz	r0, 8004c80 <_printf_float+0xb8>
 8004c34:	2200      	movs	r2, #0
 8004c36:	2300      	movs	r3, #0
 8004c38:	4638      	mov	r0, r7
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb febe 	bl	80009bc <__aeabi_dcmplt>
 8004c40:	b110      	cbz	r0, 8004c48 <_printf_float+0x80>
 8004c42:	232d      	movs	r3, #45	; 0x2d
 8004c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c48:	4f9b      	ldr	r7, [pc, #620]	; (8004eb8 <_printf_float+0x2f0>)
 8004c4a:	4b9c      	ldr	r3, [pc, #624]	; (8004ebc <_printf_float+0x2f4>)
 8004c4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c50:	bf98      	it	ls
 8004c52:	461f      	movls	r7, r3
 8004c54:	2303      	movs	r3, #3
 8004c56:	f04f 0900 	mov.w	r9, #0
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	f02a 0304 	bic.w	r3, sl, #4
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	9600      	str	r6, [sp, #0]
 8004c64:	465b      	mov	r3, fp
 8004c66:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 f9e2 	bl	8005034 <_printf_common>
 8004c70:	3001      	adds	r0, #1
 8004c72:	f040 8090 	bne.w	8004d96 <_printf_float+0x1ce>
 8004c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c7a:	b011      	add	sp, #68	; 0x44
 8004c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c80:	463a      	mov	r2, r7
 8004c82:	464b      	mov	r3, r9
 8004c84:	4638      	mov	r0, r7
 8004c86:	4649      	mov	r1, r9
 8004c88:	f7fb fec0 	bl	8000a0c <__aeabi_dcmpun>
 8004c8c:	b110      	cbz	r0, 8004c94 <_printf_float+0xcc>
 8004c8e:	4f8c      	ldr	r7, [pc, #560]	; (8004ec0 <_printf_float+0x2f8>)
 8004c90:	4b8c      	ldr	r3, [pc, #560]	; (8004ec4 <_printf_float+0x2fc>)
 8004c92:	e7db      	b.n	8004c4c <_printf_float+0x84>
 8004c94:	6863      	ldr	r3, [r4, #4]
 8004c96:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004c9a:	1c59      	adds	r1, r3, #1
 8004c9c:	a80d      	add	r0, sp, #52	; 0x34
 8004c9e:	a90e      	add	r1, sp, #56	; 0x38
 8004ca0:	d140      	bne.n	8004d24 <_printf_float+0x15c>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	f04f 0c00 	mov.w	ip, #0
 8004caa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004cae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004cb2:	6863      	ldr	r3, [r4, #4]
 8004cb4:	6022      	str	r2, [r4, #0]
 8004cb6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	463a      	mov	r2, r7
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	f7ff feee 	bl	8004aa6 <__cvt>
 8004cca:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004cce:	2b47      	cmp	r3, #71	; 0x47
 8004cd0:	4607      	mov	r7, r0
 8004cd2:	d109      	bne.n	8004ce8 <_printf_float+0x120>
 8004cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cd6:	1cd8      	adds	r0, r3, #3
 8004cd8:	db02      	blt.n	8004ce0 <_printf_float+0x118>
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	dd47      	ble.n	8004d70 <_printf_float+0x1a8>
 8004ce0:	f1a8 0802 	sub.w	r8, r8, #2
 8004ce4:	fa5f f888 	uxtb.w	r8, r8
 8004ce8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004cec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cee:	d824      	bhi.n	8004d3a <_printf_float+0x172>
 8004cf0:	3901      	subs	r1, #1
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cf8:	910d      	str	r1, [sp, #52]	; 0x34
 8004cfa:	f7ff ff30 	bl	8004b5e <__exponent>
 8004cfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d00:	4681      	mov	r9, r0
 8004d02:	1813      	adds	r3, r2, r0
 8004d04:	2a01      	cmp	r2, #1
 8004d06:	6123      	str	r3, [r4, #16]
 8004d08:	dc02      	bgt.n	8004d10 <_printf_float+0x148>
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	07d1      	lsls	r1, r2, #31
 8004d0e:	d501      	bpl.n	8004d14 <_printf_float+0x14c>
 8004d10:	3301      	adds	r3, #1
 8004d12:	6123      	str	r3, [r4, #16]
 8004d14:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0a2      	beq.n	8004c62 <_printf_float+0x9a>
 8004d1c:	232d      	movs	r3, #45	; 0x2d
 8004d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d22:	e79e      	b.n	8004c62 <_printf_float+0x9a>
 8004d24:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004d28:	f000 816e 	beq.w	8005008 <_printf_float+0x440>
 8004d2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d30:	d1b9      	bne.n	8004ca6 <_printf_float+0xde>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1b7      	bne.n	8004ca6 <_printf_float+0xde>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e7b4      	b.n	8004ca4 <_printf_float+0xdc>
 8004d3a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004d3e:	d119      	bne.n	8004d74 <_printf_float+0x1ac>
 8004d40:	2900      	cmp	r1, #0
 8004d42:	6863      	ldr	r3, [r4, #4]
 8004d44:	dd0c      	ble.n	8004d60 <_printf_float+0x198>
 8004d46:	6121      	str	r1, [r4, #16]
 8004d48:	b913      	cbnz	r3, 8004d50 <_printf_float+0x188>
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	07d2      	lsls	r2, r2, #31
 8004d4e:	d502      	bpl.n	8004d56 <_printf_float+0x18e>
 8004d50:	3301      	adds	r3, #1
 8004d52:	440b      	add	r3, r1
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d58:	f04f 0900 	mov.w	r9, #0
 8004d5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d5e:	e7d9      	b.n	8004d14 <_printf_float+0x14c>
 8004d60:	b913      	cbnz	r3, 8004d68 <_printf_float+0x1a0>
 8004d62:	6822      	ldr	r2, [r4, #0]
 8004d64:	07d0      	lsls	r0, r2, #31
 8004d66:	d501      	bpl.n	8004d6c <_printf_float+0x1a4>
 8004d68:	3302      	adds	r3, #2
 8004d6a:	e7f3      	b.n	8004d54 <_printf_float+0x18c>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e7f1      	b.n	8004d54 <_printf_float+0x18c>
 8004d70:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004d74:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	db05      	blt.n	8004d88 <_printf_float+0x1c0>
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	07d1      	lsls	r1, r2, #31
 8004d82:	d5e8      	bpl.n	8004d56 <_printf_float+0x18e>
 8004d84:	3301      	adds	r3, #1
 8004d86:	e7e5      	b.n	8004d54 <_printf_float+0x18c>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bfcc      	ite	gt
 8004d8c:	2301      	movgt	r3, #1
 8004d8e:	f1c3 0302 	rsble	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	e7de      	b.n	8004d54 <_printf_float+0x18c>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	055a      	lsls	r2, r3, #21
 8004d9a:	d407      	bmi.n	8004dac <_printf_float+0x1e4>
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	463a      	mov	r2, r7
 8004da0:	4659      	mov	r1, fp
 8004da2:	4628      	mov	r0, r5
 8004da4:	47b0      	blx	r6
 8004da6:	3001      	adds	r0, #1
 8004da8:	d129      	bne.n	8004dfe <_printf_float+0x236>
 8004daa:	e764      	b.n	8004c76 <_printf_float+0xae>
 8004dac:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004db0:	f240 80d7 	bls.w	8004f62 <_printf_float+0x39a>
 8004db4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004db8:	2200      	movs	r2, #0
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f7fb fdf4 	bl	80009a8 <__aeabi_dcmpeq>
 8004dc0:	b388      	cbz	r0, 8004e26 <_printf_float+0x25e>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4a40      	ldr	r2, [pc, #256]	; (8004ec8 <_printf_float+0x300>)
 8004dc6:	4659      	mov	r1, fp
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b0      	blx	r6
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f af52 	beq.w	8004c76 <_printf_float+0xae>
 8004dd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	db02      	blt.n	8004de0 <_printf_float+0x218>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	07d8      	lsls	r0, r3, #31
 8004dde:	d50e      	bpl.n	8004dfe <_printf_float+0x236>
 8004de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de4:	4659      	mov	r1, fp
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b0      	blx	r6
 8004dea:	3001      	adds	r0, #1
 8004dec:	f43f af43 	beq.w	8004c76 <_printf_float+0xae>
 8004df0:	2700      	movs	r7, #0
 8004df2:	f104 081a 	add.w	r8, r4, #26
 8004df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	42bb      	cmp	r3, r7
 8004dfc:	dc09      	bgt.n	8004e12 <_printf_float+0x24a>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	079f      	lsls	r7, r3, #30
 8004e02:	f100 80fd 	bmi.w	8005000 <_printf_float+0x438>
 8004e06:	68e0      	ldr	r0, [r4, #12]
 8004e08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e0a:	4298      	cmp	r0, r3
 8004e0c:	bfb8      	it	lt
 8004e0e:	4618      	movlt	r0, r3
 8004e10:	e733      	b.n	8004c7a <_printf_float+0xb2>
 8004e12:	2301      	movs	r3, #1
 8004e14:	4642      	mov	r2, r8
 8004e16:	4659      	mov	r1, fp
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b0      	blx	r6
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	f43f af2a 	beq.w	8004c76 <_printf_float+0xae>
 8004e22:	3701      	adds	r7, #1
 8004e24:	e7e7      	b.n	8004df6 <_printf_float+0x22e>
 8004e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	dc2b      	bgt.n	8004e84 <_printf_float+0x2bc>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <_printf_float+0x300>)
 8004e30:	4659      	mov	r1, fp
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b0      	blx	r6
 8004e36:	3001      	adds	r0, #1
 8004e38:	f43f af1d 	beq.w	8004c76 <_printf_float+0xae>
 8004e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e3e:	b923      	cbnz	r3, 8004e4a <_printf_float+0x282>
 8004e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e42:	b913      	cbnz	r3, 8004e4a <_printf_float+0x282>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	07d9      	lsls	r1, r3, #31
 8004e48:	d5d9      	bpl.n	8004dfe <_printf_float+0x236>
 8004e4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e4e:	4659      	mov	r1, fp
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b0      	blx	r6
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f af0e 	beq.w	8004c76 <_printf_float+0xae>
 8004e5a:	f04f 0800 	mov.w	r8, #0
 8004e5e:	f104 091a 	add.w	r9, r4, #26
 8004e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e64:	425b      	negs	r3, r3
 8004e66:	4543      	cmp	r3, r8
 8004e68:	dc01      	bgt.n	8004e6e <_printf_float+0x2a6>
 8004e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e6c:	e797      	b.n	8004d9e <_printf_float+0x1d6>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	464a      	mov	r2, r9
 8004e72:	4659      	mov	r1, fp
 8004e74:	4628      	mov	r0, r5
 8004e76:	47b0      	blx	r6
 8004e78:	3001      	adds	r0, #1
 8004e7a:	f43f aefc 	beq.w	8004c76 <_printf_float+0xae>
 8004e7e:	f108 0801 	add.w	r8, r8, #1
 8004e82:	e7ee      	b.n	8004e62 <_printf_float+0x29a>
 8004e84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	bfa8      	it	ge
 8004e8c:	461a      	movge	r2, r3
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	4690      	mov	r8, r2
 8004e92:	dd07      	ble.n	8004ea4 <_printf_float+0x2dc>
 8004e94:	4613      	mov	r3, r2
 8004e96:	4659      	mov	r1, fp
 8004e98:	463a      	mov	r2, r7
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	47b0      	blx	r6
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	f43f aee9 	beq.w	8004c76 <_printf_float+0xae>
 8004ea4:	f104 031a 	add.w	r3, r4, #26
 8004ea8:	f04f 0a00 	mov.w	sl, #0
 8004eac:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eb2:	e015      	b.n	8004ee0 <_printf_float+0x318>
 8004eb4:	7fefffff 	.word	0x7fefffff
 8004eb8:	08007530 	.word	0x08007530
 8004ebc:	0800752c 	.word	0x0800752c
 8004ec0:	08007538 	.word	0x08007538
 8004ec4:	08007534 	.word	0x08007534
 8004ec8:	0800753c 	.word	0x0800753c
 8004ecc:	2301      	movs	r3, #1
 8004ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b0      	blx	r6
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f aecd 	beq.w	8004c76 <_printf_float+0xae>
 8004edc:	f10a 0a01 	add.w	sl, sl, #1
 8004ee0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004ee4:	eba9 0308 	sub.w	r3, r9, r8
 8004ee8:	4553      	cmp	r3, sl
 8004eea:	dcef      	bgt.n	8004ecc <_printf_float+0x304>
 8004eec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	444f      	add	r7, r9
 8004ef4:	db14      	blt.n	8004f20 <_printf_float+0x358>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	07da      	lsls	r2, r3, #31
 8004efa:	d411      	bmi.n	8004f20 <_printf_float+0x358>
 8004efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004efe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f00:	eba3 0209 	sub.w	r2, r3, r9
 8004f04:	eba3 0901 	sub.w	r9, r3, r1
 8004f08:	4591      	cmp	r9, r2
 8004f0a:	bfa8      	it	ge
 8004f0c:	4691      	movge	r9, r2
 8004f0e:	f1b9 0f00 	cmp.w	r9, #0
 8004f12:	dc0d      	bgt.n	8004f30 <_printf_float+0x368>
 8004f14:	2700      	movs	r7, #0
 8004f16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f1a:	f104 081a 	add.w	r8, r4, #26
 8004f1e:	e018      	b.n	8004f52 <_printf_float+0x38a>
 8004f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f24:	4659      	mov	r1, fp
 8004f26:	4628      	mov	r0, r5
 8004f28:	47b0      	blx	r6
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d1e6      	bne.n	8004efc <_printf_float+0x334>
 8004f2e:	e6a2      	b.n	8004c76 <_printf_float+0xae>
 8004f30:	464b      	mov	r3, r9
 8004f32:	463a      	mov	r2, r7
 8004f34:	4659      	mov	r1, fp
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b0      	blx	r6
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d1ea      	bne.n	8004f14 <_printf_float+0x34c>
 8004f3e:	e69a      	b.n	8004c76 <_printf_float+0xae>
 8004f40:	2301      	movs	r3, #1
 8004f42:	4642      	mov	r2, r8
 8004f44:	4659      	mov	r1, fp
 8004f46:	4628      	mov	r0, r5
 8004f48:	47b0      	blx	r6
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	f43f ae93 	beq.w	8004c76 <_printf_float+0xae>
 8004f50:	3701      	adds	r7, #1
 8004f52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	eba3 0309 	sub.w	r3, r3, r9
 8004f5c:	42bb      	cmp	r3, r7
 8004f5e:	dcef      	bgt.n	8004f40 <_printf_float+0x378>
 8004f60:	e74d      	b.n	8004dfe <_printf_float+0x236>
 8004f62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f64:	2a01      	cmp	r2, #1
 8004f66:	dc01      	bgt.n	8004f6c <_printf_float+0x3a4>
 8004f68:	07db      	lsls	r3, r3, #31
 8004f6a:	d538      	bpl.n	8004fde <_printf_float+0x416>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	463a      	mov	r2, r7
 8004f70:	4659      	mov	r1, fp
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b0      	blx	r6
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f ae7d 	beq.w	8004c76 <_printf_float+0xae>
 8004f7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f80:	4659      	mov	r1, fp
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b0      	blx	r6
 8004f86:	3001      	adds	r0, #1
 8004f88:	f107 0701 	add.w	r7, r7, #1
 8004f8c:	f43f ae73 	beq.w	8004c76 <_printf_float+0xae>
 8004f90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f96:	2200      	movs	r2, #0
 8004f98:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f7fb fd03 	bl	80009a8 <__aeabi_dcmpeq>
 8004fa2:	b9c0      	cbnz	r0, 8004fd6 <_printf_float+0x40e>
 8004fa4:	4643      	mov	r3, r8
 8004fa6:	463a      	mov	r2, r7
 8004fa8:	4659      	mov	r1, fp
 8004faa:	4628      	mov	r0, r5
 8004fac:	47b0      	blx	r6
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d10d      	bne.n	8004fce <_printf_float+0x406>
 8004fb2:	e660      	b.n	8004c76 <_printf_float+0xae>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	4659      	mov	r1, fp
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b0      	blx	r6
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f ae59 	beq.w	8004c76 <_printf_float+0xae>
 8004fc4:	3701      	adds	r7, #1
 8004fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	42bb      	cmp	r3, r7
 8004fcc:	dcf2      	bgt.n	8004fb4 <_printf_float+0x3ec>
 8004fce:	464b      	mov	r3, r9
 8004fd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fd4:	e6e4      	b.n	8004da0 <_printf_float+0x1d8>
 8004fd6:	2700      	movs	r7, #0
 8004fd8:	f104 081a 	add.w	r8, r4, #26
 8004fdc:	e7f3      	b.n	8004fc6 <_printf_float+0x3fe>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e7e1      	b.n	8004fa6 <_printf_float+0x3de>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	4628      	mov	r0, r5
 8004fea:	47b0      	blx	r6
 8004fec:	3001      	adds	r0, #1
 8004fee:	f43f ae42 	beq.w	8004c76 <_printf_float+0xae>
 8004ff2:	3701      	adds	r7, #1
 8004ff4:	68e3      	ldr	r3, [r4, #12]
 8004ff6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	42bb      	cmp	r3, r7
 8004ffc:	dcf1      	bgt.n	8004fe2 <_printf_float+0x41a>
 8004ffe:	e702      	b.n	8004e06 <_printf_float+0x23e>
 8005000:	2700      	movs	r7, #0
 8005002:	f104 0819 	add.w	r8, r4, #25
 8005006:	e7f5      	b.n	8004ff4 <_printf_float+0x42c>
 8005008:	2b00      	cmp	r3, #0
 800500a:	f43f ae94 	beq.w	8004d36 <_printf_float+0x16e>
 800500e:	f04f 0c00 	mov.w	ip, #0
 8005012:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005016:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800501a:	6022      	str	r2, [r4, #0]
 800501c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005020:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	463a      	mov	r2, r7
 8005028:	464b      	mov	r3, r9
 800502a:	4628      	mov	r0, r5
 800502c:	f7ff fd3b 	bl	8004aa6 <__cvt>
 8005030:	4607      	mov	r7, r0
 8005032:	e64f      	b.n	8004cd4 <_printf_float+0x10c>

08005034 <_printf_common>:
 8005034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005038:	4691      	mov	r9, r2
 800503a:	461f      	mov	r7, r3
 800503c:	688a      	ldr	r2, [r1, #8]
 800503e:	690b      	ldr	r3, [r1, #16]
 8005040:	4606      	mov	r6, r0
 8005042:	4293      	cmp	r3, r2
 8005044:	bfb8      	it	lt
 8005046:	4613      	movlt	r3, r2
 8005048:	f8c9 3000 	str.w	r3, [r9]
 800504c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005050:	460c      	mov	r4, r1
 8005052:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005056:	b112      	cbz	r2, 800505e <_printf_common+0x2a>
 8005058:	3301      	adds	r3, #1
 800505a:	f8c9 3000 	str.w	r3, [r9]
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	0699      	lsls	r1, r3, #26
 8005062:	bf42      	ittt	mi
 8005064:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005068:	3302      	addmi	r3, #2
 800506a:	f8c9 3000 	strmi.w	r3, [r9]
 800506e:	6825      	ldr	r5, [r4, #0]
 8005070:	f015 0506 	ands.w	r5, r5, #6
 8005074:	d107      	bne.n	8005086 <_printf_common+0x52>
 8005076:	f104 0a19 	add.w	sl, r4, #25
 800507a:	68e3      	ldr	r3, [r4, #12]
 800507c:	f8d9 2000 	ldr.w	r2, [r9]
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	42ab      	cmp	r3, r5
 8005084:	dc29      	bgt.n	80050da <_printf_common+0xa6>
 8005086:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	3300      	adds	r3, #0
 800508e:	bf18      	it	ne
 8005090:	2301      	movne	r3, #1
 8005092:	0692      	lsls	r2, r2, #26
 8005094:	d42e      	bmi.n	80050f4 <_printf_common+0xc0>
 8005096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800509a:	4639      	mov	r1, r7
 800509c:	4630      	mov	r0, r6
 800509e:	47c0      	blx	r8
 80050a0:	3001      	adds	r0, #1
 80050a2:	d021      	beq.n	80050e8 <_printf_common+0xb4>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	68e5      	ldr	r5, [r4, #12]
 80050a8:	f003 0306 	and.w	r3, r3, #6
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	bf18      	it	ne
 80050b0:	2500      	movne	r5, #0
 80050b2:	f8d9 2000 	ldr.w	r2, [r9]
 80050b6:	f04f 0900 	mov.w	r9, #0
 80050ba:	bf08      	it	eq
 80050bc:	1aad      	subeq	r5, r5, r2
 80050be:	68a3      	ldr	r3, [r4, #8]
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	bf08      	it	eq
 80050c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c8:	4293      	cmp	r3, r2
 80050ca:	bfc4      	itt	gt
 80050cc:	1a9b      	subgt	r3, r3, r2
 80050ce:	18ed      	addgt	r5, r5, r3
 80050d0:	341a      	adds	r4, #26
 80050d2:	454d      	cmp	r5, r9
 80050d4:	d11a      	bne.n	800510c <_printf_common+0xd8>
 80050d6:	2000      	movs	r0, #0
 80050d8:	e008      	b.n	80050ec <_printf_common+0xb8>
 80050da:	2301      	movs	r3, #1
 80050dc:	4652      	mov	r2, sl
 80050de:	4639      	mov	r1, r7
 80050e0:	4630      	mov	r0, r6
 80050e2:	47c0      	blx	r8
 80050e4:	3001      	adds	r0, #1
 80050e6:	d103      	bne.n	80050f0 <_printf_common+0xbc>
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f0:	3501      	adds	r5, #1
 80050f2:	e7c2      	b.n	800507a <_printf_common+0x46>
 80050f4:	2030      	movs	r0, #48	; 0x30
 80050f6:	18e1      	adds	r1, r4, r3
 80050f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005102:	4422      	add	r2, r4
 8005104:	3302      	adds	r3, #2
 8005106:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800510a:	e7c4      	b.n	8005096 <_printf_common+0x62>
 800510c:	2301      	movs	r3, #1
 800510e:	4622      	mov	r2, r4
 8005110:	4639      	mov	r1, r7
 8005112:	4630      	mov	r0, r6
 8005114:	47c0      	blx	r8
 8005116:	3001      	adds	r0, #1
 8005118:	d0e6      	beq.n	80050e8 <_printf_common+0xb4>
 800511a:	f109 0901 	add.w	r9, r9, #1
 800511e:	e7d8      	b.n	80050d2 <_printf_common+0x9e>

08005120 <quorem>:
 8005120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	6903      	ldr	r3, [r0, #16]
 8005126:	690c      	ldr	r4, [r1, #16]
 8005128:	4680      	mov	r8, r0
 800512a:	42a3      	cmp	r3, r4
 800512c:	f2c0 8084 	blt.w	8005238 <quorem+0x118>
 8005130:	3c01      	subs	r4, #1
 8005132:	f101 0714 	add.w	r7, r1, #20
 8005136:	f100 0614 	add.w	r6, r0, #20
 800513a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800513e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005142:	3501      	adds	r5, #1
 8005144:	fbb0 f5f5 	udiv	r5, r0, r5
 8005148:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800514c:	eb06 030c 	add.w	r3, r6, ip
 8005150:	eb07 090c 	add.w	r9, r7, ip
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	b39d      	cbz	r5, 80051c0 <quorem+0xa0>
 8005158:	f04f 0a00 	mov.w	sl, #0
 800515c:	4638      	mov	r0, r7
 800515e:	46b6      	mov	lr, r6
 8005160:	46d3      	mov	fp, sl
 8005162:	f850 2b04 	ldr.w	r2, [r0], #4
 8005166:	b293      	uxth	r3, r2
 8005168:	fb05 a303 	mla	r3, r5, r3, sl
 800516c:	0c12      	lsrs	r2, r2, #16
 800516e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005172:	fb05 a202 	mla	r2, r5, r2, sl
 8005176:	b29b      	uxth	r3, r3
 8005178:	ebab 0303 	sub.w	r3, fp, r3
 800517c:	f8de b000 	ldr.w	fp, [lr]
 8005180:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005184:	fa1f fb8b 	uxth.w	fp, fp
 8005188:	445b      	add	r3, fp
 800518a:	fa1f fb82 	uxth.w	fp, r2
 800518e:	f8de 2000 	ldr.w	r2, [lr]
 8005192:	4581      	cmp	r9, r0
 8005194:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800519c:	b29b      	uxth	r3, r3
 800519e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051a2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80051a6:	f84e 3b04 	str.w	r3, [lr], #4
 80051aa:	d2da      	bcs.n	8005162 <quorem+0x42>
 80051ac:	f856 300c 	ldr.w	r3, [r6, ip]
 80051b0:	b933      	cbnz	r3, 80051c0 <quorem+0xa0>
 80051b2:	9b01      	ldr	r3, [sp, #4]
 80051b4:	3b04      	subs	r3, #4
 80051b6:	429e      	cmp	r6, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	d331      	bcc.n	8005220 <quorem+0x100>
 80051bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80051c0:	4640      	mov	r0, r8
 80051c2:	f001 f81b 	bl	80061fc <__mcmp>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	db26      	blt.n	8005218 <quorem+0xf8>
 80051ca:	4630      	mov	r0, r6
 80051cc:	f04f 0c00 	mov.w	ip, #0
 80051d0:	3501      	adds	r5, #1
 80051d2:	f857 1b04 	ldr.w	r1, [r7], #4
 80051d6:	f8d0 e000 	ldr.w	lr, [r0]
 80051da:	b28b      	uxth	r3, r1
 80051dc:	ebac 0303 	sub.w	r3, ip, r3
 80051e0:	fa1f f28e 	uxth.w	r2, lr
 80051e4:	4413      	add	r3, r2
 80051e6:	0c0a      	lsrs	r2, r1, #16
 80051e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051f6:	45b9      	cmp	r9, r7
 80051f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051fc:	f840 3b04 	str.w	r3, [r0], #4
 8005200:	d2e7      	bcs.n	80051d2 <quorem+0xb2>
 8005202:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005206:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800520a:	b92a      	cbnz	r2, 8005218 <quorem+0xf8>
 800520c:	3b04      	subs	r3, #4
 800520e:	429e      	cmp	r6, r3
 8005210:	461a      	mov	r2, r3
 8005212:	d30b      	bcc.n	800522c <quorem+0x10c>
 8005214:	f8c8 4010 	str.w	r4, [r8, #16]
 8005218:	4628      	mov	r0, r5
 800521a:	b003      	add	sp, #12
 800521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	3b04      	subs	r3, #4
 8005224:	2a00      	cmp	r2, #0
 8005226:	d1c9      	bne.n	80051bc <quorem+0x9c>
 8005228:	3c01      	subs	r4, #1
 800522a:	e7c4      	b.n	80051b6 <quorem+0x96>
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	3b04      	subs	r3, #4
 8005230:	2a00      	cmp	r2, #0
 8005232:	d1ef      	bne.n	8005214 <quorem+0xf4>
 8005234:	3c01      	subs	r4, #1
 8005236:	e7ea      	b.n	800520e <quorem+0xee>
 8005238:	2000      	movs	r0, #0
 800523a:	e7ee      	b.n	800521a <quorem+0xfa>
 800523c:	0000      	movs	r0, r0
	...

08005240 <_dtoa_r>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	4616      	mov	r6, r2
 8005246:	461f      	mov	r7, r3
 8005248:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800524a:	b095      	sub	sp, #84	; 0x54
 800524c:	4604      	mov	r4, r0
 800524e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005252:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005256:	b93d      	cbnz	r5, 8005268 <_dtoa_r+0x28>
 8005258:	2010      	movs	r0, #16
 800525a:	f000 fdb3 	bl	8005dc4 <malloc>
 800525e:	6260      	str	r0, [r4, #36]	; 0x24
 8005260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005264:	6005      	str	r5, [r0, #0]
 8005266:	60c5      	str	r5, [r0, #12]
 8005268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800526a:	6819      	ldr	r1, [r3, #0]
 800526c:	b151      	cbz	r1, 8005284 <_dtoa_r+0x44>
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	2301      	movs	r3, #1
 8005272:	4093      	lsls	r3, r2
 8005274:	604a      	str	r2, [r1, #4]
 8005276:	608b      	str	r3, [r1, #8]
 8005278:	4620      	mov	r0, r4
 800527a:	f000 fddf 	bl	8005e3c <_Bfree>
 800527e:	2200      	movs	r2, #0
 8005280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	1e3b      	subs	r3, r7, #0
 8005286:	bfaf      	iteee	ge
 8005288:	2300      	movge	r3, #0
 800528a:	2201      	movlt	r2, #1
 800528c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005290:	9303      	strlt	r3, [sp, #12]
 8005292:	bfac      	ite	ge
 8005294:	f8c8 3000 	strge.w	r3, [r8]
 8005298:	f8c8 2000 	strlt.w	r2, [r8]
 800529c:	4bae      	ldr	r3, [pc, #696]	; (8005558 <_dtoa_r+0x318>)
 800529e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80052a2:	ea33 0308 	bics.w	r3, r3, r8
 80052a6:	d11b      	bne.n	80052e0 <_dtoa_r+0xa0>
 80052a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80052ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	9b02      	ldr	r3, [sp, #8]
 80052b2:	b923      	cbnz	r3, 80052be <_dtoa_r+0x7e>
 80052b4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f000 8545 	beq.w	8005d48 <_dtoa_r+0xb08>
 80052be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052c0:	b953      	cbnz	r3, 80052d8 <_dtoa_r+0x98>
 80052c2:	4ba6      	ldr	r3, [pc, #664]	; (800555c <_dtoa_r+0x31c>)
 80052c4:	e021      	b.n	800530a <_dtoa_r+0xca>
 80052c6:	4ba6      	ldr	r3, [pc, #664]	; (8005560 <_dtoa_r+0x320>)
 80052c8:	9306      	str	r3, [sp, #24]
 80052ca:	3308      	adds	r3, #8
 80052cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	9806      	ldr	r0, [sp, #24]
 80052d2:	b015      	add	sp, #84	; 0x54
 80052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d8:	4ba0      	ldr	r3, [pc, #640]	; (800555c <_dtoa_r+0x31c>)
 80052da:	9306      	str	r3, [sp, #24]
 80052dc:	3303      	adds	r3, #3
 80052de:	e7f5      	b.n	80052cc <_dtoa_r+0x8c>
 80052e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2300      	movs	r3, #0
 80052e8:	4630      	mov	r0, r6
 80052ea:	4639      	mov	r1, r7
 80052ec:	f7fb fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 80052f0:	4682      	mov	sl, r0
 80052f2:	b160      	cbz	r0, 800530e <_dtoa_r+0xce>
 80052f4:	2301      	movs	r3, #1
 80052f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8520 	beq.w	8005d42 <_dtoa_r+0xb02>
 8005302:	4b98      	ldr	r3, [pc, #608]	; (8005564 <_dtoa_r+0x324>)
 8005304:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	3b01      	subs	r3, #1
 800530a:	9306      	str	r3, [sp, #24]
 800530c:	e7e0      	b.n	80052d0 <_dtoa_r+0x90>
 800530e:	ab12      	add	r3, sp, #72	; 0x48
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	ab13      	add	r3, sp, #76	; 0x4c
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	4632      	mov	r2, r6
 8005318:	463b      	mov	r3, r7
 800531a:	4620      	mov	r0, r4
 800531c:	f000 ffe6 	bl	80062ec <__d2b>
 8005320:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005324:	4683      	mov	fp, r0
 8005326:	2d00      	cmp	r5, #0
 8005328:	d07d      	beq.n	8005426 <_dtoa_r+0x1e6>
 800532a:	46b0      	mov	r8, r6
 800532c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005330:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005334:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005338:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800533c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005340:	2200      	movs	r2, #0
 8005342:	4b89      	ldr	r3, [pc, #548]	; (8005568 <_dtoa_r+0x328>)
 8005344:	4640      	mov	r0, r8
 8005346:	4649      	mov	r1, r9
 8005348:	f7fa ff0e 	bl	8000168 <__aeabi_dsub>
 800534c:	a37c      	add	r3, pc, #496	; (adr r3, 8005540 <_dtoa_r+0x300>)
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f7fb f8c1 	bl	80004d8 <__aeabi_dmul>
 8005356:	a37c      	add	r3, pc, #496	; (adr r3, 8005548 <_dtoa_r+0x308>)
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f7fa ff06 	bl	800016c <__adddf3>
 8005360:	4606      	mov	r6, r0
 8005362:	4628      	mov	r0, r5
 8005364:	460f      	mov	r7, r1
 8005366:	f7fb f84d 	bl	8000404 <__aeabi_i2d>
 800536a:	a379      	add	r3, pc, #484	; (adr r3, 8005550 <_dtoa_r+0x310>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fb f8b2 	bl	80004d8 <__aeabi_dmul>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4630      	mov	r0, r6
 800537a:	4639      	mov	r1, r7
 800537c:	f7fa fef6 	bl	800016c <__adddf3>
 8005380:	4606      	mov	r6, r0
 8005382:	460f      	mov	r7, r1
 8005384:	f7fb fb58 	bl	8000a38 <__aeabi_d2iz>
 8005388:	2200      	movs	r2, #0
 800538a:	4682      	mov	sl, r0
 800538c:	2300      	movs	r3, #0
 800538e:	4630      	mov	r0, r6
 8005390:	4639      	mov	r1, r7
 8005392:	f7fb fb13 	bl	80009bc <__aeabi_dcmplt>
 8005396:	b148      	cbz	r0, 80053ac <_dtoa_r+0x16c>
 8005398:	4650      	mov	r0, sl
 800539a:	f7fb f833 	bl	8000404 <__aeabi_i2d>
 800539e:	4632      	mov	r2, r6
 80053a0:	463b      	mov	r3, r7
 80053a2:	f7fb fb01 	bl	80009a8 <__aeabi_dcmpeq>
 80053a6:	b908      	cbnz	r0, 80053ac <_dtoa_r+0x16c>
 80053a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80053ac:	f1ba 0f16 	cmp.w	sl, #22
 80053b0:	d85a      	bhi.n	8005468 <_dtoa_r+0x228>
 80053b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b6:	496d      	ldr	r1, [pc, #436]	; (800556c <_dtoa_r+0x32c>)
 80053b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80053bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053c0:	f7fb fb1a 	bl	80009f8 <__aeabi_dcmpgt>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d051      	beq.n	800546c <_dtoa_r+0x22c>
 80053c8:	2300      	movs	r3, #0
 80053ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80053ce:	930d      	str	r3, [sp, #52]	; 0x34
 80053d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053d2:	1b5d      	subs	r5, r3, r5
 80053d4:	1e6b      	subs	r3, r5, #1
 80053d6:	9307      	str	r3, [sp, #28]
 80053d8:	bf43      	ittte	mi
 80053da:	2300      	movmi	r3, #0
 80053dc:	f1c5 0901 	rsbmi	r9, r5, #1
 80053e0:	9307      	strmi	r3, [sp, #28]
 80053e2:	f04f 0900 	movpl.w	r9, #0
 80053e6:	f1ba 0f00 	cmp.w	sl, #0
 80053ea:	db41      	blt.n	8005470 <_dtoa_r+0x230>
 80053ec:	9b07      	ldr	r3, [sp, #28]
 80053ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80053f2:	4453      	add	r3, sl
 80053f4:	9307      	str	r3, [sp, #28]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9308      	str	r3, [sp, #32]
 80053fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053fc:	2b09      	cmp	r3, #9
 80053fe:	f200 808f 	bhi.w	8005520 <_dtoa_r+0x2e0>
 8005402:	2b05      	cmp	r3, #5
 8005404:	bfc4      	itt	gt
 8005406:	3b04      	subgt	r3, #4
 8005408:	931e      	strgt	r3, [sp, #120]	; 0x78
 800540a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800540c:	bfc8      	it	gt
 800540e:	2500      	movgt	r5, #0
 8005410:	f1a3 0302 	sub.w	r3, r3, #2
 8005414:	bfd8      	it	le
 8005416:	2501      	movle	r5, #1
 8005418:	2b03      	cmp	r3, #3
 800541a:	f200 808d 	bhi.w	8005538 <_dtoa_r+0x2f8>
 800541e:	e8df f003 	tbb	[pc, r3]
 8005422:	7d7b      	.short	0x7d7b
 8005424:	6f2f      	.short	0x6f2f
 8005426:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800542a:	441d      	add	r5, r3
 800542c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005430:	2820      	cmp	r0, #32
 8005432:	dd13      	ble.n	800545c <_dtoa_r+0x21c>
 8005434:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005438:	9b02      	ldr	r3, [sp, #8]
 800543a:	fa08 f800 	lsl.w	r8, r8, r0
 800543e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005442:	fa23 f000 	lsr.w	r0, r3, r0
 8005446:	ea48 0000 	orr.w	r0, r8, r0
 800544a:	f7fa ffcb 	bl	80003e4 <__aeabi_ui2d>
 800544e:	2301      	movs	r3, #1
 8005450:	4680      	mov	r8, r0
 8005452:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005456:	3d01      	subs	r5, #1
 8005458:	9310      	str	r3, [sp, #64]	; 0x40
 800545a:	e771      	b.n	8005340 <_dtoa_r+0x100>
 800545c:	9b02      	ldr	r3, [sp, #8]
 800545e:	f1c0 0020 	rsb	r0, r0, #32
 8005462:	fa03 f000 	lsl.w	r0, r3, r0
 8005466:	e7f0      	b.n	800544a <_dtoa_r+0x20a>
 8005468:	2301      	movs	r3, #1
 800546a:	e7b0      	b.n	80053ce <_dtoa_r+0x18e>
 800546c:	900d      	str	r0, [sp, #52]	; 0x34
 800546e:	e7af      	b.n	80053d0 <_dtoa_r+0x190>
 8005470:	f1ca 0300 	rsb	r3, sl, #0
 8005474:	9308      	str	r3, [sp, #32]
 8005476:	2300      	movs	r3, #0
 8005478:	eba9 090a 	sub.w	r9, r9, sl
 800547c:	930c      	str	r3, [sp, #48]	; 0x30
 800547e:	e7bc      	b.n	80053fa <_dtoa_r+0x1ba>
 8005480:	2301      	movs	r3, #1
 8005482:	9309      	str	r3, [sp, #36]	; 0x24
 8005484:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005486:	2b00      	cmp	r3, #0
 8005488:	dd74      	ble.n	8005574 <_dtoa_r+0x334>
 800548a:	4698      	mov	r8, r3
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	2200      	movs	r2, #0
 8005490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005492:	6072      	str	r2, [r6, #4]
 8005494:	2204      	movs	r2, #4
 8005496:	f102 0014 	add.w	r0, r2, #20
 800549a:	4298      	cmp	r0, r3
 800549c:	6871      	ldr	r1, [r6, #4]
 800549e:	d96e      	bls.n	800557e <_dtoa_r+0x33e>
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 fc97 	bl	8005dd4 <_Balloc>
 80054a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a8:	6030      	str	r0, [r6, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b8 0f0e 	cmp.w	r8, #14
 80054b0:	9306      	str	r3, [sp, #24]
 80054b2:	f200 80ed 	bhi.w	8005690 <_dtoa_r+0x450>
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	f000 80ea 	beq.w	8005690 <_dtoa_r+0x450>
 80054bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054c0:	f1ba 0f00 	cmp.w	sl, #0
 80054c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80054c8:	dd77      	ble.n	80055ba <_dtoa_r+0x37a>
 80054ca:	4a28      	ldr	r2, [pc, #160]	; (800556c <_dtoa_r+0x32c>)
 80054cc:	f00a 030f 	and.w	r3, sl, #15
 80054d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80054d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054d8:	06f0      	lsls	r0, r6, #27
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80054e2:	d568      	bpl.n	80055b6 <_dtoa_r+0x376>
 80054e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80054e8:	4b21      	ldr	r3, [pc, #132]	; (8005570 <_dtoa_r+0x330>)
 80054ea:	2503      	movs	r5, #3
 80054ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054f0:	f7fb f91c 	bl	800072c <__aeabi_ddiv>
 80054f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f8:	f006 060f 	and.w	r6, r6, #15
 80054fc:	4f1c      	ldr	r7, [pc, #112]	; (8005570 <_dtoa_r+0x330>)
 80054fe:	e04f      	b.n	80055a0 <_dtoa_r+0x360>
 8005500:	2301      	movs	r3, #1
 8005502:	9309      	str	r3, [sp, #36]	; 0x24
 8005504:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005506:	4453      	add	r3, sl
 8005508:	f103 0801 	add.w	r8, r3, #1
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	4643      	mov	r3, r8
 8005510:	2b01      	cmp	r3, #1
 8005512:	bfb8      	it	lt
 8005514:	2301      	movlt	r3, #1
 8005516:	e7ba      	b.n	800548e <_dtoa_r+0x24e>
 8005518:	2300      	movs	r3, #0
 800551a:	e7b2      	b.n	8005482 <_dtoa_r+0x242>
 800551c:	2300      	movs	r3, #0
 800551e:	e7f0      	b.n	8005502 <_dtoa_r+0x2c2>
 8005520:	2501      	movs	r5, #1
 8005522:	2300      	movs	r3, #0
 8005524:	9509      	str	r5, [sp, #36]	; 0x24
 8005526:	931e      	str	r3, [sp, #120]	; 0x78
 8005528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800552c:	2200      	movs	r2, #0
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	4698      	mov	r8, r3
 8005532:	2312      	movs	r3, #18
 8005534:	921f      	str	r2, [sp, #124]	; 0x7c
 8005536:	e7aa      	b.n	800548e <_dtoa_r+0x24e>
 8005538:	2301      	movs	r3, #1
 800553a:	9309      	str	r3, [sp, #36]	; 0x24
 800553c:	e7f4      	b.n	8005528 <_dtoa_r+0x2e8>
 800553e:	bf00      	nop
 8005540:	636f4361 	.word	0x636f4361
 8005544:	3fd287a7 	.word	0x3fd287a7
 8005548:	8b60c8b3 	.word	0x8b60c8b3
 800554c:	3fc68a28 	.word	0x3fc68a28
 8005550:	509f79fb 	.word	0x509f79fb
 8005554:	3fd34413 	.word	0x3fd34413
 8005558:	7ff00000 	.word	0x7ff00000
 800555c:	08007547 	.word	0x08007547
 8005560:	0800753e 	.word	0x0800753e
 8005564:	0800753d 	.word	0x0800753d
 8005568:	3ff80000 	.word	0x3ff80000
 800556c:	08007578 	.word	0x08007578
 8005570:	08007550 	.word	0x08007550
 8005574:	2301      	movs	r3, #1
 8005576:	9304      	str	r3, [sp, #16]
 8005578:	4698      	mov	r8, r3
 800557a:	461a      	mov	r2, r3
 800557c:	e7da      	b.n	8005534 <_dtoa_r+0x2f4>
 800557e:	3101      	adds	r1, #1
 8005580:	6071      	str	r1, [r6, #4]
 8005582:	0052      	lsls	r2, r2, #1
 8005584:	e787      	b.n	8005496 <_dtoa_r+0x256>
 8005586:	07f1      	lsls	r1, r6, #31
 8005588:	d508      	bpl.n	800559c <_dtoa_r+0x35c>
 800558a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800558e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005592:	f7fa ffa1 	bl	80004d8 <__aeabi_dmul>
 8005596:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800559a:	3501      	adds	r5, #1
 800559c:	1076      	asrs	r6, r6, #1
 800559e:	3708      	adds	r7, #8
 80055a0:	2e00      	cmp	r6, #0
 80055a2:	d1f0      	bne.n	8005586 <_dtoa_r+0x346>
 80055a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ac:	f7fb f8be 	bl	800072c <__aeabi_ddiv>
 80055b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055b4:	e01b      	b.n	80055ee <_dtoa_r+0x3ae>
 80055b6:	2502      	movs	r5, #2
 80055b8:	e7a0      	b.n	80054fc <_dtoa_r+0x2bc>
 80055ba:	f000 80a4 	beq.w	8005706 <_dtoa_r+0x4c6>
 80055be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80055c2:	f1ca 0600 	rsb	r6, sl, #0
 80055c6:	4ba0      	ldr	r3, [pc, #640]	; (8005848 <_dtoa_r+0x608>)
 80055c8:	f006 020f 	and.w	r2, r6, #15
 80055cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fa ff80 	bl	80004d8 <__aeabi_dmul>
 80055d8:	2502      	movs	r5, #2
 80055da:	2300      	movs	r3, #0
 80055dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e0:	4f9a      	ldr	r7, [pc, #616]	; (800584c <_dtoa_r+0x60c>)
 80055e2:	1136      	asrs	r6, r6, #4
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	f040 8083 	bne.w	80056f0 <_dtoa_r+0x4b0>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e0      	bne.n	80055b0 <_dtoa_r+0x370>
 80055ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 808a 	beq.w	800570a <_dtoa_r+0x4ca>
 80055f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80055fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005602:	2200      	movs	r2, #0
 8005604:	4b92      	ldr	r3, [pc, #584]	; (8005850 <_dtoa_r+0x610>)
 8005606:	f7fb f9d9 	bl	80009bc <__aeabi_dcmplt>
 800560a:	2800      	cmp	r0, #0
 800560c:	d07d      	beq.n	800570a <_dtoa_r+0x4ca>
 800560e:	f1b8 0f00 	cmp.w	r8, #0
 8005612:	d07a      	beq.n	800570a <_dtoa_r+0x4ca>
 8005614:	9b04      	ldr	r3, [sp, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	dd36      	ble.n	8005688 <_dtoa_r+0x448>
 800561a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800561e:	2200      	movs	r2, #0
 8005620:	4b8c      	ldr	r3, [pc, #560]	; (8005854 <_dtoa_r+0x614>)
 8005622:	f7fa ff59 	bl	80004d8 <__aeabi_dmul>
 8005626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800562a:	9e04      	ldr	r6, [sp, #16]
 800562c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005630:	3501      	adds	r5, #1
 8005632:	4628      	mov	r0, r5
 8005634:	f7fa fee6 	bl	8000404 <__aeabi_i2d>
 8005638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800563c:	f7fa ff4c 	bl	80004d8 <__aeabi_dmul>
 8005640:	2200      	movs	r2, #0
 8005642:	4b85      	ldr	r3, [pc, #532]	; (8005858 <_dtoa_r+0x618>)
 8005644:	f7fa fd92 	bl	800016c <__adddf3>
 8005648:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800564c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005650:	950b      	str	r5, [sp, #44]	; 0x2c
 8005652:	2e00      	cmp	r6, #0
 8005654:	d15c      	bne.n	8005710 <_dtoa_r+0x4d0>
 8005656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	4b7f      	ldr	r3, [pc, #508]	; (800585c <_dtoa_r+0x61c>)
 800565e:	f7fa fd83 	bl	8000168 <__aeabi_dsub>
 8005662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005664:	462b      	mov	r3, r5
 8005666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800566a:	f7fb f9c5 	bl	80009f8 <__aeabi_dcmpgt>
 800566e:	2800      	cmp	r0, #0
 8005670:	f040 8281 	bne.w	8005b76 <_dtoa_r+0x936>
 8005674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800567e:	f7fb f99d 	bl	80009bc <__aeabi_dcmplt>
 8005682:	2800      	cmp	r0, #0
 8005684:	f040 8275 	bne.w	8005b72 <_dtoa_r+0x932>
 8005688:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800568c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005692:	2b00      	cmp	r3, #0
 8005694:	f2c0 814b 	blt.w	800592e <_dtoa_r+0x6ee>
 8005698:	f1ba 0f0e 	cmp.w	sl, #14
 800569c:	f300 8147 	bgt.w	800592e <_dtoa_r+0x6ee>
 80056a0:	4b69      	ldr	r3, [pc, #420]	; (8005848 <_dtoa_r+0x608>)
 80056a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f280 80d7 	bge.w	8005864 <_dtoa_r+0x624>
 80056b6:	f1b8 0f00 	cmp.w	r8, #0
 80056ba:	f300 80d3 	bgt.w	8005864 <_dtoa_r+0x624>
 80056be:	f040 8257 	bne.w	8005b70 <_dtoa_r+0x930>
 80056c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c6:	2200      	movs	r2, #0
 80056c8:	4b64      	ldr	r3, [pc, #400]	; (800585c <_dtoa_r+0x61c>)
 80056ca:	f7fa ff05 	bl	80004d8 <__aeabi_dmul>
 80056ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056d2:	f7fb f987 	bl	80009e4 <__aeabi_dcmpge>
 80056d6:	4646      	mov	r6, r8
 80056d8:	4647      	mov	r7, r8
 80056da:	2800      	cmp	r0, #0
 80056dc:	f040 822d 	bne.w	8005b3a <_dtoa_r+0x8fa>
 80056e0:	9b06      	ldr	r3, [sp, #24]
 80056e2:	9a06      	ldr	r2, [sp, #24]
 80056e4:	1c5d      	adds	r5, r3, #1
 80056e6:	2331      	movs	r3, #49	; 0x31
 80056e8:	f10a 0a01 	add.w	sl, sl, #1
 80056ec:	7013      	strb	r3, [r2, #0]
 80056ee:	e228      	b.n	8005b42 <_dtoa_r+0x902>
 80056f0:	07f2      	lsls	r2, r6, #31
 80056f2:	d505      	bpl.n	8005700 <_dtoa_r+0x4c0>
 80056f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f8:	f7fa feee 	bl	80004d8 <__aeabi_dmul>
 80056fc:	2301      	movs	r3, #1
 80056fe:	3501      	adds	r5, #1
 8005700:	1076      	asrs	r6, r6, #1
 8005702:	3708      	adds	r7, #8
 8005704:	e76e      	b.n	80055e4 <_dtoa_r+0x3a4>
 8005706:	2502      	movs	r5, #2
 8005708:	e771      	b.n	80055ee <_dtoa_r+0x3ae>
 800570a:	4657      	mov	r7, sl
 800570c:	4646      	mov	r6, r8
 800570e:	e790      	b.n	8005632 <_dtoa_r+0x3f2>
 8005710:	4b4d      	ldr	r3, [pc, #308]	; (8005848 <_dtoa_r+0x608>)
 8005712:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005716:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800571a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d048      	beq.n	80057b2 <_dtoa_r+0x572>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	2000      	movs	r0, #0
 8005726:	494e      	ldr	r1, [pc, #312]	; (8005860 <_dtoa_r+0x620>)
 8005728:	f7fb f800 	bl	800072c <__aeabi_ddiv>
 800572c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005730:	f7fa fd1a 	bl	8000168 <__aeabi_dsub>
 8005734:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005738:	9d06      	ldr	r5, [sp, #24]
 800573a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800573e:	f7fb f97b 	bl	8000a38 <__aeabi_d2iz>
 8005742:	9011      	str	r0, [sp, #68]	; 0x44
 8005744:	f7fa fe5e 	bl	8000404 <__aeabi_i2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005750:	f7fa fd0a 	bl	8000168 <__aeabi_dsub>
 8005754:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800575a:	3330      	adds	r3, #48	; 0x30
 800575c:	f805 3b01 	strb.w	r3, [r5], #1
 8005760:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005764:	f7fb f92a 	bl	80009bc <__aeabi_dcmplt>
 8005768:	2800      	cmp	r0, #0
 800576a:	d163      	bne.n	8005834 <_dtoa_r+0x5f4>
 800576c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005770:	2000      	movs	r0, #0
 8005772:	4937      	ldr	r1, [pc, #220]	; (8005850 <_dtoa_r+0x610>)
 8005774:	f7fa fcf8 	bl	8000168 <__aeabi_dsub>
 8005778:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800577c:	f7fb f91e 	bl	80009bc <__aeabi_dcmplt>
 8005780:	2800      	cmp	r0, #0
 8005782:	f040 80b5 	bne.w	80058f0 <_dtoa_r+0x6b0>
 8005786:	9b06      	ldr	r3, [sp, #24]
 8005788:	1aeb      	subs	r3, r5, r3
 800578a:	429e      	cmp	r6, r3
 800578c:	f77f af7c 	ble.w	8005688 <_dtoa_r+0x448>
 8005790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005794:	2200      	movs	r2, #0
 8005796:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <_dtoa_r+0x614>)
 8005798:	f7fa fe9e 	bl	80004d8 <__aeabi_dmul>
 800579c:	2200      	movs	r2, #0
 800579e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a6:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <_dtoa_r+0x614>)
 80057a8:	f7fa fe96 	bl	80004d8 <__aeabi_dmul>
 80057ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057b0:	e7c3      	b.n	800573a <_dtoa_r+0x4fa>
 80057b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057b6:	f7fa fe8f 	bl	80004d8 <__aeabi_dmul>
 80057ba:	9b06      	ldr	r3, [sp, #24]
 80057bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057c0:	199d      	adds	r5, r3, r6
 80057c2:	461e      	mov	r6, r3
 80057c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057c8:	f7fb f936 	bl	8000a38 <__aeabi_d2iz>
 80057cc:	9011      	str	r0, [sp, #68]	; 0x44
 80057ce:	f7fa fe19 	bl	8000404 <__aeabi_i2d>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057da:	f7fa fcc5 	bl	8000168 <__aeabi_dsub>
 80057de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057e4:	3330      	adds	r3, #48	; 0x30
 80057e6:	f806 3b01 	strb.w	r3, [r6], #1
 80057ea:	42ae      	cmp	r6, r5
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	d124      	bne.n	800583c <_dtoa_r+0x5fc>
 80057f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <_dtoa_r+0x620>)
 80057f8:	f7fa fcb8 	bl	800016c <__adddf3>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005804:	f7fb f8f8 	bl	80009f8 <__aeabi_dcmpgt>
 8005808:	2800      	cmp	r0, #0
 800580a:	d171      	bne.n	80058f0 <_dtoa_r+0x6b0>
 800580c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005810:	2000      	movs	r0, #0
 8005812:	4913      	ldr	r1, [pc, #76]	; (8005860 <_dtoa_r+0x620>)
 8005814:	f7fa fca8 	bl	8000168 <__aeabi_dsub>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005820:	f7fb f8cc 	bl	80009bc <__aeabi_dcmplt>
 8005824:	2800      	cmp	r0, #0
 8005826:	f43f af2f 	beq.w	8005688 <_dtoa_r+0x448>
 800582a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800582e:	1e6a      	subs	r2, r5, #1
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d001      	beq.n	8005838 <_dtoa_r+0x5f8>
 8005834:	46ba      	mov	sl, r7
 8005836:	e04a      	b.n	80058ce <_dtoa_r+0x68e>
 8005838:	4615      	mov	r5, r2
 800583a:	e7f6      	b.n	800582a <_dtoa_r+0x5ea>
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <_dtoa_r+0x614>)
 800583e:	f7fa fe4b 	bl	80004d8 <__aeabi_dmul>
 8005842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005846:	e7bd      	b.n	80057c4 <_dtoa_r+0x584>
 8005848:	08007578 	.word	0x08007578
 800584c:	08007550 	.word	0x08007550
 8005850:	3ff00000 	.word	0x3ff00000
 8005854:	40240000 	.word	0x40240000
 8005858:	401c0000 	.word	0x401c0000
 800585c:	40140000 	.word	0x40140000
 8005860:	3fe00000 	.word	0x3fe00000
 8005864:	9d06      	ldr	r5, [sp, #24]
 8005866:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800586a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	f7fa ff5b 	bl	800072c <__aeabi_ddiv>
 8005876:	f7fb f8df 	bl	8000a38 <__aeabi_d2iz>
 800587a:	4681      	mov	r9, r0
 800587c:	f7fa fdc2 	bl	8000404 <__aeabi_i2d>
 8005880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005884:	f7fa fe28 	bl	80004d8 <__aeabi_dmul>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4630      	mov	r0, r6
 800588e:	4639      	mov	r1, r7
 8005890:	f7fa fc6a 	bl	8000168 <__aeabi_dsub>
 8005894:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005898:	f805 6b01 	strb.w	r6, [r5], #1
 800589c:	9e06      	ldr	r6, [sp, #24]
 800589e:	4602      	mov	r2, r0
 80058a0:	1bae      	subs	r6, r5, r6
 80058a2:	45b0      	cmp	r8, r6
 80058a4:	460b      	mov	r3, r1
 80058a6:	d135      	bne.n	8005914 <_dtoa_r+0x6d4>
 80058a8:	f7fa fc60 	bl	800016c <__adddf3>
 80058ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058b0:	4606      	mov	r6, r0
 80058b2:	460f      	mov	r7, r1
 80058b4:	f7fb f8a0 	bl	80009f8 <__aeabi_dcmpgt>
 80058b8:	b9c8      	cbnz	r0, 80058ee <_dtoa_r+0x6ae>
 80058ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058be:	4630      	mov	r0, r6
 80058c0:	4639      	mov	r1, r7
 80058c2:	f7fb f871 	bl	80009a8 <__aeabi_dcmpeq>
 80058c6:	b110      	cbz	r0, 80058ce <_dtoa_r+0x68e>
 80058c8:	f019 0f01 	tst.w	r9, #1
 80058cc:	d10f      	bne.n	80058ee <_dtoa_r+0x6ae>
 80058ce:	4659      	mov	r1, fp
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fab3 	bl	8005e3c <_Bfree>
 80058d6:	2300      	movs	r3, #0
 80058d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058da:	702b      	strb	r3, [r5, #0]
 80058dc:	f10a 0301 	add.w	r3, sl, #1
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f43f acf3 	beq.w	80052d0 <_dtoa_r+0x90>
 80058ea:	601d      	str	r5, [r3, #0]
 80058ec:	e4f0      	b.n	80052d0 <_dtoa_r+0x90>
 80058ee:	4657      	mov	r7, sl
 80058f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058f4:	1e6b      	subs	r3, r5, #1
 80058f6:	2a39      	cmp	r2, #57	; 0x39
 80058f8:	d106      	bne.n	8005908 <_dtoa_r+0x6c8>
 80058fa:	9a06      	ldr	r2, [sp, #24]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d107      	bne.n	8005910 <_dtoa_r+0x6d0>
 8005900:	2330      	movs	r3, #48	; 0x30
 8005902:	7013      	strb	r3, [r2, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	3701      	adds	r7, #1
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	3201      	adds	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e791      	b.n	8005834 <_dtoa_r+0x5f4>
 8005910:	461d      	mov	r5, r3
 8005912:	e7ed      	b.n	80058f0 <_dtoa_r+0x6b0>
 8005914:	2200      	movs	r2, #0
 8005916:	4b99      	ldr	r3, [pc, #612]	; (8005b7c <_dtoa_r+0x93c>)
 8005918:	f7fa fdde 	bl	80004d8 <__aeabi_dmul>
 800591c:	2200      	movs	r2, #0
 800591e:	2300      	movs	r3, #0
 8005920:	4606      	mov	r6, r0
 8005922:	460f      	mov	r7, r1
 8005924:	f7fb f840 	bl	80009a8 <__aeabi_dcmpeq>
 8005928:	2800      	cmp	r0, #0
 800592a:	d09e      	beq.n	800586a <_dtoa_r+0x62a>
 800592c:	e7cf      	b.n	80058ce <_dtoa_r+0x68e>
 800592e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005930:	2a00      	cmp	r2, #0
 8005932:	f000 8088 	beq.w	8005a46 <_dtoa_r+0x806>
 8005936:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005938:	2a01      	cmp	r2, #1
 800593a:	dc6d      	bgt.n	8005a18 <_dtoa_r+0x7d8>
 800593c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800593e:	2a00      	cmp	r2, #0
 8005940:	d066      	beq.n	8005a10 <_dtoa_r+0x7d0>
 8005942:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005946:	464d      	mov	r5, r9
 8005948:	9e08      	ldr	r6, [sp, #32]
 800594a:	9a07      	ldr	r2, [sp, #28]
 800594c:	2101      	movs	r1, #1
 800594e:	441a      	add	r2, r3
 8005950:	4620      	mov	r0, r4
 8005952:	4499      	add	r9, r3
 8005954:	9207      	str	r2, [sp, #28]
 8005956:	f000 fb11 	bl	8005f7c <__i2b>
 800595a:	4607      	mov	r7, r0
 800595c:	2d00      	cmp	r5, #0
 800595e:	dd0b      	ble.n	8005978 <_dtoa_r+0x738>
 8005960:	9b07      	ldr	r3, [sp, #28]
 8005962:	2b00      	cmp	r3, #0
 8005964:	dd08      	ble.n	8005978 <_dtoa_r+0x738>
 8005966:	42ab      	cmp	r3, r5
 8005968:	bfa8      	it	ge
 800596a:	462b      	movge	r3, r5
 800596c:	9a07      	ldr	r2, [sp, #28]
 800596e:	eba9 0903 	sub.w	r9, r9, r3
 8005972:	1aed      	subs	r5, r5, r3
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	9307      	str	r3, [sp, #28]
 8005978:	9b08      	ldr	r3, [sp, #32]
 800597a:	b1eb      	cbz	r3, 80059b8 <_dtoa_r+0x778>
 800597c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d065      	beq.n	8005a4e <_dtoa_r+0x80e>
 8005982:	b18e      	cbz	r6, 80059a8 <_dtoa_r+0x768>
 8005984:	4639      	mov	r1, r7
 8005986:	4632      	mov	r2, r6
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fb95 	bl	80060b8 <__pow5mult>
 800598e:	465a      	mov	r2, fp
 8005990:	4601      	mov	r1, r0
 8005992:	4607      	mov	r7, r0
 8005994:	4620      	mov	r0, r4
 8005996:	f000 fafa 	bl	8005f8e <__multiply>
 800599a:	4659      	mov	r1, fp
 800599c:	900a      	str	r0, [sp, #40]	; 0x28
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 fa4c 	bl	8005e3c <_Bfree>
 80059a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a6:	469b      	mov	fp, r3
 80059a8:	9b08      	ldr	r3, [sp, #32]
 80059aa:	1b9a      	subs	r2, r3, r6
 80059ac:	d004      	beq.n	80059b8 <_dtoa_r+0x778>
 80059ae:	4659      	mov	r1, fp
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 fb81 	bl	80060b8 <__pow5mult>
 80059b6:	4683      	mov	fp, r0
 80059b8:	2101      	movs	r1, #1
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 fade 	bl	8005f7c <__i2b>
 80059c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059c2:	4606      	mov	r6, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 81c6 	beq.w	8005d56 <_dtoa_r+0xb16>
 80059ca:	461a      	mov	r2, r3
 80059cc:	4601      	mov	r1, r0
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 fb72 	bl	80060b8 <__pow5mult>
 80059d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059d6:	4606      	mov	r6, r0
 80059d8:	2b01      	cmp	r3, #1
 80059da:	dc3e      	bgt.n	8005a5a <_dtoa_r+0x81a>
 80059dc:	9b02      	ldr	r3, [sp, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d137      	bne.n	8005a52 <_dtoa_r+0x812>
 80059e2:	9b03      	ldr	r3, [sp, #12]
 80059e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d134      	bne.n	8005a56 <_dtoa_r+0x816>
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059f2:	0d1b      	lsrs	r3, r3, #20
 80059f4:	051b      	lsls	r3, r3, #20
 80059f6:	b12b      	cbz	r3, 8005a04 <_dtoa_r+0x7c4>
 80059f8:	9b07      	ldr	r3, [sp, #28]
 80059fa:	f109 0901 	add.w	r9, r9, #1
 80059fe:	3301      	adds	r3, #1
 8005a00:	9307      	str	r3, [sp, #28]
 8005a02:	2301      	movs	r3, #1
 8005a04:	9308      	str	r3, [sp, #32]
 8005a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d128      	bne.n	8005a5e <_dtoa_r+0x81e>
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	e02e      	b.n	8005a6e <_dtoa_r+0x82e>
 8005a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a16:	e796      	b.n	8005946 <_dtoa_r+0x706>
 8005a18:	9b08      	ldr	r3, [sp, #32]
 8005a1a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005a1e:	42b3      	cmp	r3, r6
 8005a20:	bfb7      	itett	lt
 8005a22:	9b08      	ldrlt	r3, [sp, #32]
 8005a24:	1b9e      	subge	r6, r3, r6
 8005a26:	1af2      	sublt	r2, r6, r3
 8005a28:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005a2a:	bfbf      	itttt	lt
 8005a2c:	9608      	strlt	r6, [sp, #32]
 8005a2e:	189b      	addlt	r3, r3, r2
 8005a30:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005a32:	2600      	movlt	r6, #0
 8005a34:	f1b8 0f00 	cmp.w	r8, #0
 8005a38:	bfb9      	ittee	lt
 8005a3a:	eba9 0508 	sublt.w	r5, r9, r8
 8005a3e:	2300      	movlt	r3, #0
 8005a40:	464d      	movge	r5, r9
 8005a42:	4643      	movge	r3, r8
 8005a44:	e781      	b.n	800594a <_dtoa_r+0x70a>
 8005a46:	9e08      	ldr	r6, [sp, #32]
 8005a48:	464d      	mov	r5, r9
 8005a4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a4c:	e786      	b.n	800595c <_dtoa_r+0x71c>
 8005a4e:	9a08      	ldr	r2, [sp, #32]
 8005a50:	e7ad      	b.n	80059ae <_dtoa_r+0x76e>
 8005a52:	2300      	movs	r3, #0
 8005a54:	e7d6      	b.n	8005a04 <_dtoa_r+0x7c4>
 8005a56:	9b02      	ldr	r3, [sp, #8]
 8005a58:	e7d4      	b.n	8005a04 <_dtoa_r+0x7c4>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9308      	str	r3, [sp, #32]
 8005a5e:	6933      	ldr	r3, [r6, #16]
 8005a60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a64:	6918      	ldr	r0, [r3, #16]
 8005a66:	f000 fa3b 	bl	8005ee0 <__hi0bits>
 8005a6a:	f1c0 0020 	rsb	r0, r0, #32
 8005a6e:	9b07      	ldr	r3, [sp, #28]
 8005a70:	4418      	add	r0, r3
 8005a72:	f010 001f 	ands.w	r0, r0, #31
 8005a76:	d047      	beq.n	8005b08 <_dtoa_r+0x8c8>
 8005a78:	f1c0 0320 	rsb	r3, r0, #32
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	dd3b      	ble.n	8005af8 <_dtoa_r+0x8b8>
 8005a80:	9b07      	ldr	r3, [sp, #28]
 8005a82:	f1c0 001c 	rsb	r0, r0, #28
 8005a86:	4481      	add	r9, r0
 8005a88:	4405      	add	r5, r0
 8005a8a:	4403      	add	r3, r0
 8005a8c:	9307      	str	r3, [sp, #28]
 8005a8e:	f1b9 0f00 	cmp.w	r9, #0
 8005a92:	dd05      	ble.n	8005aa0 <_dtoa_r+0x860>
 8005a94:	4659      	mov	r1, fp
 8005a96:	464a      	mov	r2, r9
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fb5b 	bl	8006154 <__lshift>
 8005a9e:	4683      	mov	fp, r0
 8005aa0:	9b07      	ldr	r3, [sp, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dd05      	ble.n	8005ab2 <_dtoa_r+0x872>
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f000 fb52 	bl	8006154 <__lshift>
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ab4:	b353      	cbz	r3, 8005b0c <_dtoa_r+0x8cc>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4658      	mov	r0, fp
 8005aba:	f000 fb9f 	bl	80061fc <__mcmp>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	da24      	bge.n	8005b0c <_dtoa_r+0x8cc>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	220a      	movs	r2, #10
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 f9ce 	bl	8005e6a <__multadd>
 8005ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ad4:	4683      	mov	fp, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8144 	beq.w	8005d64 <_dtoa_r+0xb24>
 8005adc:	2300      	movs	r3, #0
 8005ade:	4639      	mov	r1, r7
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 f9c1 	bl	8005e6a <__multadd>
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	4607      	mov	r7, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dc4d      	bgt.n	8005b8c <_dtoa_r+0x94c>
 8005af0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	dd4a      	ble.n	8005b8c <_dtoa_r+0x94c>
 8005af6:	e011      	b.n	8005b1c <_dtoa_r+0x8dc>
 8005af8:	d0c9      	beq.n	8005a8e <_dtoa_r+0x84e>
 8005afa:	9a07      	ldr	r2, [sp, #28]
 8005afc:	331c      	adds	r3, #28
 8005afe:	441a      	add	r2, r3
 8005b00:	4499      	add	r9, r3
 8005b02:	441d      	add	r5, r3
 8005b04:	4613      	mov	r3, r2
 8005b06:	e7c1      	b.n	8005a8c <_dtoa_r+0x84c>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	e7f6      	b.n	8005afa <_dtoa_r+0x8ba>
 8005b0c:	f1b8 0f00 	cmp.w	r8, #0
 8005b10:	dc36      	bgt.n	8005b80 <_dtoa_r+0x940>
 8005b12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	dd33      	ble.n	8005b80 <_dtoa_r+0x940>
 8005b18:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b1c:	9b04      	ldr	r3, [sp, #16]
 8005b1e:	b963      	cbnz	r3, 8005b3a <_dtoa_r+0x8fa>
 8005b20:	4631      	mov	r1, r6
 8005b22:	2205      	movs	r2, #5
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 f9a0 	bl	8005e6a <__multadd>
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	4658      	mov	r0, fp
 8005b30:	f000 fb64 	bl	80061fc <__mcmp>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f73f add3 	bgt.w	80056e0 <_dtoa_r+0x4a0>
 8005b3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b3c:	9d06      	ldr	r5, [sp, #24]
 8005b3e:	ea6f 0a03 	mvn.w	sl, r3
 8005b42:	f04f 0900 	mov.w	r9, #0
 8005b46:	4631      	mov	r1, r6
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 f977 	bl	8005e3c <_Bfree>
 8005b4e:	2f00      	cmp	r7, #0
 8005b50:	f43f aebd 	beq.w	80058ce <_dtoa_r+0x68e>
 8005b54:	f1b9 0f00 	cmp.w	r9, #0
 8005b58:	d005      	beq.n	8005b66 <_dtoa_r+0x926>
 8005b5a:	45b9      	cmp	r9, r7
 8005b5c:	d003      	beq.n	8005b66 <_dtoa_r+0x926>
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 f96b 	bl	8005e3c <_Bfree>
 8005b66:	4639      	mov	r1, r7
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f000 f967 	bl	8005e3c <_Bfree>
 8005b6e:	e6ae      	b.n	80058ce <_dtoa_r+0x68e>
 8005b70:	2600      	movs	r6, #0
 8005b72:	4637      	mov	r7, r6
 8005b74:	e7e1      	b.n	8005b3a <_dtoa_r+0x8fa>
 8005b76:	46ba      	mov	sl, r7
 8005b78:	4637      	mov	r7, r6
 8005b7a:	e5b1      	b.n	80056e0 <_dtoa_r+0x4a0>
 8005b7c:	40240000 	.word	0x40240000
 8005b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b82:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80f3 	beq.w	8005d72 <_dtoa_r+0xb32>
 8005b8c:	2d00      	cmp	r5, #0
 8005b8e:	dd05      	ble.n	8005b9c <_dtoa_r+0x95c>
 8005b90:	4639      	mov	r1, r7
 8005b92:	462a      	mov	r2, r5
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 fadd 	bl	8006154 <__lshift>
 8005b9a:	4607      	mov	r7, r0
 8005b9c:	9b08      	ldr	r3, [sp, #32]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d04c      	beq.n	8005c3c <_dtoa_r+0x9fc>
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 f915 	bl	8005dd4 <_Balloc>
 8005baa:	4605      	mov	r5, r0
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	f107 010c 	add.w	r1, r7, #12
 8005bb2:	3202      	adds	r2, #2
 8005bb4:	0092      	lsls	r2, r2, #2
 8005bb6:	300c      	adds	r0, #12
 8005bb8:	f7fe ff62 	bl	8004a80 <memcpy>
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 fac7 	bl	8006154 <__lshift>
 8005bc6:	46b9      	mov	r9, r7
 8005bc8:	4607      	mov	r7, r0
 8005bca:	9b06      	ldr	r3, [sp, #24]
 8005bcc:	9307      	str	r3, [sp, #28]
 8005bce:	9b02      	ldr	r3, [sp, #8]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	9308      	str	r3, [sp, #32]
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4658      	mov	r0, fp
 8005bda:	f7ff faa1 	bl	8005120 <quorem>
 8005bde:	4649      	mov	r1, r9
 8005be0:	4605      	mov	r5, r0
 8005be2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005be6:	4658      	mov	r0, fp
 8005be8:	f000 fb08 	bl	80061fc <__mcmp>
 8005bec:	463a      	mov	r2, r7
 8005bee:	9002      	str	r0, [sp, #8]
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fb1c 	bl	8006230 <__mdiff>
 8005bf8:	68c3      	ldr	r3, [r0, #12]
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	bb03      	cbnz	r3, 8005c40 <_dtoa_r+0xa00>
 8005bfe:	4601      	mov	r1, r0
 8005c00:	9009      	str	r0, [sp, #36]	; 0x24
 8005c02:	4658      	mov	r0, fp
 8005c04:	f000 fafa 	bl	80061fc <__mcmp>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	4620      	mov	r0, r4
 8005c10:	9309      	str	r3, [sp, #36]	; 0x24
 8005c12:	f000 f913 	bl	8005e3c <_Bfree>
 8005c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c18:	b9a3      	cbnz	r3, 8005c44 <_dtoa_r+0xa04>
 8005c1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c1c:	b992      	cbnz	r2, 8005c44 <_dtoa_r+0xa04>
 8005c1e:	9a08      	ldr	r2, [sp, #32]
 8005c20:	b982      	cbnz	r2, 8005c44 <_dtoa_r+0xa04>
 8005c22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c26:	d029      	beq.n	8005c7c <_dtoa_r+0xa3c>
 8005c28:	9b02      	ldr	r3, [sp, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd01      	ble.n	8005c32 <_dtoa_r+0x9f2>
 8005c2e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005c32:	9b07      	ldr	r3, [sp, #28]
 8005c34:	1c5d      	adds	r5, r3, #1
 8005c36:	f883 8000 	strb.w	r8, [r3]
 8005c3a:	e784      	b.n	8005b46 <_dtoa_r+0x906>
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	e7c2      	b.n	8005bc6 <_dtoa_r+0x986>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e7e3      	b.n	8005c0c <_dtoa_r+0x9cc>
 8005c44:	9a02      	ldr	r2, [sp, #8]
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	db04      	blt.n	8005c54 <_dtoa_r+0xa14>
 8005c4a:	d123      	bne.n	8005c94 <_dtoa_r+0xa54>
 8005c4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c4e:	bb0a      	cbnz	r2, 8005c94 <_dtoa_r+0xa54>
 8005c50:	9a08      	ldr	r2, [sp, #32]
 8005c52:	b9fa      	cbnz	r2, 8005c94 <_dtoa_r+0xa54>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	ddec      	ble.n	8005c32 <_dtoa_r+0x9f2>
 8005c58:	4659      	mov	r1, fp
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f000 fa79 	bl	8006154 <__lshift>
 8005c62:	4631      	mov	r1, r6
 8005c64:	4683      	mov	fp, r0
 8005c66:	f000 fac9 	bl	80061fc <__mcmp>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	dc03      	bgt.n	8005c76 <_dtoa_r+0xa36>
 8005c6e:	d1e0      	bne.n	8005c32 <_dtoa_r+0x9f2>
 8005c70:	f018 0f01 	tst.w	r8, #1
 8005c74:	d0dd      	beq.n	8005c32 <_dtoa_r+0x9f2>
 8005c76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c7a:	d1d8      	bne.n	8005c2e <_dtoa_r+0x9ee>
 8005c7c:	9b07      	ldr	r3, [sp, #28]
 8005c7e:	9a07      	ldr	r2, [sp, #28]
 8005c80:	1c5d      	adds	r5, r3, #1
 8005c82:	2339      	movs	r3, #57	; 0x39
 8005c84:	7013      	strb	r3, [r2, #0]
 8005c86:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c8a:	1e6a      	subs	r2, r5, #1
 8005c8c:	2b39      	cmp	r3, #57	; 0x39
 8005c8e:	d04d      	beq.n	8005d2c <_dtoa_r+0xaec>
 8005c90:	3301      	adds	r3, #1
 8005c92:	e052      	b.n	8005d3a <_dtoa_r+0xafa>
 8005c94:	9a07      	ldr	r2, [sp, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f102 0501 	add.w	r5, r2, #1
 8005c9c:	dd06      	ble.n	8005cac <_dtoa_r+0xa6c>
 8005c9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ca2:	d0eb      	beq.n	8005c7c <_dtoa_r+0xa3c>
 8005ca4:	f108 0801 	add.w	r8, r8, #1
 8005ca8:	9b07      	ldr	r3, [sp, #28]
 8005caa:	e7c4      	b.n	8005c36 <_dtoa_r+0x9f6>
 8005cac:	9b06      	ldr	r3, [sp, #24]
 8005cae:	9a04      	ldr	r2, [sp, #16]
 8005cb0:	1aeb      	subs	r3, r5, r3
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005cb8:	d021      	beq.n	8005cfe <_dtoa_r+0xabe>
 8005cba:	4659      	mov	r1, fp
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	220a      	movs	r2, #10
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 f8d2 	bl	8005e6a <__multadd>
 8005cc6:	45b9      	cmp	r9, r7
 8005cc8:	4683      	mov	fp, r0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	f04f 020a 	mov.w	r2, #10
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	d105      	bne.n	8005ce4 <_dtoa_r+0xaa4>
 8005cd8:	f000 f8c7 	bl	8005e6a <__multadd>
 8005cdc:	4681      	mov	r9, r0
 8005cde:	4607      	mov	r7, r0
 8005ce0:	9507      	str	r5, [sp, #28]
 8005ce2:	e778      	b.n	8005bd6 <_dtoa_r+0x996>
 8005ce4:	f000 f8c1 	bl	8005e6a <__multadd>
 8005ce8:	4639      	mov	r1, r7
 8005cea:	4681      	mov	r9, r0
 8005cec:	2300      	movs	r3, #0
 8005cee:	220a      	movs	r2, #10
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 f8ba 	bl	8005e6a <__multadd>
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	e7f2      	b.n	8005ce0 <_dtoa_r+0xaa0>
 8005cfa:	f04f 0900 	mov.w	r9, #0
 8005cfe:	4659      	mov	r1, fp
 8005d00:	2201      	movs	r2, #1
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 fa26 	bl	8006154 <__lshift>
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4683      	mov	fp, r0
 8005d0c:	f000 fa76 	bl	80061fc <__mcmp>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	dcb8      	bgt.n	8005c86 <_dtoa_r+0xa46>
 8005d14:	d102      	bne.n	8005d1c <_dtoa_r+0xadc>
 8005d16:	f018 0f01 	tst.w	r8, #1
 8005d1a:	d1b4      	bne.n	8005c86 <_dtoa_r+0xa46>
 8005d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d20:	1e6a      	subs	r2, r5, #1
 8005d22:	2b30      	cmp	r3, #48	; 0x30
 8005d24:	f47f af0f 	bne.w	8005b46 <_dtoa_r+0x906>
 8005d28:	4615      	mov	r5, r2
 8005d2a:	e7f7      	b.n	8005d1c <_dtoa_r+0xadc>
 8005d2c:	9b06      	ldr	r3, [sp, #24]
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d105      	bne.n	8005d3e <_dtoa_r+0xafe>
 8005d32:	2331      	movs	r3, #49	; 0x31
 8005d34:	9a06      	ldr	r2, [sp, #24]
 8005d36:	f10a 0a01 	add.w	sl, sl, #1
 8005d3a:	7013      	strb	r3, [r2, #0]
 8005d3c:	e703      	b.n	8005b46 <_dtoa_r+0x906>
 8005d3e:	4615      	mov	r5, r2
 8005d40:	e7a1      	b.n	8005c86 <_dtoa_r+0xa46>
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <_dtoa_r+0xb60>)
 8005d44:	f7ff bae1 	b.w	800530a <_dtoa_r+0xca>
 8005d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f47f aabb 	bne.w	80052c6 <_dtoa_r+0x86>
 8005d50:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <_dtoa_r+0xb64>)
 8005d52:	f7ff bada 	b.w	800530a <_dtoa_r+0xca>
 8005d56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	f77f ae3f 	ble.w	80059dc <_dtoa_r+0x79c>
 8005d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d60:	9308      	str	r3, [sp, #32]
 8005d62:	e653      	b.n	8005a0c <_dtoa_r+0x7cc>
 8005d64:	9b04      	ldr	r3, [sp, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	dc03      	bgt.n	8005d72 <_dtoa_r+0xb32>
 8005d6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	f73f aed5 	bgt.w	8005b1c <_dtoa_r+0x8dc>
 8005d72:	9d06      	ldr	r5, [sp, #24]
 8005d74:	4631      	mov	r1, r6
 8005d76:	4658      	mov	r0, fp
 8005d78:	f7ff f9d2 	bl	8005120 <quorem>
 8005d7c:	9b06      	ldr	r3, [sp, #24]
 8005d7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d82:	f805 8b01 	strb.w	r8, [r5], #1
 8005d86:	9a04      	ldr	r2, [sp, #16]
 8005d88:	1aeb      	subs	r3, r5, r3
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	ddb5      	ble.n	8005cfa <_dtoa_r+0xaba>
 8005d8e:	4659      	mov	r1, fp
 8005d90:	2300      	movs	r3, #0
 8005d92:	220a      	movs	r2, #10
 8005d94:	4620      	mov	r0, r4
 8005d96:	f000 f868 	bl	8005e6a <__multadd>
 8005d9a:	4683      	mov	fp, r0
 8005d9c:	e7ea      	b.n	8005d74 <_dtoa_r+0xb34>
 8005d9e:	bf00      	nop
 8005da0:	0800753c 	.word	0x0800753c
 8005da4:	0800753e 	.word	0x0800753e

08005da8 <_localeconv_r>:
 8005da8:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <_localeconv_r+0x14>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6a18      	ldr	r0, [r3, #32]
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <_localeconv_r+0x18>)
 8005db0:	2800      	cmp	r0, #0
 8005db2:	bf08      	it	eq
 8005db4:	4618      	moveq	r0, r3
 8005db6:	30f0      	adds	r0, #240	; 0xf0
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	2000000c 	.word	0x2000000c
 8005dc0:	20000070 	.word	0x20000070

08005dc4 <malloc>:
 8005dc4:	4b02      	ldr	r3, [pc, #8]	; (8005dd0 <malloc+0xc>)
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	f000 baed 	b.w	80063a8 <_malloc_r>
 8005dce:	bf00      	nop
 8005dd0:	2000000c 	.word	0x2000000c

08005dd4 <_Balloc>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dd8:	4604      	mov	r4, r0
 8005dda:	460e      	mov	r6, r1
 8005ddc:	b93d      	cbnz	r5, 8005dee <_Balloc+0x1a>
 8005dde:	2010      	movs	r0, #16
 8005de0:	f7ff fff0 	bl	8005dc4 <malloc>
 8005de4:	6260      	str	r0, [r4, #36]	; 0x24
 8005de6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dea:	6005      	str	r5, [r0, #0]
 8005dec:	60c5      	str	r5, [r0, #12]
 8005dee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005df0:	68eb      	ldr	r3, [r5, #12]
 8005df2:	b183      	cbz	r3, 8005e16 <_Balloc+0x42>
 8005df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005dfc:	b9b8      	cbnz	r0, 8005e2e <_Balloc+0x5a>
 8005dfe:	2101      	movs	r1, #1
 8005e00:	fa01 f506 	lsl.w	r5, r1, r6
 8005e04:	1d6a      	adds	r2, r5, #5
 8005e06:	0092      	lsls	r2, r2, #2
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fabe 	bl	800638a <_calloc_r>
 8005e0e:	b160      	cbz	r0, 8005e2a <_Balloc+0x56>
 8005e10:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005e14:	e00e      	b.n	8005e34 <_Balloc+0x60>
 8005e16:	2221      	movs	r2, #33	; 0x21
 8005e18:	2104      	movs	r1, #4
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 fab5 	bl	800638a <_calloc_r>
 8005e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e22:	60e8      	str	r0, [r5, #12]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e4      	bne.n	8005df4 <_Balloc+0x20>
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	bd70      	pop	{r4, r5, r6, pc}
 8005e2e:	6802      	ldr	r2, [r0, #0]
 8005e30:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e34:	2300      	movs	r3, #0
 8005e36:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e3a:	e7f7      	b.n	8005e2c <_Balloc+0x58>

08005e3c <_Bfree>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e40:	4606      	mov	r6, r0
 8005e42:	460d      	mov	r5, r1
 8005e44:	b93c      	cbnz	r4, 8005e56 <_Bfree+0x1a>
 8005e46:	2010      	movs	r0, #16
 8005e48:	f7ff ffbc 	bl	8005dc4 <malloc>
 8005e4c:	6270      	str	r0, [r6, #36]	; 0x24
 8005e4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e52:	6004      	str	r4, [r0, #0]
 8005e54:	60c4      	str	r4, [r0, #12]
 8005e56:	b13d      	cbz	r5, 8005e68 <_Bfree+0x2c>
 8005e58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e5a:	686a      	ldr	r2, [r5, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e62:	6029      	str	r1, [r5, #0]
 8005e64:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e68:	bd70      	pop	{r4, r5, r6, pc}

08005e6a <__multadd>:
 8005e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6e:	461f      	mov	r7, r3
 8005e70:	4606      	mov	r6, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	2300      	movs	r3, #0
 8005e76:	690d      	ldr	r5, [r1, #16]
 8005e78:	f101 0c14 	add.w	ip, r1, #20
 8005e7c:	f8dc 0000 	ldr.w	r0, [ip]
 8005e80:	3301      	adds	r3, #1
 8005e82:	b281      	uxth	r1, r0
 8005e84:	fb02 7101 	mla	r1, r2, r1, r7
 8005e88:	0c00      	lsrs	r0, r0, #16
 8005e8a:	0c0f      	lsrs	r7, r1, #16
 8005e8c:	fb02 7000 	mla	r0, r2, r0, r7
 8005e90:	b289      	uxth	r1, r1
 8005e92:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e96:	429d      	cmp	r5, r3
 8005e98:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e9c:	f84c 1b04 	str.w	r1, [ip], #4
 8005ea0:	dcec      	bgt.n	8005e7c <__multadd+0x12>
 8005ea2:	b1d7      	cbz	r7, 8005eda <__multadd+0x70>
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	42ab      	cmp	r3, r5
 8005ea8:	dc12      	bgt.n	8005ed0 <__multadd+0x66>
 8005eaa:	6861      	ldr	r1, [r4, #4]
 8005eac:	4630      	mov	r0, r6
 8005eae:	3101      	adds	r1, #1
 8005eb0:	f7ff ff90 	bl	8005dd4 <_Balloc>
 8005eb4:	4680      	mov	r8, r0
 8005eb6:	6922      	ldr	r2, [r4, #16]
 8005eb8:	f104 010c 	add.w	r1, r4, #12
 8005ebc:	3202      	adds	r2, #2
 8005ebe:	0092      	lsls	r2, r2, #2
 8005ec0:	300c      	adds	r0, #12
 8005ec2:	f7fe fddd 	bl	8004a80 <memcpy>
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f7ff ffb7 	bl	8005e3c <_Bfree>
 8005ece:	4644      	mov	r4, r8
 8005ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	615f      	str	r7, [r3, #20]
 8005ed8:	6125      	str	r5, [r4, #16]
 8005eda:	4620      	mov	r0, r4
 8005edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ee0 <__hi0bits>:
 8005ee0:	0c02      	lsrs	r2, r0, #16
 8005ee2:	0412      	lsls	r2, r2, #16
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	b9b2      	cbnz	r2, 8005f16 <__hi0bits+0x36>
 8005ee8:	0403      	lsls	r3, r0, #16
 8005eea:	2010      	movs	r0, #16
 8005eec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ef0:	bf04      	itt	eq
 8005ef2:	021b      	lsleq	r3, r3, #8
 8005ef4:	3008      	addeq	r0, #8
 8005ef6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005efa:	bf04      	itt	eq
 8005efc:	011b      	lsleq	r3, r3, #4
 8005efe:	3004      	addeq	r0, #4
 8005f00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f04:	bf04      	itt	eq
 8005f06:	009b      	lsleq	r3, r3, #2
 8005f08:	3002      	addeq	r0, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	db06      	blt.n	8005f1c <__hi0bits+0x3c>
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	d503      	bpl.n	8005f1a <__hi0bits+0x3a>
 8005f12:	3001      	adds	r0, #1
 8005f14:	4770      	bx	lr
 8005f16:	2000      	movs	r0, #0
 8005f18:	e7e8      	b.n	8005eec <__hi0bits+0xc>
 8005f1a:	2020      	movs	r0, #32
 8005f1c:	4770      	bx	lr

08005f1e <__lo0bits>:
 8005f1e:	6803      	ldr	r3, [r0, #0]
 8005f20:	4601      	mov	r1, r0
 8005f22:	f013 0207 	ands.w	r2, r3, #7
 8005f26:	d00b      	beq.n	8005f40 <__lo0bits+0x22>
 8005f28:	07da      	lsls	r2, r3, #31
 8005f2a:	d423      	bmi.n	8005f74 <__lo0bits+0x56>
 8005f2c:	0798      	lsls	r0, r3, #30
 8005f2e:	bf49      	itett	mi
 8005f30:	085b      	lsrmi	r3, r3, #1
 8005f32:	089b      	lsrpl	r3, r3, #2
 8005f34:	2001      	movmi	r0, #1
 8005f36:	600b      	strmi	r3, [r1, #0]
 8005f38:	bf5c      	itt	pl
 8005f3a:	600b      	strpl	r3, [r1, #0]
 8005f3c:	2002      	movpl	r0, #2
 8005f3e:	4770      	bx	lr
 8005f40:	b298      	uxth	r0, r3
 8005f42:	b9a8      	cbnz	r0, 8005f70 <__lo0bits+0x52>
 8005f44:	2010      	movs	r0, #16
 8005f46:	0c1b      	lsrs	r3, r3, #16
 8005f48:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f4c:	bf04      	itt	eq
 8005f4e:	0a1b      	lsreq	r3, r3, #8
 8005f50:	3008      	addeq	r0, #8
 8005f52:	071a      	lsls	r2, r3, #28
 8005f54:	bf04      	itt	eq
 8005f56:	091b      	lsreq	r3, r3, #4
 8005f58:	3004      	addeq	r0, #4
 8005f5a:	079a      	lsls	r2, r3, #30
 8005f5c:	bf04      	itt	eq
 8005f5e:	089b      	lsreq	r3, r3, #2
 8005f60:	3002      	addeq	r0, #2
 8005f62:	07da      	lsls	r2, r3, #31
 8005f64:	d402      	bmi.n	8005f6c <__lo0bits+0x4e>
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	d006      	beq.n	8005f78 <__lo0bits+0x5a>
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	600b      	str	r3, [r1, #0]
 8005f6e:	4770      	bx	lr
 8005f70:	4610      	mov	r0, r2
 8005f72:	e7e9      	b.n	8005f48 <__lo0bits+0x2a>
 8005f74:	2000      	movs	r0, #0
 8005f76:	4770      	bx	lr
 8005f78:	2020      	movs	r0, #32
 8005f7a:	4770      	bx	lr

08005f7c <__i2b>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	460c      	mov	r4, r1
 8005f80:	2101      	movs	r1, #1
 8005f82:	f7ff ff27 	bl	8005dd4 <_Balloc>
 8005f86:	2201      	movs	r2, #1
 8005f88:	6144      	str	r4, [r0, #20]
 8005f8a:	6102      	str	r2, [r0, #16]
 8005f8c:	bd10      	pop	{r4, pc}

08005f8e <__multiply>:
 8005f8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f92:	4614      	mov	r4, r2
 8005f94:	690a      	ldr	r2, [r1, #16]
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	4688      	mov	r8, r1
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	bfbe      	ittt	lt
 8005f9e:	460b      	movlt	r3, r1
 8005fa0:	46a0      	movlt	r8, r4
 8005fa2:	461c      	movlt	r4, r3
 8005fa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fa8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005fac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005fb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fb4:	eb07 0609 	add.w	r6, r7, r9
 8005fb8:	42b3      	cmp	r3, r6
 8005fba:	bfb8      	it	lt
 8005fbc:	3101      	addlt	r1, #1
 8005fbe:	f7ff ff09 	bl	8005dd4 <_Balloc>
 8005fc2:	f100 0514 	add.w	r5, r0, #20
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	2200      	movs	r2, #0
 8005fca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005fce:	4573      	cmp	r3, lr
 8005fd0:	d316      	bcc.n	8006000 <__multiply+0x72>
 8005fd2:	f104 0214 	add.w	r2, r4, #20
 8005fd6:	f108 0114 	add.w	r1, r8, #20
 8005fda:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005fde:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	9b00      	ldr	r3, [sp, #0]
 8005fe6:	9201      	str	r2, [sp, #4]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d80c      	bhi.n	8006006 <__multiply+0x78>
 8005fec:	2e00      	cmp	r6, #0
 8005fee:	dd03      	ble.n	8005ff8 <__multiply+0x6a>
 8005ff0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d05d      	beq.n	80060b4 <__multiply+0x126>
 8005ff8:	6106      	str	r6, [r0, #16]
 8005ffa:	b003      	add	sp, #12
 8005ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006000:	f843 2b04 	str.w	r2, [r3], #4
 8006004:	e7e3      	b.n	8005fce <__multiply+0x40>
 8006006:	f8b2 b000 	ldrh.w	fp, [r2]
 800600a:	f1bb 0f00 	cmp.w	fp, #0
 800600e:	d023      	beq.n	8006058 <__multiply+0xca>
 8006010:	4689      	mov	r9, r1
 8006012:	46ac      	mov	ip, r5
 8006014:	f04f 0800 	mov.w	r8, #0
 8006018:	f859 4b04 	ldr.w	r4, [r9], #4
 800601c:	f8dc a000 	ldr.w	sl, [ip]
 8006020:	b2a3      	uxth	r3, r4
 8006022:	fa1f fa8a 	uxth.w	sl, sl
 8006026:	fb0b a303 	mla	r3, fp, r3, sl
 800602a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800602e:	f8dc 4000 	ldr.w	r4, [ip]
 8006032:	4443      	add	r3, r8
 8006034:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006038:	fb0b 840a 	mla	r4, fp, sl, r8
 800603c:	46e2      	mov	sl, ip
 800603e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006042:	b29b      	uxth	r3, r3
 8006044:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006048:	454f      	cmp	r7, r9
 800604a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800604e:	f84a 3b04 	str.w	r3, [sl], #4
 8006052:	d82b      	bhi.n	80060ac <__multiply+0x11e>
 8006054:	f8cc 8004 	str.w	r8, [ip, #4]
 8006058:	9b01      	ldr	r3, [sp, #4]
 800605a:	3204      	adds	r2, #4
 800605c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006060:	f1ba 0f00 	cmp.w	sl, #0
 8006064:	d020      	beq.n	80060a8 <__multiply+0x11a>
 8006066:	4689      	mov	r9, r1
 8006068:	46a8      	mov	r8, r5
 800606a:	f04f 0b00 	mov.w	fp, #0
 800606e:	682b      	ldr	r3, [r5, #0]
 8006070:	f8b9 c000 	ldrh.w	ip, [r9]
 8006074:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006078:	b29b      	uxth	r3, r3
 800607a:	fb0a 440c 	mla	r4, sl, ip, r4
 800607e:	46c4      	mov	ip, r8
 8006080:	445c      	add	r4, fp
 8006082:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006086:	f84c 3b04 	str.w	r3, [ip], #4
 800608a:	f859 3b04 	ldr.w	r3, [r9], #4
 800608e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006092:	0c1b      	lsrs	r3, r3, #16
 8006094:	fb0a b303 	mla	r3, sl, r3, fp
 8006098:	454f      	cmp	r7, r9
 800609a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800609e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80060a2:	d805      	bhi.n	80060b0 <__multiply+0x122>
 80060a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80060a8:	3504      	adds	r5, #4
 80060aa:	e79b      	b.n	8005fe4 <__multiply+0x56>
 80060ac:	46d4      	mov	ip, sl
 80060ae:	e7b3      	b.n	8006018 <__multiply+0x8a>
 80060b0:	46e0      	mov	r8, ip
 80060b2:	e7dd      	b.n	8006070 <__multiply+0xe2>
 80060b4:	3e01      	subs	r6, #1
 80060b6:	e799      	b.n	8005fec <__multiply+0x5e>

080060b8 <__pow5mult>:
 80060b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060bc:	4615      	mov	r5, r2
 80060be:	f012 0203 	ands.w	r2, r2, #3
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	d007      	beq.n	80060d8 <__pow5mult+0x20>
 80060c8:	4c21      	ldr	r4, [pc, #132]	; (8006150 <__pow5mult+0x98>)
 80060ca:	3a01      	subs	r2, #1
 80060cc:	2300      	movs	r3, #0
 80060ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060d2:	f7ff feca 	bl	8005e6a <__multadd>
 80060d6:	4607      	mov	r7, r0
 80060d8:	10ad      	asrs	r5, r5, #2
 80060da:	d035      	beq.n	8006148 <__pow5mult+0x90>
 80060dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060de:	b93c      	cbnz	r4, 80060f0 <__pow5mult+0x38>
 80060e0:	2010      	movs	r0, #16
 80060e2:	f7ff fe6f 	bl	8005dc4 <malloc>
 80060e6:	6270      	str	r0, [r6, #36]	; 0x24
 80060e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060ec:	6004      	str	r4, [r0, #0]
 80060ee:	60c4      	str	r4, [r0, #12]
 80060f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060f8:	b94c      	cbnz	r4, 800610e <__pow5mult+0x56>
 80060fa:	f240 2171 	movw	r1, #625	; 0x271
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff ff3c 	bl	8005f7c <__i2b>
 8006104:	2300      	movs	r3, #0
 8006106:	4604      	mov	r4, r0
 8006108:	f8c8 0008 	str.w	r0, [r8, #8]
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	f04f 0800 	mov.w	r8, #0
 8006112:	07eb      	lsls	r3, r5, #31
 8006114:	d50a      	bpl.n	800612c <__pow5mult+0x74>
 8006116:	4639      	mov	r1, r7
 8006118:	4622      	mov	r2, r4
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ff37 	bl	8005f8e <__multiply>
 8006120:	4681      	mov	r9, r0
 8006122:	4639      	mov	r1, r7
 8006124:	4630      	mov	r0, r6
 8006126:	f7ff fe89 	bl	8005e3c <_Bfree>
 800612a:	464f      	mov	r7, r9
 800612c:	106d      	asrs	r5, r5, #1
 800612e:	d00b      	beq.n	8006148 <__pow5mult+0x90>
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	b938      	cbnz	r0, 8006144 <__pow5mult+0x8c>
 8006134:	4622      	mov	r2, r4
 8006136:	4621      	mov	r1, r4
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff ff28 	bl	8005f8e <__multiply>
 800613e:	6020      	str	r0, [r4, #0]
 8006140:	f8c0 8000 	str.w	r8, [r0]
 8006144:	4604      	mov	r4, r0
 8006146:	e7e4      	b.n	8006112 <__pow5mult+0x5a>
 8006148:	4638      	mov	r0, r7
 800614a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614e:	bf00      	nop
 8006150:	08007640 	.word	0x08007640

08006154 <__lshift>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	460c      	mov	r4, r1
 800615a:	4607      	mov	r7, r0
 800615c:	4616      	mov	r6, r2
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006164:	eb0a 0903 	add.w	r9, sl, r3
 8006168:	6849      	ldr	r1, [r1, #4]
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	f109 0501 	add.w	r5, r9, #1
 8006170:	42ab      	cmp	r3, r5
 8006172:	db32      	blt.n	80061da <__lshift+0x86>
 8006174:	4638      	mov	r0, r7
 8006176:	f7ff fe2d 	bl	8005dd4 <_Balloc>
 800617a:	2300      	movs	r3, #0
 800617c:	4680      	mov	r8, r0
 800617e:	461a      	mov	r2, r3
 8006180:	f100 0114 	add.w	r1, r0, #20
 8006184:	4553      	cmp	r3, sl
 8006186:	db2b      	blt.n	80061e0 <__lshift+0x8c>
 8006188:	6920      	ldr	r0, [r4, #16]
 800618a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800618e:	f104 0314 	add.w	r3, r4, #20
 8006192:	f016 021f 	ands.w	r2, r6, #31
 8006196:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800619a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800619e:	d025      	beq.n	80061ec <__lshift+0x98>
 80061a0:	2000      	movs	r0, #0
 80061a2:	f1c2 0e20 	rsb	lr, r2, #32
 80061a6:	468a      	mov	sl, r1
 80061a8:	681e      	ldr	r6, [r3, #0]
 80061aa:	4096      	lsls	r6, r2
 80061ac:	4330      	orrs	r0, r6
 80061ae:	f84a 0b04 	str.w	r0, [sl], #4
 80061b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80061b6:	459c      	cmp	ip, r3
 80061b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80061bc:	d814      	bhi.n	80061e8 <__lshift+0x94>
 80061be:	6048      	str	r0, [r1, #4]
 80061c0:	b108      	cbz	r0, 80061c6 <__lshift+0x72>
 80061c2:	f109 0502 	add.w	r5, r9, #2
 80061c6:	3d01      	subs	r5, #1
 80061c8:	4638      	mov	r0, r7
 80061ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80061ce:	4621      	mov	r1, r4
 80061d0:	f7ff fe34 	bl	8005e3c <_Bfree>
 80061d4:	4640      	mov	r0, r8
 80061d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061da:	3101      	adds	r1, #1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	e7c7      	b.n	8006170 <__lshift+0x1c>
 80061e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80061e4:	3301      	adds	r3, #1
 80061e6:	e7cd      	b.n	8006184 <__lshift+0x30>
 80061e8:	4651      	mov	r1, sl
 80061ea:	e7dc      	b.n	80061a6 <__lshift+0x52>
 80061ec:	3904      	subs	r1, #4
 80061ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f2:	459c      	cmp	ip, r3
 80061f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80061f8:	d8f9      	bhi.n	80061ee <__lshift+0x9a>
 80061fa:	e7e4      	b.n	80061c6 <__lshift+0x72>

080061fc <__mcmp>:
 80061fc:	6903      	ldr	r3, [r0, #16]
 80061fe:	690a      	ldr	r2, [r1, #16]
 8006200:	b530      	push	{r4, r5, lr}
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	d10c      	bne.n	8006220 <__mcmp+0x24>
 8006206:	0092      	lsls	r2, r2, #2
 8006208:	3014      	adds	r0, #20
 800620a:	3114      	adds	r1, #20
 800620c:	1884      	adds	r4, r0, r2
 800620e:	4411      	add	r1, r2
 8006210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006218:	4295      	cmp	r5, r2
 800621a:	d003      	beq.n	8006224 <__mcmp+0x28>
 800621c:	d305      	bcc.n	800622a <__mcmp+0x2e>
 800621e:	2301      	movs	r3, #1
 8006220:	4618      	mov	r0, r3
 8006222:	bd30      	pop	{r4, r5, pc}
 8006224:	42a0      	cmp	r0, r4
 8006226:	d3f3      	bcc.n	8006210 <__mcmp+0x14>
 8006228:	e7fa      	b.n	8006220 <__mcmp+0x24>
 800622a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800622e:	e7f7      	b.n	8006220 <__mcmp+0x24>

08006230 <__mdiff>:
 8006230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	460d      	mov	r5, r1
 8006236:	4607      	mov	r7, r0
 8006238:	4611      	mov	r1, r2
 800623a:	4628      	mov	r0, r5
 800623c:	4614      	mov	r4, r2
 800623e:	f7ff ffdd 	bl	80061fc <__mcmp>
 8006242:	1e06      	subs	r6, r0, #0
 8006244:	d108      	bne.n	8006258 <__mdiff+0x28>
 8006246:	4631      	mov	r1, r6
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff fdc3 	bl	8005dd4 <_Balloc>
 800624e:	2301      	movs	r3, #1
 8006250:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	bfa4      	itt	ge
 800625a:	4623      	movge	r3, r4
 800625c:	462c      	movge	r4, r5
 800625e:	4638      	mov	r0, r7
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	bfa6      	itte	ge
 8006264:	461d      	movge	r5, r3
 8006266:	2600      	movge	r6, #0
 8006268:	2601      	movlt	r6, #1
 800626a:	f7ff fdb3 	bl	8005dd4 <_Balloc>
 800626e:	f04f 0e00 	mov.w	lr, #0
 8006272:	60c6      	str	r6, [r0, #12]
 8006274:	692b      	ldr	r3, [r5, #16]
 8006276:	6926      	ldr	r6, [r4, #16]
 8006278:	f104 0214 	add.w	r2, r4, #20
 800627c:	f105 0914 	add.w	r9, r5, #20
 8006280:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006284:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006288:	f100 0114 	add.w	r1, r0, #20
 800628c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006290:	f859 5b04 	ldr.w	r5, [r9], #4
 8006294:	fa1f f38a 	uxth.w	r3, sl
 8006298:	4473      	add	r3, lr
 800629a:	b2ac      	uxth	r4, r5
 800629c:	1b1b      	subs	r3, r3, r4
 800629e:	0c2c      	lsrs	r4, r5, #16
 80062a0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80062a4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80062ae:	45c8      	cmp	r8, r9
 80062b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80062b4:	4694      	mov	ip, r2
 80062b6:	f841 4b04 	str.w	r4, [r1], #4
 80062ba:	d8e7      	bhi.n	800628c <__mdiff+0x5c>
 80062bc:	45bc      	cmp	ip, r7
 80062be:	d304      	bcc.n	80062ca <__mdiff+0x9a>
 80062c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80062c4:	b183      	cbz	r3, 80062e8 <__mdiff+0xb8>
 80062c6:	6106      	str	r6, [r0, #16]
 80062c8:	e7c4      	b.n	8006254 <__mdiff+0x24>
 80062ca:	f85c 4b04 	ldr.w	r4, [ip], #4
 80062ce:	b2a2      	uxth	r2, r4
 80062d0:	4472      	add	r2, lr
 80062d2:	1413      	asrs	r3, r2, #16
 80062d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80062d8:	b292      	uxth	r2, r2
 80062da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062de:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80062e2:	f841 2b04 	str.w	r2, [r1], #4
 80062e6:	e7e9      	b.n	80062bc <__mdiff+0x8c>
 80062e8:	3e01      	subs	r6, #1
 80062ea:	e7e9      	b.n	80062c0 <__mdiff+0x90>

080062ec <__d2b>:
 80062ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062f0:	461c      	mov	r4, r3
 80062f2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80062f6:	2101      	movs	r1, #1
 80062f8:	4690      	mov	r8, r2
 80062fa:	f7ff fd6b 	bl	8005dd4 <_Balloc>
 80062fe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006302:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006306:	4607      	mov	r7, r0
 8006308:	bb34      	cbnz	r4, 8006358 <__d2b+0x6c>
 800630a:	9201      	str	r2, [sp, #4]
 800630c:	f1b8 0200 	subs.w	r2, r8, #0
 8006310:	d027      	beq.n	8006362 <__d2b+0x76>
 8006312:	a802      	add	r0, sp, #8
 8006314:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006318:	f7ff fe01 	bl	8005f1e <__lo0bits>
 800631c:	9900      	ldr	r1, [sp, #0]
 800631e:	b1f0      	cbz	r0, 800635e <__d2b+0x72>
 8006320:	9a01      	ldr	r2, [sp, #4]
 8006322:	f1c0 0320 	rsb	r3, r0, #32
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	430b      	orrs	r3, r1
 800632c:	40c2      	lsrs	r2, r0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	9201      	str	r2, [sp, #4]
 8006332:	9b01      	ldr	r3, [sp, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf14      	ite	ne
 8006338:	2102      	movne	r1, #2
 800633a:	2101      	moveq	r1, #1
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	6139      	str	r1, [r7, #16]
 8006340:	b1c4      	cbz	r4, 8006374 <__d2b+0x88>
 8006342:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006346:	4404      	add	r4, r0
 8006348:	6034      	str	r4, [r6, #0]
 800634a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800634e:	6028      	str	r0, [r5, #0]
 8006350:	4638      	mov	r0, r7
 8006352:	b002      	add	sp, #8
 8006354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006358:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800635c:	e7d5      	b.n	800630a <__d2b+0x1e>
 800635e:	6179      	str	r1, [r7, #20]
 8006360:	e7e7      	b.n	8006332 <__d2b+0x46>
 8006362:	a801      	add	r0, sp, #4
 8006364:	f7ff fddb 	bl	8005f1e <__lo0bits>
 8006368:	2101      	movs	r1, #1
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	6139      	str	r1, [r7, #16]
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	3020      	adds	r0, #32
 8006372:	e7e5      	b.n	8006340 <__d2b+0x54>
 8006374:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006378:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800637c:	6030      	str	r0, [r6, #0]
 800637e:	6918      	ldr	r0, [r3, #16]
 8006380:	f7ff fdae 	bl	8005ee0 <__hi0bits>
 8006384:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006388:	e7e1      	b.n	800634e <__d2b+0x62>

0800638a <_calloc_r>:
 800638a:	b538      	push	{r3, r4, r5, lr}
 800638c:	fb02 f401 	mul.w	r4, r2, r1
 8006390:	4621      	mov	r1, r4
 8006392:	f000 f809 	bl	80063a8 <_malloc_r>
 8006396:	4605      	mov	r5, r0
 8006398:	b118      	cbz	r0, 80063a2 <_calloc_r+0x18>
 800639a:	4622      	mov	r2, r4
 800639c:	2100      	movs	r1, #0
 800639e:	f7fe fb7a 	bl	8004a96 <memset>
 80063a2:	4628      	mov	r0, r5
 80063a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080063a8 <_malloc_r>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	1ccd      	adds	r5, r1, #3
 80063ac:	f025 0503 	bic.w	r5, r5, #3
 80063b0:	3508      	adds	r5, #8
 80063b2:	2d0c      	cmp	r5, #12
 80063b4:	bf38      	it	cc
 80063b6:	250c      	movcc	r5, #12
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	4606      	mov	r6, r0
 80063bc:	db01      	blt.n	80063c2 <_malloc_r+0x1a>
 80063be:	42a9      	cmp	r1, r5
 80063c0:	d903      	bls.n	80063ca <_malloc_r+0x22>
 80063c2:	230c      	movs	r3, #12
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	2000      	movs	r0, #0
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
 80063ca:	f000 f869 	bl	80064a0 <__malloc_lock>
 80063ce:	4a21      	ldr	r2, [pc, #132]	; (8006454 <_malloc_r+0xac>)
 80063d0:	6814      	ldr	r4, [r2, #0]
 80063d2:	4621      	mov	r1, r4
 80063d4:	b991      	cbnz	r1, 80063fc <_malloc_r+0x54>
 80063d6:	4c20      	ldr	r4, [pc, #128]	; (8006458 <_malloc_r+0xb0>)
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	b91b      	cbnz	r3, 80063e4 <_malloc_r+0x3c>
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 f83d 	bl	800645c <_sbrk_r>
 80063e2:	6020      	str	r0, [r4, #0]
 80063e4:	4629      	mov	r1, r5
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 f838 	bl	800645c <_sbrk_r>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d124      	bne.n	800643a <_malloc_r+0x92>
 80063f0:	230c      	movs	r3, #12
 80063f2:	4630      	mov	r0, r6
 80063f4:	6033      	str	r3, [r6, #0]
 80063f6:	f000 f854 	bl	80064a2 <__malloc_unlock>
 80063fa:	e7e4      	b.n	80063c6 <_malloc_r+0x1e>
 80063fc:	680b      	ldr	r3, [r1, #0]
 80063fe:	1b5b      	subs	r3, r3, r5
 8006400:	d418      	bmi.n	8006434 <_malloc_r+0x8c>
 8006402:	2b0b      	cmp	r3, #11
 8006404:	d90f      	bls.n	8006426 <_malloc_r+0x7e>
 8006406:	600b      	str	r3, [r1, #0]
 8006408:	18cc      	adds	r4, r1, r3
 800640a:	50cd      	str	r5, [r1, r3]
 800640c:	4630      	mov	r0, r6
 800640e:	f000 f848 	bl	80064a2 <__malloc_unlock>
 8006412:	f104 000b 	add.w	r0, r4, #11
 8006416:	1d23      	adds	r3, r4, #4
 8006418:	f020 0007 	bic.w	r0, r0, #7
 800641c:	1ac3      	subs	r3, r0, r3
 800641e:	d0d3      	beq.n	80063c8 <_malloc_r+0x20>
 8006420:	425a      	negs	r2, r3
 8006422:	50e2      	str	r2, [r4, r3]
 8006424:	e7d0      	b.n	80063c8 <_malloc_r+0x20>
 8006426:	684b      	ldr	r3, [r1, #4]
 8006428:	428c      	cmp	r4, r1
 800642a:	bf16      	itet	ne
 800642c:	6063      	strne	r3, [r4, #4]
 800642e:	6013      	streq	r3, [r2, #0]
 8006430:	460c      	movne	r4, r1
 8006432:	e7eb      	b.n	800640c <_malloc_r+0x64>
 8006434:	460c      	mov	r4, r1
 8006436:	6849      	ldr	r1, [r1, #4]
 8006438:	e7cc      	b.n	80063d4 <_malloc_r+0x2c>
 800643a:	1cc4      	adds	r4, r0, #3
 800643c:	f024 0403 	bic.w	r4, r4, #3
 8006440:	42a0      	cmp	r0, r4
 8006442:	d005      	beq.n	8006450 <_malloc_r+0xa8>
 8006444:	1a21      	subs	r1, r4, r0
 8006446:	4630      	mov	r0, r6
 8006448:	f000 f808 	bl	800645c <_sbrk_r>
 800644c:	3001      	adds	r0, #1
 800644e:	d0cf      	beq.n	80063f0 <_malloc_r+0x48>
 8006450:	6025      	str	r5, [r4, #0]
 8006452:	e7db      	b.n	800640c <_malloc_r+0x64>
 8006454:	2000020c 	.word	0x2000020c
 8006458:	20000210 	.word	0x20000210

0800645c <_sbrk_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	2300      	movs	r3, #0
 8006460:	4c05      	ldr	r4, [pc, #20]	; (8006478 <_sbrk_r+0x1c>)
 8006462:	4605      	mov	r5, r0
 8006464:	4608      	mov	r0, r1
 8006466:	6023      	str	r3, [r4, #0]
 8006468:	f7fb ff4c 	bl	8002304 <_sbrk>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_sbrk_r+0x1a>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	b103      	cbz	r3, 8006476 <_sbrk_r+0x1a>
 8006474:	602b      	str	r3, [r5, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20000be0 	.word	0x20000be0

0800647c <__ascii_mbtowc>:
 800647c:	b082      	sub	sp, #8
 800647e:	b901      	cbnz	r1, 8006482 <__ascii_mbtowc+0x6>
 8006480:	a901      	add	r1, sp, #4
 8006482:	b142      	cbz	r2, 8006496 <__ascii_mbtowc+0x1a>
 8006484:	b14b      	cbz	r3, 800649a <__ascii_mbtowc+0x1e>
 8006486:	7813      	ldrb	r3, [r2, #0]
 8006488:	600b      	str	r3, [r1, #0]
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	1c10      	adds	r0, r2, #0
 800648e:	bf18      	it	ne
 8006490:	2001      	movne	r0, #1
 8006492:	b002      	add	sp, #8
 8006494:	4770      	bx	lr
 8006496:	4610      	mov	r0, r2
 8006498:	e7fb      	b.n	8006492 <__ascii_mbtowc+0x16>
 800649a:	f06f 0001 	mvn.w	r0, #1
 800649e:	e7f8      	b.n	8006492 <__ascii_mbtowc+0x16>

080064a0 <__malloc_lock>:
 80064a0:	4770      	bx	lr

080064a2 <__malloc_unlock>:
 80064a2:	4770      	bx	lr

080064a4 <__ascii_wctomb>:
 80064a4:	b149      	cbz	r1, 80064ba <__ascii_wctomb+0x16>
 80064a6:	2aff      	cmp	r2, #255	; 0xff
 80064a8:	bf8b      	itete	hi
 80064aa:	238a      	movhi	r3, #138	; 0x8a
 80064ac:	700a      	strbls	r2, [r1, #0]
 80064ae:	6003      	strhi	r3, [r0, #0]
 80064b0:	2001      	movls	r0, #1
 80064b2:	bf88      	it	hi
 80064b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80064b8:	4770      	bx	lr
 80064ba:	4608      	mov	r0, r1
 80064bc:	4770      	bx	lr
	...

080064c0 <floor>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80064c8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80064cc:	2e13      	cmp	r6, #19
 80064ce:	4607      	mov	r7, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	460c      	mov	r4, r1
 80064d4:	4605      	mov	r5, r0
 80064d6:	dc35      	bgt.n	8006544 <floor+0x84>
 80064d8:	2e00      	cmp	r6, #0
 80064da:	da16      	bge.n	800650a <floor+0x4a>
 80064dc:	a336      	add	r3, pc, #216	; (adr r3, 80065b8 <floor+0xf8>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7f9 fe43 	bl	800016c <__adddf3>
 80064e6:	2200      	movs	r2, #0
 80064e8:	2300      	movs	r3, #0
 80064ea:	f7fa fa85 	bl	80009f8 <__aeabi_dcmpgt>
 80064ee:	b148      	cbz	r0, 8006504 <floor+0x44>
 80064f0:	2c00      	cmp	r4, #0
 80064f2:	da5b      	bge.n	80065ac <floor+0xec>
 80064f4:	2500      	movs	r5, #0
 80064f6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80064fa:	4a31      	ldr	r2, [pc, #196]	; (80065c0 <floor+0x100>)
 80064fc:	433b      	orrs	r3, r7
 80064fe:	42ab      	cmp	r3, r5
 8006500:	bf18      	it	ne
 8006502:	4614      	movne	r4, r2
 8006504:	4623      	mov	r3, r4
 8006506:	462f      	mov	r7, r5
 8006508:	e026      	b.n	8006558 <floor+0x98>
 800650a:	4a2e      	ldr	r2, [pc, #184]	; (80065c4 <floor+0x104>)
 800650c:	fa42 f806 	asr.w	r8, r2, r6
 8006510:	ea01 0208 	and.w	r2, r1, r8
 8006514:	4302      	orrs	r2, r0
 8006516:	d01f      	beq.n	8006558 <floor+0x98>
 8006518:	a327      	add	r3, pc, #156	; (adr r3, 80065b8 <floor+0xf8>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7f9 fe25 	bl	800016c <__adddf3>
 8006522:	2200      	movs	r2, #0
 8006524:	2300      	movs	r3, #0
 8006526:	f7fa fa67 	bl	80009f8 <__aeabi_dcmpgt>
 800652a:	2800      	cmp	r0, #0
 800652c:	d0ea      	beq.n	8006504 <floor+0x44>
 800652e:	2c00      	cmp	r4, #0
 8006530:	bfbe      	ittt	lt
 8006532:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006536:	fa43 f606 	asrlt.w	r6, r3, r6
 800653a:	19a4      	addlt	r4, r4, r6
 800653c:	ea24 0408 	bic.w	r4, r4, r8
 8006540:	2500      	movs	r5, #0
 8006542:	e7df      	b.n	8006504 <floor+0x44>
 8006544:	2e33      	cmp	r6, #51	; 0x33
 8006546:	dd0b      	ble.n	8006560 <floor+0xa0>
 8006548:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800654c:	d104      	bne.n	8006558 <floor+0x98>
 800654e:	4602      	mov	r2, r0
 8006550:	f7f9 fe0c 	bl	800016c <__adddf3>
 8006554:	4607      	mov	r7, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4638      	mov	r0, r7
 800655a:	4619      	mov	r1, r3
 800655c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006564:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006568:	fa22 f808 	lsr.w	r8, r2, r8
 800656c:	ea18 0f00 	tst.w	r8, r0
 8006570:	d0f2      	beq.n	8006558 <floor+0x98>
 8006572:	a311      	add	r3, pc, #68	; (adr r3, 80065b8 <floor+0xf8>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7f9 fdf8 	bl	800016c <__adddf3>
 800657c:	2200      	movs	r2, #0
 800657e:	2300      	movs	r3, #0
 8006580:	f7fa fa3a 	bl	80009f8 <__aeabi_dcmpgt>
 8006584:	2800      	cmp	r0, #0
 8006586:	d0bd      	beq.n	8006504 <floor+0x44>
 8006588:	2c00      	cmp	r4, #0
 800658a:	da02      	bge.n	8006592 <floor+0xd2>
 800658c:	2e14      	cmp	r6, #20
 800658e:	d103      	bne.n	8006598 <floor+0xd8>
 8006590:	3401      	adds	r4, #1
 8006592:	ea25 0508 	bic.w	r5, r5, r8
 8006596:	e7b5      	b.n	8006504 <floor+0x44>
 8006598:	2301      	movs	r3, #1
 800659a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800659e:	fa03 f606 	lsl.w	r6, r3, r6
 80065a2:	4435      	add	r5, r6
 80065a4:	42bd      	cmp	r5, r7
 80065a6:	bf38      	it	cc
 80065a8:	18e4      	addcc	r4, r4, r3
 80065aa:	e7f2      	b.n	8006592 <floor+0xd2>
 80065ac:	2500      	movs	r5, #0
 80065ae:	462c      	mov	r4, r5
 80065b0:	e7a8      	b.n	8006504 <floor+0x44>
 80065b2:	bf00      	nop
 80065b4:	f3af 8000 	nop.w
 80065b8:	8800759c 	.word	0x8800759c
 80065bc:	7e37e43c 	.word	0x7e37e43c
 80065c0:	bff00000 	.word	0xbff00000
 80065c4:	000fffff 	.word	0x000fffff

080065c8 <round>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80065ce:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80065d2:	2c13      	cmp	r4, #19
 80065d4:	4606      	mov	r6, r0
 80065d6:	460d      	mov	r5, r1
 80065d8:	460b      	mov	r3, r1
 80065da:	468c      	mov	ip, r1
 80065dc:	4602      	mov	r2, r0
 80065de:	dc17      	bgt.n	8006610 <round+0x48>
 80065e0:	2c00      	cmp	r4, #0
 80065e2:	da09      	bge.n	80065f8 <round+0x30>
 80065e4:	3401      	adds	r4, #1
 80065e6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80065ea:	d103      	bne.n	80065f4 <round+0x2c>
 80065ec:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80065f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80065f4:	2200      	movs	r2, #0
 80065f6:	e028      	b.n	800664a <round+0x82>
 80065f8:	4915      	ldr	r1, [pc, #84]	; (8006650 <round+0x88>)
 80065fa:	4121      	asrs	r1, r4
 80065fc:	420d      	tst	r5, r1
 80065fe:	d100      	bne.n	8006602 <round+0x3a>
 8006600:	b178      	cbz	r0, 8006622 <round+0x5a>
 8006602:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006606:	4123      	asrs	r3, r4
 8006608:	4463      	add	r3, ip
 800660a:	ea23 0301 	bic.w	r3, r3, r1
 800660e:	e7f1      	b.n	80065f4 <round+0x2c>
 8006610:	2c33      	cmp	r4, #51	; 0x33
 8006612:	dd09      	ble.n	8006628 <round+0x60>
 8006614:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006618:	d103      	bne.n	8006622 <round+0x5a>
 800661a:	f7f9 fda7 	bl	800016c <__adddf3>
 800661e:	4606      	mov	r6, r0
 8006620:	460d      	mov	r5, r1
 8006622:	4630      	mov	r0, r6
 8006624:	4629      	mov	r1, r5
 8006626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006630:	40f8      	lsrs	r0, r7
 8006632:	4206      	tst	r6, r0
 8006634:	d0f5      	beq.n	8006622 <round+0x5a>
 8006636:	2101      	movs	r1, #1
 8006638:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800663c:	fa01 f404 	lsl.w	r4, r1, r4
 8006640:	1932      	adds	r2, r6, r4
 8006642:	bf28      	it	cs
 8006644:	185b      	addcs	r3, r3, r1
 8006646:	ea22 0200 	bic.w	r2, r2, r0
 800664a:	4619      	mov	r1, r3
 800664c:	4610      	mov	r0, r2
 800664e:	e7e6      	b.n	800661e <round+0x56>
 8006650:	000fffff 	.word	0x000fffff

08006654 <sinf>:
 8006654:	b507      	push	{r0, r1, r2, lr}
 8006656:	4a19      	ldr	r2, [pc, #100]	; (80066bc <sinf+0x68>)
 8006658:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800665c:	4293      	cmp	r3, r2
 800665e:	4601      	mov	r1, r0
 8006660:	dc04      	bgt.n	800666c <sinf+0x18>
 8006662:	2200      	movs	r2, #0
 8006664:	2100      	movs	r1, #0
 8006666:	f000 fca1 	bl	8006fac <__kernel_sinf>
 800666a:	e004      	b.n	8006676 <sinf+0x22>
 800666c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006670:	db04      	blt.n	800667c <sinf+0x28>
 8006672:	f7fa fa7d 	bl	8000b70 <__aeabi_fsub>
 8006676:	b003      	add	sp, #12
 8006678:	f85d fb04 	ldr.w	pc, [sp], #4
 800667c:	4669      	mov	r1, sp
 800667e:	f000 f81f 	bl	80066c0 <__ieee754_rem_pio2f>
 8006682:	f000 0003 	and.w	r0, r0, #3
 8006686:	2801      	cmp	r0, #1
 8006688:	d006      	beq.n	8006698 <sinf+0x44>
 800668a:	2802      	cmp	r0, #2
 800668c:	d009      	beq.n	80066a2 <sinf+0x4e>
 800668e:	b980      	cbnz	r0, 80066b2 <sinf+0x5e>
 8006690:	2201      	movs	r2, #1
 8006692:	9901      	ldr	r1, [sp, #4]
 8006694:	9800      	ldr	r0, [sp, #0]
 8006696:	e7e6      	b.n	8006666 <sinf+0x12>
 8006698:	9901      	ldr	r1, [sp, #4]
 800669a:	9800      	ldr	r0, [sp, #0]
 800669c:	f000 f968 	bl	8006970 <__kernel_cosf>
 80066a0:	e7e9      	b.n	8006676 <sinf+0x22>
 80066a2:	2201      	movs	r2, #1
 80066a4:	9901      	ldr	r1, [sp, #4]
 80066a6:	9800      	ldr	r0, [sp, #0]
 80066a8:	f000 fc80 	bl	8006fac <__kernel_sinf>
 80066ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80066b0:	e7e1      	b.n	8006676 <sinf+0x22>
 80066b2:	9901      	ldr	r1, [sp, #4]
 80066b4:	9800      	ldr	r0, [sp, #0]
 80066b6:	f000 f95b 	bl	8006970 <__kernel_cosf>
 80066ba:	e7f7      	b.n	80066ac <sinf+0x58>
 80066bc:	3f490fd8 	.word	0x3f490fd8

080066c0 <__ieee754_rem_pio2f>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	4a9d      	ldr	r2, [pc, #628]	; (800693c <__ieee754_rem_pio2f+0x27c>)
 80066c6:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80066ca:	4295      	cmp	r5, r2
 80066cc:	b087      	sub	sp, #28
 80066ce:	460c      	mov	r4, r1
 80066d0:	4607      	mov	r7, r0
 80066d2:	dc04      	bgt.n	80066de <__ieee754_rem_pio2f+0x1e>
 80066d4:	2300      	movs	r3, #0
 80066d6:	6020      	str	r0, [r4, #0]
 80066d8:	604b      	str	r3, [r1, #4]
 80066da:	2600      	movs	r6, #0
 80066dc:	e01a      	b.n	8006714 <__ieee754_rem_pio2f+0x54>
 80066de:	4a98      	ldr	r2, [pc, #608]	; (8006940 <__ieee754_rem_pio2f+0x280>)
 80066e0:	4295      	cmp	r5, r2
 80066e2:	dc4b      	bgt.n	800677c <__ieee754_rem_pio2f+0xbc>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f025 050f 	bic.w	r5, r5, #15
 80066ea:	4996      	ldr	r1, [pc, #600]	; (8006944 <__ieee754_rem_pio2f+0x284>)
 80066ec:	4e96      	ldr	r6, [pc, #600]	; (8006948 <__ieee754_rem_pio2f+0x288>)
 80066ee:	dd23      	ble.n	8006738 <__ieee754_rem_pio2f+0x78>
 80066f0:	f7fa fa3e 	bl	8000b70 <__aeabi_fsub>
 80066f4:	42b5      	cmp	r5, r6
 80066f6:	4607      	mov	r7, r0
 80066f8:	d010      	beq.n	800671c <__ieee754_rem_pio2f+0x5c>
 80066fa:	4994      	ldr	r1, [pc, #592]	; (800694c <__ieee754_rem_pio2f+0x28c>)
 80066fc:	f7fa fa38 	bl	8000b70 <__aeabi_fsub>
 8006700:	4601      	mov	r1, r0
 8006702:	6020      	str	r0, [r4, #0]
 8006704:	4638      	mov	r0, r7
 8006706:	f7fa fa33 	bl	8000b70 <__aeabi_fsub>
 800670a:	4990      	ldr	r1, [pc, #576]	; (800694c <__ieee754_rem_pio2f+0x28c>)
 800670c:	f7fa fa30 	bl	8000b70 <__aeabi_fsub>
 8006710:	2601      	movs	r6, #1
 8006712:	6060      	str	r0, [r4, #4]
 8006714:	4630      	mov	r0, r6
 8006716:	b007      	add	sp, #28
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	498c      	ldr	r1, [pc, #560]	; (8006950 <__ieee754_rem_pio2f+0x290>)
 800671e:	f7fa fa27 	bl	8000b70 <__aeabi_fsub>
 8006722:	498c      	ldr	r1, [pc, #560]	; (8006954 <__ieee754_rem_pio2f+0x294>)
 8006724:	4605      	mov	r5, r0
 8006726:	f7fa fa23 	bl	8000b70 <__aeabi_fsub>
 800672a:	4601      	mov	r1, r0
 800672c:	6020      	str	r0, [r4, #0]
 800672e:	4628      	mov	r0, r5
 8006730:	f7fa fa1e 	bl	8000b70 <__aeabi_fsub>
 8006734:	4987      	ldr	r1, [pc, #540]	; (8006954 <__ieee754_rem_pio2f+0x294>)
 8006736:	e7e9      	b.n	800670c <__ieee754_rem_pio2f+0x4c>
 8006738:	f7fa fa1c 	bl	8000b74 <__addsf3>
 800673c:	42b5      	cmp	r5, r6
 800673e:	4607      	mov	r7, r0
 8006740:	d00e      	beq.n	8006760 <__ieee754_rem_pio2f+0xa0>
 8006742:	4982      	ldr	r1, [pc, #520]	; (800694c <__ieee754_rem_pio2f+0x28c>)
 8006744:	f7fa fa16 	bl	8000b74 <__addsf3>
 8006748:	4601      	mov	r1, r0
 800674a:	6020      	str	r0, [r4, #0]
 800674c:	4638      	mov	r0, r7
 800674e:	f7fa fa0f 	bl	8000b70 <__aeabi_fsub>
 8006752:	497e      	ldr	r1, [pc, #504]	; (800694c <__ieee754_rem_pio2f+0x28c>)
 8006754:	f7fa fa0e 	bl	8000b74 <__addsf3>
 8006758:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800675c:	6060      	str	r0, [r4, #4]
 800675e:	e7d9      	b.n	8006714 <__ieee754_rem_pio2f+0x54>
 8006760:	497b      	ldr	r1, [pc, #492]	; (8006950 <__ieee754_rem_pio2f+0x290>)
 8006762:	f7fa fa07 	bl	8000b74 <__addsf3>
 8006766:	497b      	ldr	r1, [pc, #492]	; (8006954 <__ieee754_rem_pio2f+0x294>)
 8006768:	4605      	mov	r5, r0
 800676a:	f7fa fa03 	bl	8000b74 <__addsf3>
 800676e:	4601      	mov	r1, r0
 8006770:	6020      	str	r0, [r4, #0]
 8006772:	4628      	mov	r0, r5
 8006774:	f7fa f9fc 	bl	8000b70 <__aeabi_fsub>
 8006778:	4976      	ldr	r1, [pc, #472]	; (8006954 <__ieee754_rem_pio2f+0x294>)
 800677a:	e7eb      	b.n	8006754 <__ieee754_rem_pio2f+0x94>
 800677c:	4a76      	ldr	r2, [pc, #472]	; (8006958 <__ieee754_rem_pio2f+0x298>)
 800677e:	4295      	cmp	r5, r2
 8006780:	f300 808c 	bgt.w	800689c <__ieee754_rem_pio2f+0x1dc>
 8006784:	f000 fc88 	bl	8007098 <fabsf>
 8006788:	4974      	ldr	r1, [pc, #464]	; (800695c <__ieee754_rem_pio2f+0x29c>)
 800678a:	4680      	mov	r8, r0
 800678c:	f7fa fafa 	bl	8000d84 <__aeabi_fmul>
 8006790:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006794:	f7fa f9ee 	bl	8000b74 <__addsf3>
 8006798:	f7fa fcba 	bl	8001110 <__aeabi_f2iz>
 800679c:	4606      	mov	r6, r0
 800679e:	f7fa fa9d 	bl	8000cdc <__aeabi_i2f>
 80067a2:	4968      	ldr	r1, [pc, #416]	; (8006944 <__ieee754_rem_pio2f+0x284>)
 80067a4:	4682      	mov	sl, r0
 80067a6:	f7fa faed 	bl	8000d84 <__aeabi_fmul>
 80067aa:	4601      	mov	r1, r0
 80067ac:	4640      	mov	r0, r8
 80067ae:	f7fa f9df 	bl	8000b70 <__aeabi_fsub>
 80067b2:	4966      	ldr	r1, [pc, #408]	; (800694c <__ieee754_rem_pio2f+0x28c>)
 80067b4:	4680      	mov	r8, r0
 80067b6:	4650      	mov	r0, sl
 80067b8:	f7fa fae4 	bl	8000d84 <__aeabi_fmul>
 80067bc:	2e1f      	cmp	r6, #31
 80067be:	4681      	mov	r9, r0
 80067c0:	dc0c      	bgt.n	80067dc <__ieee754_rem_pio2f+0x11c>
 80067c2:	4a67      	ldr	r2, [pc, #412]	; (8006960 <__ieee754_rem_pio2f+0x2a0>)
 80067c4:	1e71      	subs	r1, r6, #1
 80067c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80067ca:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <__ieee754_rem_pio2f+0x11c>
 80067d2:	4649      	mov	r1, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	f7fa f9cb 	bl	8000b70 <__aeabi_fsub>
 80067da:	e009      	b.n	80067f0 <__ieee754_rem_pio2f+0x130>
 80067dc:	4649      	mov	r1, r9
 80067de:	4640      	mov	r0, r8
 80067e0:	f7fa f9c6 	bl	8000b70 <__aeabi_fsub>
 80067e4:	15ed      	asrs	r5, r5, #23
 80067e6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80067ea:	1aeb      	subs	r3, r5, r3
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	dc01      	bgt.n	80067f4 <__ieee754_rem_pio2f+0x134>
 80067f0:	6020      	str	r0, [r4, #0]
 80067f2:	e024      	b.n	800683e <__ieee754_rem_pio2f+0x17e>
 80067f4:	4956      	ldr	r1, [pc, #344]	; (8006950 <__ieee754_rem_pio2f+0x290>)
 80067f6:	4650      	mov	r0, sl
 80067f8:	f7fa fac4 	bl	8000d84 <__aeabi_fmul>
 80067fc:	4681      	mov	r9, r0
 80067fe:	4601      	mov	r1, r0
 8006800:	4640      	mov	r0, r8
 8006802:	f7fa f9b5 	bl	8000b70 <__aeabi_fsub>
 8006806:	4601      	mov	r1, r0
 8006808:	4683      	mov	fp, r0
 800680a:	4640      	mov	r0, r8
 800680c:	f7fa f9b0 	bl	8000b70 <__aeabi_fsub>
 8006810:	4649      	mov	r1, r9
 8006812:	f7fa f9ad 	bl	8000b70 <__aeabi_fsub>
 8006816:	4680      	mov	r8, r0
 8006818:	494e      	ldr	r1, [pc, #312]	; (8006954 <__ieee754_rem_pio2f+0x294>)
 800681a:	4650      	mov	r0, sl
 800681c:	f7fa fab2 	bl	8000d84 <__aeabi_fmul>
 8006820:	4641      	mov	r1, r8
 8006822:	f7fa f9a5 	bl	8000b70 <__aeabi_fsub>
 8006826:	4601      	mov	r1, r0
 8006828:	4681      	mov	r9, r0
 800682a:	4658      	mov	r0, fp
 800682c:	f7fa f9a0 	bl	8000b70 <__aeabi_fsub>
 8006830:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006834:	1aed      	subs	r5, r5, r3
 8006836:	2d19      	cmp	r5, #25
 8006838:	dc15      	bgt.n	8006866 <__ieee754_rem_pio2f+0x1a6>
 800683a:	46d8      	mov	r8, fp
 800683c:	6020      	str	r0, [r4, #0]
 800683e:	6825      	ldr	r5, [r4, #0]
 8006840:	4640      	mov	r0, r8
 8006842:	4629      	mov	r1, r5
 8006844:	f7fa f994 	bl	8000b70 <__aeabi_fsub>
 8006848:	4649      	mov	r1, r9
 800684a:	f7fa f991 	bl	8000b70 <__aeabi_fsub>
 800684e:	2f00      	cmp	r7, #0
 8006850:	6060      	str	r0, [r4, #4]
 8006852:	f6bf af5f 	bge.w	8006714 <__ieee754_rem_pio2f+0x54>
 8006856:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800685a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800685e:	6025      	str	r5, [r4, #0]
 8006860:	6060      	str	r0, [r4, #4]
 8006862:	4276      	negs	r6, r6
 8006864:	e756      	b.n	8006714 <__ieee754_rem_pio2f+0x54>
 8006866:	493f      	ldr	r1, [pc, #252]	; (8006964 <__ieee754_rem_pio2f+0x2a4>)
 8006868:	4650      	mov	r0, sl
 800686a:	f7fa fa8b 	bl	8000d84 <__aeabi_fmul>
 800686e:	4605      	mov	r5, r0
 8006870:	4601      	mov	r1, r0
 8006872:	4658      	mov	r0, fp
 8006874:	f7fa f97c 	bl	8000b70 <__aeabi_fsub>
 8006878:	4601      	mov	r1, r0
 800687a:	4680      	mov	r8, r0
 800687c:	4658      	mov	r0, fp
 800687e:	f7fa f977 	bl	8000b70 <__aeabi_fsub>
 8006882:	4629      	mov	r1, r5
 8006884:	f7fa f974 	bl	8000b70 <__aeabi_fsub>
 8006888:	4605      	mov	r5, r0
 800688a:	4937      	ldr	r1, [pc, #220]	; (8006968 <__ieee754_rem_pio2f+0x2a8>)
 800688c:	4650      	mov	r0, sl
 800688e:	f7fa fa79 	bl	8000d84 <__aeabi_fmul>
 8006892:	4629      	mov	r1, r5
 8006894:	f7fa f96c 	bl	8000b70 <__aeabi_fsub>
 8006898:	4681      	mov	r9, r0
 800689a:	e79a      	b.n	80067d2 <__ieee754_rem_pio2f+0x112>
 800689c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80068a0:	db05      	blt.n	80068ae <__ieee754_rem_pio2f+0x1ee>
 80068a2:	4601      	mov	r1, r0
 80068a4:	f7fa f964 	bl	8000b70 <__aeabi_fsub>
 80068a8:	6060      	str	r0, [r4, #4]
 80068aa:	6020      	str	r0, [r4, #0]
 80068ac:	e715      	b.n	80066da <__ieee754_rem_pio2f+0x1a>
 80068ae:	15ee      	asrs	r6, r5, #23
 80068b0:	3e86      	subs	r6, #134	; 0x86
 80068b2:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7fa fc2a 	bl	8001110 <__aeabi_f2iz>
 80068bc:	f7fa fa0e 	bl	8000cdc <__aeabi_i2f>
 80068c0:	4601      	mov	r1, r0
 80068c2:	9003      	str	r0, [sp, #12]
 80068c4:	4628      	mov	r0, r5
 80068c6:	f7fa f953 	bl	8000b70 <__aeabi_fsub>
 80068ca:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80068ce:	f7fa fa59 	bl	8000d84 <__aeabi_fmul>
 80068d2:	4680      	mov	r8, r0
 80068d4:	f7fa fc1c 	bl	8001110 <__aeabi_f2iz>
 80068d8:	f7fa fa00 	bl	8000cdc <__aeabi_i2f>
 80068dc:	4601      	mov	r1, r0
 80068de:	9004      	str	r0, [sp, #16]
 80068e0:	4605      	mov	r5, r0
 80068e2:	4640      	mov	r0, r8
 80068e4:	f7fa f944 	bl	8000b70 <__aeabi_fsub>
 80068e8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80068ec:	f7fa fa4a 	bl	8000d84 <__aeabi_fmul>
 80068f0:	2100      	movs	r1, #0
 80068f2:	9005      	str	r0, [sp, #20]
 80068f4:	f7fa fbda 	bl	80010ac <__aeabi_fcmpeq>
 80068f8:	b1e8      	cbz	r0, 8006936 <__ieee754_rem_pio2f+0x276>
 80068fa:	2100      	movs	r1, #0
 80068fc:	4628      	mov	r0, r5
 80068fe:	f7fa fbd5 	bl	80010ac <__aeabi_fcmpeq>
 8006902:	2800      	cmp	r0, #0
 8006904:	bf14      	ite	ne
 8006906:	2301      	movne	r3, #1
 8006908:	2302      	moveq	r3, #2
 800690a:	4a18      	ldr	r2, [pc, #96]	; (800696c <__ieee754_rem_pio2f+0x2ac>)
 800690c:	4621      	mov	r1, r4
 800690e:	9201      	str	r2, [sp, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	a803      	add	r0, sp, #12
 8006914:	9200      	str	r2, [sp, #0]
 8006916:	4632      	mov	r2, r6
 8006918:	f000 f8aa 	bl	8006a70 <__kernel_rem_pio2f>
 800691c:	2f00      	cmp	r7, #0
 800691e:	4606      	mov	r6, r0
 8006920:	f6bf aef8 	bge.w	8006714 <__ieee754_rem_pio2f+0x54>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	6863      	ldr	r3, [r4, #4]
 800692e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006932:	6063      	str	r3, [r4, #4]
 8006934:	e795      	b.n	8006862 <__ieee754_rem_pio2f+0x1a2>
 8006936:	2303      	movs	r3, #3
 8006938:	e7e7      	b.n	800690a <__ieee754_rem_pio2f+0x24a>
 800693a:	bf00      	nop
 800693c:	3f490fd8 	.word	0x3f490fd8
 8006940:	4016cbe3 	.word	0x4016cbe3
 8006944:	3fc90f80 	.word	0x3fc90f80
 8006948:	3fc90fd0 	.word	0x3fc90fd0
 800694c:	37354443 	.word	0x37354443
 8006950:	37354400 	.word	0x37354400
 8006954:	2e85a308 	.word	0x2e85a308
 8006958:	43490f80 	.word	0x43490f80
 800695c:	3f22f984 	.word	0x3f22f984
 8006960:	08007758 	.word	0x08007758
 8006964:	2e85a300 	.word	0x2e85a300
 8006968:	248d3132 	.word	0x248d3132
 800696c:	080077d8 	.word	0x080077d8

08006970 <__kernel_cosf>:
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006978:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800697c:	4606      	mov	r6, r0
 800697e:	4688      	mov	r8, r1
 8006980:	da03      	bge.n	800698a <__kernel_cosf+0x1a>
 8006982:	f7fa fbc5 	bl	8001110 <__aeabi_f2iz>
 8006986:	2800      	cmp	r0, #0
 8006988:	d05c      	beq.n	8006a44 <__kernel_cosf+0xd4>
 800698a:	4631      	mov	r1, r6
 800698c:	4630      	mov	r0, r6
 800698e:	f7fa f9f9 	bl	8000d84 <__aeabi_fmul>
 8006992:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006996:	4605      	mov	r5, r0
 8006998:	f7fa f9f4 	bl	8000d84 <__aeabi_fmul>
 800699c:	492b      	ldr	r1, [pc, #172]	; (8006a4c <__kernel_cosf+0xdc>)
 800699e:	4607      	mov	r7, r0
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7fa f9ef 	bl	8000d84 <__aeabi_fmul>
 80069a6:	492a      	ldr	r1, [pc, #168]	; (8006a50 <__kernel_cosf+0xe0>)
 80069a8:	f7fa f8e4 	bl	8000b74 <__addsf3>
 80069ac:	4629      	mov	r1, r5
 80069ae:	f7fa f9e9 	bl	8000d84 <__aeabi_fmul>
 80069b2:	4928      	ldr	r1, [pc, #160]	; (8006a54 <__kernel_cosf+0xe4>)
 80069b4:	f7fa f8dc 	bl	8000b70 <__aeabi_fsub>
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7fa f9e3 	bl	8000d84 <__aeabi_fmul>
 80069be:	4926      	ldr	r1, [pc, #152]	; (8006a58 <__kernel_cosf+0xe8>)
 80069c0:	f7fa f8d8 	bl	8000b74 <__addsf3>
 80069c4:	4629      	mov	r1, r5
 80069c6:	f7fa f9dd 	bl	8000d84 <__aeabi_fmul>
 80069ca:	4924      	ldr	r1, [pc, #144]	; (8006a5c <__kernel_cosf+0xec>)
 80069cc:	f7fa f8d0 	bl	8000b70 <__aeabi_fsub>
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7fa f9d7 	bl	8000d84 <__aeabi_fmul>
 80069d6:	4922      	ldr	r1, [pc, #136]	; (8006a60 <__kernel_cosf+0xf0>)
 80069d8:	f7fa f8cc 	bl	8000b74 <__addsf3>
 80069dc:	4629      	mov	r1, r5
 80069de:	f7fa f9d1 	bl	8000d84 <__aeabi_fmul>
 80069e2:	4629      	mov	r1, r5
 80069e4:	f7fa f9ce 	bl	8000d84 <__aeabi_fmul>
 80069e8:	4641      	mov	r1, r8
 80069ea:	4605      	mov	r5, r0
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7fa f9c9 	bl	8000d84 <__aeabi_fmul>
 80069f2:	4601      	mov	r1, r0
 80069f4:	4628      	mov	r0, r5
 80069f6:	f7fa f8bb 	bl	8000b70 <__aeabi_fsub>
 80069fa:	4b1a      	ldr	r3, [pc, #104]	; (8006a64 <__kernel_cosf+0xf4>)
 80069fc:	4605      	mov	r5, r0
 80069fe:	429c      	cmp	r4, r3
 8006a00:	dc0a      	bgt.n	8006a18 <__kernel_cosf+0xa8>
 8006a02:	4601      	mov	r1, r0
 8006a04:	4638      	mov	r0, r7
 8006a06:	f7fa f8b3 	bl	8000b70 <__aeabi_fsub>
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a10:	f7fa f8ae 	bl	8000b70 <__aeabi_fsub>
 8006a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a18:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <__kernel_cosf+0xf8>)
 8006a1a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a1e:	429c      	cmp	r4, r3
 8006a20:	bfcc      	ite	gt
 8006a22:	4c12      	ldrgt	r4, [pc, #72]	; (8006a6c <__kernel_cosf+0xfc>)
 8006a24:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8006a28:	4621      	mov	r1, r4
 8006a2a:	f7fa f8a1 	bl	8000b70 <__aeabi_fsub>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4606      	mov	r6, r0
 8006a32:	4638      	mov	r0, r7
 8006a34:	f7fa f89c 	bl	8000b70 <__aeabi_fsub>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7fa f899 	bl	8000b70 <__aeabi_fsub>
 8006a3e:	4601      	mov	r1, r0
 8006a40:	4630      	mov	r0, r6
 8006a42:	e7e5      	b.n	8006a10 <__kernel_cosf+0xa0>
 8006a44:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a48:	e7e4      	b.n	8006a14 <__kernel_cosf+0xa4>
 8006a4a:	bf00      	nop
 8006a4c:	ad47d74e 	.word	0xad47d74e
 8006a50:	310f74f6 	.word	0x310f74f6
 8006a54:	3493f27c 	.word	0x3493f27c
 8006a58:	37d00d01 	.word	0x37d00d01
 8006a5c:	3ab60b61 	.word	0x3ab60b61
 8006a60:	3d2aaaab 	.word	0x3d2aaaab
 8006a64:	3e999999 	.word	0x3e999999
 8006a68:	3f480000 	.word	0x3f480000
 8006a6c:	3e900000 	.word	0x3e900000

08006a70 <__kernel_rem_pio2f>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	b0d9      	sub	sp, #356	; 0x164
 8006a76:	9304      	str	r3, [sp, #16]
 8006a78:	9101      	str	r1, [sp, #4]
 8006a7a:	4bc3      	ldr	r3, [pc, #780]	; (8006d88 <__kernel_rem_pio2f+0x318>)
 8006a7c:	9962      	ldr	r1, [sp, #392]	; 0x188
 8006a7e:	1ed4      	subs	r4, r2, #3
 8006a80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a84:	2500      	movs	r5, #0
 8006a86:	9302      	str	r3, [sp, #8]
 8006a88:	9b04      	ldr	r3, [sp, #16]
 8006a8a:	f04f 0a00 	mov.w	sl, #0
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	2308      	movs	r3, #8
 8006a94:	fb94 f4f3 	sdiv	r4, r4, r3
 8006a98:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006a9c:	1c66      	adds	r6, r4, #1
 8006a9e:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8006aa2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006aa6:	eb03 0802 	add.w	r8, r3, r2
 8006aaa:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8006aac:	1aa7      	subs	r7, r4, r2
 8006aae:	9005      	str	r0, [sp, #20]
 8006ab0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006ab4:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8006ab8:	4545      	cmp	r5, r8
 8006aba:	dd7f      	ble.n	8006bbc <__kernel_rem_pio2f+0x14c>
 8006abc:	f04f 0800 	mov.w	r8, #0
 8006ac0:	f04f 0a00 	mov.w	sl, #0
 8006ac4:	f06f 0b03 	mvn.w	fp, #3
 8006ac8:	9b04      	ldr	r3, [sp, #16]
 8006aca:	aa1c      	add	r2, sp, #112	; 0x70
 8006acc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006ad0:	ab44      	add	r3, sp, #272	; 0x110
 8006ad2:	9a02      	ldr	r2, [sp, #8]
 8006ad4:	4590      	cmp	r8, r2
 8006ad6:	f340 8097 	ble.w	8006c08 <__kernel_rem_pio2f+0x198>
 8006ada:	4613      	mov	r3, r2
 8006adc:	aa08      	add	r2, sp, #32
 8006ade:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ae2:	9307      	str	r3, [sp, #28]
 8006ae4:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8006ae6:	9f02      	ldr	r7, [sp, #8]
 8006ae8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006aec:	9306      	str	r3, [sp, #24]
 8006aee:	46ba      	mov	sl, r7
 8006af0:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8006af4:	ab58      	add	r3, sp, #352	; 0x160
 8006af6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8006afa:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8006afe:	ad07      	add	r5, sp, #28
 8006b00:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8006b04:	f1ba 0f00 	cmp.w	sl, #0
 8006b08:	f300 8081 	bgt.w	8006c0e <__kernel_rem_pio2f+0x19e>
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f000 fb06 	bl	8007120 <scalbnf>
 8006b14:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8006b18:	4604      	mov	r4, r0
 8006b1a:	f7fa f933 	bl	8000d84 <__aeabi_fmul>
 8006b1e:	f000 fabf 	bl	80070a0 <floorf>
 8006b22:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8006b26:	f7fa f92d 	bl	8000d84 <__aeabi_fmul>
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f7fa f81f 	bl	8000b70 <__aeabi_fsub>
 8006b32:	4604      	mov	r4, r0
 8006b34:	f7fa faec 	bl	8001110 <__aeabi_f2iz>
 8006b38:	4681      	mov	r9, r0
 8006b3a:	f7fa f8cf 	bl	8000cdc <__aeabi_i2f>
 8006b3e:	4601      	mov	r1, r0
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7fa f815 	bl	8000b70 <__aeabi_fsub>
 8006b46:	2e00      	cmp	r6, #0
 8006b48:	4604      	mov	r4, r0
 8006b4a:	dd7e      	ble.n	8006c4a <__kernel_rem_pio2f+0x1da>
 8006b4c:	1e7b      	subs	r3, r7, #1
 8006b4e:	aa08      	add	r2, sp, #32
 8006b50:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006b54:	f1c6 0208 	rsb	r2, r6, #8
 8006b58:	fa45 f002 	asr.w	r0, r5, r2
 8006b5c:	4481      	add	r9, r0
 8006b5e:	4090      	lsls	r0, r2
 8006b60:	1a2d      	subs	r5, r5, r0
 8006b62:	aa08      	add	r2, sp, #32
 8006b64:	f1c6 0007 	rsb	r0, r6, #7
 8006b68:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8006b6c:	4105      	asrs	r5, r0
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	dd79      	ble.n	8006c66 <__kernel_rem_pio2f+0x1f6>
 8006b72:	2200      	movs	r2, #0
 8006b74:	4690      	mov	r8, r2
 8006b76:	f109 0901 	add.w	r9, r9, #1
 8006b7a:	4297      	cmp	r7, r2
 8006b7c:	f300 80ae 	bgt.w	8006cdc <__kernel_rem_pio2f+0x26c>
 8006b80:	2e00      	cmp	r6, #0
 8006b82:	dd05      	ble.n	8006b90 <__kernel_rem_pio2f+0x120>
 8006b84:	2e01      	cmp	r6, #1
 8006b86:	f000 80c0 	beq.w	8006d0a <__kernel_rem_pio2f+0x29a>
 8006b8a:	2e02      	cmp	r6, #2
 8006b8c:	f000 80c7 	beq.w	8006d1e <__kernel_rem_pio2f+0x2ae>
 8006b90:	2d02      	cmp	r5, #2
 8006b92:	d168      	bne.n	8006c66 <__kernel_rem_pio2f+0x1f6>
 8006b94:	4621      	mov	r1, r4
 8006b96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006b9a:	f7f9 ffe9 	bl	8000b70 <__aeabi_fsub>
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	f1b8 0f00 	cmp.w	r8, #0
 8006ba4:	d05f      	beq.n	8006c66 <__kernel_rem_pio2f+0x1f6>
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006bac:	f000 fab8 	bl	8007120 <scalbnf>
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f7f9 ffdc 	bl	8000b70 <__aeabi_fsub>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	e054      	b.n	8006c66 <__kernel_rem_pio2f+0x1f6>
 8006bbc:	42ef      	cmn	r7, r5
 8006bbe:	d407      	bmi.n	8006bd0 <__kernel_rem_pio2f+0x160>
 8006bc0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006bc4:	f7fa f88a 	bl	8000cdc <__aeabi_i2f>
 8006bc8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8006bcc:	3501      	adds	r5, #1
 8006bce:	e773      	b.n	8006ab8 <__kernel_rem_pio2f+0x48>
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	e7f9      	b.n	8006bc8 <__kernel_rem_pio2f+0x158>
 8006bd4:	fb0b 5207 	mla	r2, fp, r7, r5
 8006bd8:	9306      	str	r3, [sp, #24]
 8006bda:	9b05      	ldr	r3, [sp, #20]
 8006bdc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8006be0:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8006be4:	f7fa f8ce 	bl	8000d84 <__aeabi_fmul>
 8006be8:	4601      	mov	r1, r0
 8006bea:	4648      	mov	r0, r9
 8006bec:	f7f9 ffc2 	bl	8000b74 <__addsf3>
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	9b06      	ldr	r3, [sp, #24]
 8006bf4:	3701      	adds	r7, #1
 8006bf6:	9a03      	ldr	r2, [sp, #12]
 8006bf8:	4297      	cmp	r7, r2
 8006bfa:	ddeb      	ble.n	8006bd4 <__kernel_rem_pio2f+0x164>
 8006bfc:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8006c00:	3504      	adds	r5, #4
 8006c02:	f108 0801 	add.w	r8, r8, #1
 8006c06:	e764      	b.n	8006ad2 <__kernel_rem_pio2f+0x62>
 8006c08:	46d1      	mov	r9, sl
 8006c0a:	2700      	movs	r7, #0
 8006c0c:	e7f3      	b.n	8006bf6 <__kernel_rem_pio2f+0x186>
 8006c0e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7fa f8b6 	bl	8000d84 <__aeabi_fmul>
 8006c18:	f7fa fa7a 	bl	8001110 <__aeabi_f2iz>
 8006c1c:	f7fa f85e 	bl	8000cdc <__aeabi_i2f>
 8006c20:	4641      	mov	r1, r8
 8006c22:	4683      	mov	fp, r0
 8006c24:	f7fa f8ae 	bl	8000d84 <__aeabi_fmul>
 8006c28:	4601      	mov	r1, r0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7f9 ffa0 	bl	8000b70 <__aeabi_fsub>
 8006c30:	f7fa fa6e 	bl	8001110 <__aeabi_f2iz>
 8006c34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006c38:	f845 0f04 	str.w	r0, [r5, #4]!
 8006c3c:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8006c40:	4658      	mov	r0, fp
 8006c42:	f7f9 ff97 	bl	8000b74 <__addsf3>
 8006c46:	4604      	mov	r4, r0
 8006c48:	e75c      	b.n	8006b04 <__kernel_rem_pio2f+0x94>
 8006c4a:	d105      	bne.n	8006c58 <__kernel_rem_pio2f+0x1e8>
 8006c4c:	1e7b      	subs	r3, r7, #1
 8006c4e:	aa08      	add	r2, sp, #32
 8006c50:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006c54:	122d      	asrs	r5, r5, #8
 8006c56:	e78a      	b.n	8006b6e <__kernel_rem_pio2f+0xfe>
 8006c58:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006c5c:	f7fa fa44 	bl	80010e8 <__aeabi_fcmpge>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d139      	bne.n	8006cd8 <__kernel_rem_pio2f+0x268>
 8006c64:	4605      	mov	r5, r0
 8006c66:	2100      	movs	r1, #0
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f7fa fa1f 	bl	80010ac <__aeabi_fcmpeq>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f000 80a0 	beq.w	8006db4 <__kernel_rem_pio2f+0x344>
 8006c74:	1e7c      	subs	r4, r7, #1
 8006c76:	4623      	mov	r3, r4
 8006c78:	2200      	movs	r2, #0
 8006c7a:	9902      	ldr	r1, [sp, #8]
 8006c7c:	428b      	cmp	r3, r1
 8006c7e:	da55      	bge.n	8006d2c <__kernel_rem_pio2f+0x2bc>
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	d07e      	beq.n	8006d82 <__kernel_rem_pio2f+0x312>
 8006c84:	ab08      	add	r3, sp, #32
 8006c86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006c8a:	3e08      	subs	r6, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 808f 	beq.w	8006db0 <__kernel_rem_pio2f+0x340>
 8006c92:	4631      	mov	r1, r6
 8006c94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006c98:	f000 fa42 	bl	8007120 <scalbnf>
 8006c9c:	46a0      	mov	r8, r4
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8006ca4:	af44      	add	r7, sp, #272	; 0x110
 8006ca6:	f1b8 0f00 	cmp.w	r8, #0
 8006caa:	f280 80b5 	bge.w	8006e18 <__kernel_rem_pio2f+0x3a8>
 8006cae:	f04f 0a00 	mov.w	sl, #0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	00a6      	lsls	r6, r4, #2
 8006cb6:	4a35      	ldr	r2, [pc, #212]	; (8006d8c <__kernel_rem_pio2f+0x31c>)
 8006cb8:	4437      	add	r7, r6
 8006cba:	eba4 010a 	sub.w	r1, r4, sl
 8006cbe:	2900      	cmp	r1, #0
 8006cc0:	f280 80db 	bge.w	8006e7a <__kernel_rem_pio2f+0x40a>
 8006cc4:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	f200 80ff 	bhi.w	8006eca <__kernel_rem_pio2f+0x45a>
 8006ccc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006cd0:	01200102 	.word	0x01200102
 8006cd4:	00d90120 	.word	0x00d90120
 8006cd8:	2502      	movs	r5, #2
 8006cda:	e74a      	b.n	8006b72 <__kernel_rem_pio2f+0x102>
 8006cdc:	ab08      	add	r3, sp, #32
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	f1b8 0f00 	cmp.w	r8, #0
 8006ce6:	d109      	bne.n	8006cfc <__kernel_rem_pio2f+0x28c>
 8006ce8:	b12b      	cbz	r3, 8006cf6 <__kernel_rem_pio2f+0x286>
 8006cea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006cee:	a908      	add	r1, sp, #32
 8006cf0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	3201      	adds	r2, #1
 8006cf8:	4698      	mov	r8, r3
 8006cfa:	e73e      	b.n	8006b7a <__kernel_rem_pio2f+0x10a>
 8006cfc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006d00:	a908      	add	r1, sp, #32
 8006d02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d06:	4643      	mov	r3, r8
 8006d08:	e7f5      	b.n	8006cf6 <__kernel_rem_pio2f+0x286>
 8006d0a:	1e7a      	subs	r2, r7, #1
 8006d0c:	ab08      	add	r3, sp, #32
 8006d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d16:	a908      	add	r1, sp, #32
 8006d18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d1c:	e738      	b.n	8006b90 <__kernel_rem_pio2f+0x120>
 8006d1e:	1e7a      	subs	r2, r7, #1
 8006d20:	ab08      	add	r3, sp, #32
 8006d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d2a:	e7f4      	b.n	8006d16 <__kernel_rem_pio2f+0x2a6>
 8006d2c:	a908      	add	r1, sp, #32
 8006d2e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	430a      	orrs	r2, r1
 8006d36:	e7a0      	b.n	8006c7a <__kernel_rem_pio2f+0x20a>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006d3e:	2900      	cmp	r1, #0
 8006d40:	d0fa      	beq.n	8006d38 <__kernel_rem_pio2f+0x2c8>
 8006d42:	f06f 0803 	mvn.w	r8, #3
 8006d46:	9a04      	ldr	r2, [sp, #16]
 8006d48:	1c7d      	adds	r5, r7, #1
 8006d4a:	18bc      	adds	r4, r7, r2
 8006d4c:	aa1c      	add	r2, sp, #112	; 0x70
 8006d4e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006d52:	441f      	add	r7, r3
 8006d54:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8006d58:	42af      	cmp	r7, r5
 8006d5a:	f6ff aec8 	blt.w	8006aee <__kernel_rem_pio2f+0x7e>
 8006d5e:	9b06      	ldr	r3, [sp, #24]
 8006d60:	f04f 0a00 	mov.w	sl, #0
 8006d64:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d68:	f7f9 ffb8 	bl	8000cdc <__aeabi_i2f>
 8006d6c:	f04f 0b00 	mov.w	fp, #0
 8006d70:	6020      	str	r0, [r4, #0]
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	459a      	cmp	sl, r3
 8006d76:	dd0b      	ble.n	8006d90 <__kernel_rem_pio2f+0x320>
 8006d78:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8006d7c:	3404      	adds	r4, #4
 8006d7e:	3501      	adds	r5, #1
 8006d80:	e7ea      	b.n	8006d58 <__kernel_rem_pio2f+0x2e8>
 8006d82:	9a07      	ldr	r2, [sp, #28]
 8006d84:	2301      	movs	r3, #1
 8006d86:	e7d8      	b.n	8006d3a <__kernel_rem_pio2f+0x2ca>
 8006d88:	08007b1c 	.word	0x08007b1c
 8006d8c:	08007af0 	.word	0x08007af0
 8006d90:	fb08 f30a 	mul.w	r3, r8, sl
 8006d94:	9a05      	ldr	r2, [sp, #20]
 8006d96:	58e0      	ldr	r0, [r4, r3]
 8006d98:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8006d9c:	f7f9 fff2 	bl	8000d84 <__aeabi_fmul>
 8006da0:	4601      	mov	r1, r0
 8006da2:	4658      	mov	r0, fp
 8006da4:	f7f9 fee6 	bl	8000b74 <__addsf3>
 8006da8:	f10a 0a01 	add.w	sl, sl, #1
 8006dac:	4683      	mov	fp, r0
 8006dae:	e7e0      	b.n	8006d72 <__kernel_rem_pio2f+0x302>
 8006db0:	3c01      	subs	r4, #1
 8006db2:	e767      	b.n	8006c84 <__kernel_rem_pio2f+0x214>
 8006db4:	4271      	negs	r1, r6
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 f9b2 	bl	8007120 <scalbnf>
 8006dbc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	f7fa f991 	bl	80010e8 <__aeabi_fcmpge>
 8006dc6:	b1f8      	cbz	r0, 8006e08 <__kernel_rem_pio2f+0x398>
 8006dc8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f7f9 ffd9 	bl	8000d84 <__aeabi_fmul>
 8006dd2:	f7fa f99d 	bl	8001110 <__aeabi_f2iz>
 8006dd6:	f7f9 ff81 	bl	8000cdc <__aeabi_i2f>
 8006dda:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006dde:	4680      	mov	r8, r0
 8006de0:	f7f9 ffd0 	bl	8000d84 <__aeabi_fmul>
 8006de4:	4601      	mov	r1, r0
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7f9 fec2 	bl	8000b70 <__aeabi_fsub>
 8006dec:	f7fa f990 	bl	8001110 <__aeabi_f2iz>
 8006df0:	ab08      	add	r3, sp, #32
 8006df2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006df6:	4640      	mov	r0, r8
 8006df8:	f7fa f98a 	bl	8001110 <__aeabi_f2iz>
 8006dfc:	1c7c      	adds	r4, r7, #1
 8006dfe:	ab08      	add	r3, sp, #32
 8006e00:	3608      	adds	r6, #8
 8006e02:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e06:	e744      	b.n	8006c92 <__kernel_rem_pio2f+0x222>
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f7fa f981 	bl	8001110 <__aeabi_f2iz>
 8006e0e:	ab08      	add	r3, sp, #32
 8006e10:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006e14:	463c      	mov	r4, r7
 8006e16:	e73c      	b.n	8006c92 <__kernel_rem_pio2f+0x222>
 8006e18:	ab08      	add	r3, sp, #32
 8006e1a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006e1e:	f7f9 ff5d 	bl	8000cdc <__aeabi_i2f>
 8006e22:	4651      	mov	r1, sl
 8006e24:	f7f9 ffae 	bl	8000d84 <__aeabi_fmul>
 8006e28:	4631      	mov	r1, r6
 8006e2a:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8006e2e:	4650      	mov	r0, sl
 8006e30:	f7f9 ffa8 	bl	8000d84 <__aeabi_fmul>
 8006e34:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006e38:	4682      	mov	sl, r0
 8006e3a:	e734      	b.n	8006ca6 <__kernel_rem_pio2f+0x236>
 8006e3c:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8006e40:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	9203      	str	r2, [sp, #12]
 8006e48:	f7f9 ff9c 	bl	8000d84 <__aeabi_fmul>
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	4658      	mov	r0, fp
 8006e50:	f7f9 fe90 	bl	8000b74 <__addsf3>
 8006e54:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8006e58:	4683      	mov	fp, r0
 8006e5a:	f108 0801 	add.w	r8, r8, #1
 8006e5e:	9902      	ldr	r1, [sp, #8]
 8006e60:	4588      	cmp	r8, r1
 8006e62:	dc01      	bgt.n	8006e68 <__kernel_rem_pio2f+0x3f8>
 8006e64:	45c2      	cmp	sl, r8
 8006e66:	dae9      	bge.n	8006e3c <__kernel_rem_pio2f+0x3cc>
 8006e68:	a958      	add	r1, sp, #352	; 0x160
 8006e6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e6e:	f841 bca0 	str.w	fp, [r1, #-160]
 8006e72:	f10a 0a01 	add.w	sl, sl, #1
 8006e76:	3f04      	subs	r7, #4
 8006e78:	e71f      	b.n	8006cba <__kernel_rem_pio2f+0x24a>
 8006e7a:	469b      	mov	fp, r3
 8006e7c:	f04f 0800 	mov.w	r8, #0
 8006e80:	e7ed      	b.n	8006e5e <__kernel_rem_pio2f+0x3ee>
 8006e82:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8006e86:	4456      	add	r6, sl
 8006e88:	4637      	mov	r7, r6
 8006e8a:	46a0      	mov	r8, r4
 8006e8c:	f1b8 0f00 	cmp.w	r8, #0
 8006e90:	dc4a      	bgt.n	8006f28 <__kernel_rem_pio2f+0x4b8>
 8006e92:	4627      	mov	r7, r4
 8006e94:	2f01      	cmp	r7, #1
 8006e96:	dc60      	bgt.n	8006f5a <__kernel_rem_pio2f+0x4ea>
 8006e98:	2000      	movs	r0, #0
 8006e9a:	2c01      	cmp	r4, #1
 8006e9c:	dc74      	bgt.n	8006f88 <__kernel_rem_pio2f+0x518>
 8006e9e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8006ea0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8006ea2:	2d00      	cmp	r5, #0
 8006ea4:	d176      	bne.n	8006f94 <__kernel_rem_pio2f+0x524>
 8006ea6:	9901      	ldr	r1, [sp, #4]
 8006ea8:	600a      	str	r2, [r1, #0]
 8006eaa:	460a      	mov	r2, r1
 8006eac:	604b      	str	r3, [r1, #4]
 8006eae:	6090      	str	r0, [r2, #8]
 8006eb0:	e00b      	b.n	8006eca <__kernel_rem_pio2f+0x45a>
 8006eb2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8006eb6:	f7f9 fe5d 	bl	8000b74 <__addsf3>
 8006eba:	3c01      	subs	r4, #1
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	daf8      	bge.n	8006eb2 <__kernel_rem_pio2f+0x442>
 8006ec0:	b10d      	cbz	r5, 8006ec6 <__kernel_rem_pio2f+0x456>
 8006ec2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006ec6:	9b01      	ldr	r3, [sp, #4]
 8006ec8:	6018      	str	r0, [r3, #0]
 8006eca:	f009 0007 	and.w	r0, r9, #7
 8006ece:	b059      	add	sp, #356	; 0x164
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	ae30      	add	r6, sp, #192	; 0xc0
 8006ed8:	e7f0      	b.n	8006ebc <__kernel_rem_pio2f+0x44c>
 8006eda:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8006ede:	f7f9 fe49 	bl	8000b74 <__addsf3>
 8006ee2:	3e01      	subs	r6, #1
 8006ee4:	2e00      	cmp	r6, #0
 8006ee6:	daf8      	bge.n	8006eda <__kernel_rem_pio2f+0x46a>
 8006ee8:	b1b5      	cbz	r5, 8006f18 <__kernel_rem_pio2f+0x4a8>
 8006eea:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8006eee:	9a01      	ldr	r2, [sp, #4]
 8006ef0:	af58      	add	r7, sp, #352	; 0x160
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8006efa:	f7f9 fe39 	bl	8000b70 <__aeabi_fsub>
 8006efe:	2601      	movs	r6, #1
 8006f00:	42b4      	cmp	r4, r6
 8006f02:	da0b      	bge.n	8006f1c <__kernel_rem_pio2f+0x4ac>
 8006f04:	b10d      	cbz	r5, 8006f0a <__kernel_rem_pio2f+0x49a>
 8006f06:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	6058      	str	r0, [r3, #4]
 8006f0e:	e7dc      	b.n	8006eca <__kernel_rem_pio2f+0x45a>
 8006f10:	4626      	mov	r6, r4
 8006f12:	2000      	movs	r0, #0
 8006f14:	af30      	add	r7, sp, #192	; 0xc0
 8006f16:	e7e5      	b.n	8006ee4 <__kernel_rem_pio2f+0x474>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	e7e8      	b.n	8006eee <__kernel_rem_pio2f+0x47e>
 8006f1c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8006f20:	f7f9 fe28 	bl	8000b74 <__addsf3>
 8006f24:	3601      	adds	r6, #1
 8006f26:	e7eb      	b.n	8006f00 <__kernel_rem_pio2f+0x490>
 8006f28:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8006f2c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	9303      	str	r3, [sp, #12]
 8006f38:	9202      	str	r2, [sp, #8]
 8006f3a:	f7f9 fe1b 	bl	8000b74 <__addsf3>
 8006f3e:	9a02      	ldr	r2, [sp, #8]
 8006f40:	4601      	mov	r1, r0
 8006f42:	4683      	mov	fp, r0
 8006f44:	4610      	mov	r0, r2
 8006f46:	f7f9 fe13 	bl	8000b70 <__aeabi_fsub>
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	f7f9 fe11 	bl	8000b74 <__addsf3>
 8006f52:	f8c7 b000 	str.w	fp, [r7]
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	e798      	b.n	8006e8c <__kernel_rem_pio2f+0x41c>
 8006f5a:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8006f5e:	3f01      	subs	r7, #1
 8006f60:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8006f64:	4618      	mov	r0, r3
 8006f66:	4659      	mov	r1, fp
 8006f68:	9302      	str	r3, [sp, #8]
 8006f6a:	f7f9 fe03 	bl	8000b74 <__addsf3>
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	4601      	mov	r1, r0
 8006f72:	4680      	mov	r8, r0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 fdfb 	bl	8000b70 <__aeabi_fsub>
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	f7f9 fdfa 	bl	8000b74 <__addsf3>
 8006f80:	f8c6 8000 	str.w	r8, [r6]
 8006f84:	6070      	str	r0, [r6, #4]
 8006f86:	e785      	b.n	8006e94 <__kernel_rem_pio2f+0x424>
 8006f88:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8006f8c:	f7f9 fdf2 	bl	8000b74 <__addsf3>
 8006f90:	3c01      	subs	r4, #1
 8006f92:	e782      	b.n	8006e9a <__kernel_rem_pio2f+0x42a>
 8006f94:	9901      	ldr	r1, [sp, #4]
 8006f96:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8006f9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f9e:	600a      	str	r2, [r1, #0]
 8006fa0:	604b      	str	r3, [r1, #4]
 8006fa2:	460a      	mov	r2, r1
 8006fa4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006fa8:	e781      	b.n	8006eae <__kernel_rem_pio2f+0x43e>
 8006faa:	bf00      	nop

08006fac <__kernel_sinf>:
 8006fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006fb4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006fb8:	4604      	mov	r4, r0
 8006fba:	460f      	mov	r7, r1
 8006fbc:	4691      	mov	r9, r2
 8006fbe:	da03      	bge.n	8006fc8 <__kernel_sinf+0x1c>
 8006fc0:	f7fa f8a6 	bl	8001110 <__aeabi_f2iz>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d035      	beq.n	8007034 <__kernel_sinf+0x88>
 8006fc8:	4621      	mov	r1, r4
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7f9 feda 	bl	8000d84 <__aeabi_fmul>
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f7f9 fed5 	bl	8000d84 <__aeabi_fmul>
 8006fda:	4929      	ldr	r1, [pc, #164]	; (8007080 <__kernel_sinf+0xd4>)
 8006fdc:	4606      	mov	r6, r0
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f7f9 fed0 	bl	8000d84 <__aeabi_fmul>
 8006fe4:	4927      	ldr	r1, [pc, #156]	; (8007084 <__kernel_sinf+0xd8>)
 8006fe6:	f7f9 fdc3 	bl	8000b70 <__aeabi_fsub>
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7f9 feca 	bl	8000d84 <__aeabi_fmul>
 8006ff0:	4925      	ldr	r1, [pc, #148]	; (8007088 <__kernel_sinf+0xdc>)
 8006ff2:	f7f9 fdbf 	bl	8000b74 <__addsf3>
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f7f9 fec4 	bl	8000d84 <__aeabi_fmul>
 8006ffc:	4923      	ldr	r1, [pc, #140]	; (800708c <__kernel_sinf+0xe0>)
 8006ffe:	f7f9 fdb7 	bl	8000b70 <__aeabi_fsub>
 8007002:	4629      	mov	r1, r5
 8007004:	f7f9 febe 	bl	8000d84 <__aeabi_fmul>
 8007008:	4921      	ldr	r1, [pc, #132]	; (8007090 <__kernel_sinf+0xe4>)
 800700a:	f7f9 fdb3 	bl	8000b74 <__addsf3>
 800700e:	4680      	mov	r8, r0
 8007010:	f1b9 0f00 	cmp.w	r9, #0
 8007014:	d111      	bne.n	800703a <__kernel_sinf+0x8e>
 8007016:	4601      	mov	r1, r0
 8007018:	4628      	mov	r0, r5
 800701a:	f7f9 feb3 	bl	8000d84 <__aeabi_fmul>
 800701e:	491d      	ldr	r1, [pc, #116]	; (8007094 <__kernel_sinf+0xe8>)
 8007020:	f7f9 fda6 	bl	8000b70 <__aeabi_fsub>
 8007024:	4631      	mov	r1, r6
 8007026:	f7f9 fead 	bl	8000d84 <__aeabi_fmul>
 800702a:	4601      	mov	r1, r0
 800702c:	4620      	mov	r0, r4
 800702e:	f7f9 fda1 	bl	8000b74 <__addsf3>
 8007032:	4604      	mov	r4, r0
 8007034:	4620      	mov	r0, r4
 8007036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800703e:	4638      	mov	r0, r7
 8007040:	f7f9 fea0 	bl	8000d84 <__aeabi_fmul>
 8007044:	4641      	mov	r1, r8
 8007046:	4681      	mov	r9, r0
 8007048:	4630      	mov	r0, r6
 800704a:	f7f9 fe9b 	bl	8000d84 <__aeabi_fmul>
 800704e:	4601      	mov	r1, r0
 8007050:	4648      	mov	r0, r9
 8007052:	f7f9 fd8d 	bl	8000b70 <__aeabi_fsub>
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 fe94 	bl	8000d84 <__aeabi_fmul>
 800705c:	4639      	mov	r1, r7
 800705e:	f7f9 fd87 	bl	8000b70 <__aeabi_fsub>
 8007062:	490c      	ldr	r1, [pc, #48]	; (8007094 <__kernel_sinf+0xe8>)
 8007064:	4605      	mov	r5, r0
 8007066:	4630      	mov	r0, r6
 8007068:	f7f9 fe8c 	bl	8000d84 <__aeabi_fmul>
 800706c:	4601      	mov	r1, r0
 800706e:	4628      	mov	r0, r5
 8007070:	f7f9 fd80 	bl	8000b74 <__addsf3>
 8007074:	4601      	mov	r1, r0
 8007076:	4620      	mov	r0, r4
 8007078:	f7f9 fd7a 	bl	8000b70 <__aeabi_fsub>
 800707c:	e7d9      	b.n	8007032 <__kernel_sinf+0x86>
 800707e:	bf00      	nop
 8007080:	2f2ec9d3 	.word	0x2f2ec9d3
 8007084:	32d72f34 	.word	0x32d72f34
 8007088:	3638ef1b 	.word	0x3638ef1b
 800708c:	39500d01 	.word	0x39500d01
 8007090:	3c088889 	.word	0x3c088889
 8007094:	3e2aaaab 	.word	0x3e2aaaab

08007098 <fabsf>:
 8007098:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800709c:	4770      	bx	lr
	...

080070a0 <floorf>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80070a6:	0df5      	lsrs	r5, r6, #23
 80070a8:	3d7f      	subs	r5, #127	; 0x7f
 80070aa:	2d16      	cmp	r5, #22
 80070ac:	4601      	mov	r1, r0
 80070ae:	4604      	mov	r4, r0
 80070b0:	dc26      	bgt.n	8007100 <floorf+0x60>
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	da0e      	bge.n	80070d4 <floorf+0x34>
 80070b6:	4917      	ldr	r1, [pc, #92]	; (8007114 <floorf+0x74>)
 80070b8:	f7f9 fd5c 	bl	8000b74 <__addsf3>
 80070bc:	2100      	movs	r1, #0
 80070be:	f7fa f81d 	bl	80010fc <__aeabi_fcmpgt>
 80070c2:	b128      	cbz	r0, 80070d0 <floorf+0x30>
 80070c4:	2c00      	cmp	r4, #0
 80070c6:	da23      	bge.n	8007110 <floorf+0x70>
 80070c8:	4b13      	ldr	r3, [pc, #76]	; (8007118 <floorf+0x78>)
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	bf18      	it	ne
 80070ce:	461c      	movne	r4, r3
 80070d0:	4621      	mov	r1, r4
 80070d2:	e01b      	b.n	800710c <floorf+0x6c>
 80070d4:	4e11      	ldr	r6, [pc, #68]	; (800711c <floorf+0x7c>)
 80070d6:	412e      	asrs	r6, r5
 80070d8:	4230      	tst	r0, r6
 80070da:	d017      	beq.n	800710c <floorf+0x6c>
 80070dc:	490d      	ldr	r1, [pc, #52]	; (8007114 <floorf+0x74>)
 80070de:	f7f9 fd49 	bl	8000b74 <__addsf3>
 80070e2:	2100      	movs	r1, #0
 80070e4:	f7fa f80a 	bl	80010fc <__aeabi_fcmpgt>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d0f1      	beq.n	80070d0 <floorf+0x30>
 80070ec:	2c00      	cmp	r4, #0
 80070ee:	bfbe      	ittt	lt
 80070f0:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80070f4:	fa43 f505 	asrlt.w	r5, r3, r5
 80070f8:	1964      	addlt	r4, r4, r5
 80070fa:	ea24 0406 	bic.w	r4, r4, r6
 80070fe:	e7e7      	b.n	80070d0 <floorf+0x30>
 8007100:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007104:	d302      	bcc.n	800710c <floorf+0x6c>
 8007106:	f7f9 fd35 	bl	8000b74 <__addsf3>
 800710a:	4601      	mov	r1, r0
 800710c:	4608      	mov	r0, r1
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	2400      	movs	r4, #0
 8007112:	e7dd      	b.n	80070d0 <floorf+0x30>
 8007114:	7149f2ca 	.word	0x7149f2ca
 8007118:	bf800000 	.word	0xbf800000
 800711c:	007fffff 	.word	0x007fffff

08007120 <scalbnf>:
 8007120:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8007124:	b510      	push	{r4, lr}
 8007126:	4602      	mov	r2, r0
 8007128:	460c      	mov	r4, r1
 800712a:	4601      	mov	r1, r0
 800712c:	d027      	beq.n	800717e <scalbnf+0x5e>
 800712e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007132:	d303      	bcc.n	800713c <scalbnf+0x1c>
 8007134:	f7f9 fd1e 	bl	8000b74 <__addsf3>
 8007138:	4602      	mov	r2, r0
 800713a:	e020      	b.n	800717e <scalbnf+0x5e>
 800713c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007140:	d215      	bcs.n	800716e <scalbnf+0x4e>
 8007142:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8007146:	f7f9 fe1d 	bl	8000d84 <__aeabi_fmul>
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <scalbnf+0x8c>)
 800714c:	4602      	mov	r2, r0
 800714e:	429c      	cmp	r4, r3
 8007150:	db22      	blt.n	8007198 <scalbnf+0x78>
 8007152:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007156:	3b19      	subs	r3, #25
 8007158:	4423      	add	r3, r4
 800715a:	2bfe      	cmp	r3, #254	; 0xfe
 800715c:	dd09      	ble.n	8007172 <scalbnf+0x52>
 800715e:	4611      	mov	r1, r2
 8007160:	4813      	ldr	r0, [pc, #76]	; (80071b0 <scalbnf+0x90>)
 8007162:	f000 f829 	bl	80071b8 <copysignf>
 8007166:	4912      	ldr	r1, [pc, #72]	; (80071b0 <scalbnf+0x90>)
 8007168:	f7f9 fe0c 	bl	8000d84 <__aeabi_fmul>
 800716c:	e7e4      	b.n	8007138 <scalbnf+0x18>
 800716e:	0ddb      	lsrs	r3, r3, #23
 8007170:	e7f2      	b.n	8007158 <scalbnf+0x38>
 8007172:	2b00      	cmp	r3, #0
 8007174:	dd05      	ble.n	8007182 <scalbnf+0x62>
 8007176:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800717a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800717e:	4610      	mov	r0, r2
 8007180:	bd10      	pop	{r4, pc}
 8007182:	f113 0f16 	cmn.w	r3, #22
 8007186:	da09      	bge.n	800719c <scalbnf+0x7c>
 8007188:	f24c 3350 	movw	r3, #50000	; 0xc350
 800718c:	429c      	cmp	r4, r3
 800718e:	4611      	mov	r1, r2
 8007190:	dce6      	bgt.n	8007160 <scalbnf+0x40>
 8007192:	4808      	ldr	r0, [pc, #32]	; (80071b4 <scalbnf+0x94>)
 8007194:	f000 f810 	bl	80071b8 <copysignf>
 8007198:	4906      	ldr	r1, [pc, #24]	; (80071b4 <scalbnf+0x94>)
 800719a:	e7e5      	b.n	8007168 <scalbnf+0x48>
 800719c:	3319      	adds	r3, #25
 800719e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80071a2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80071a6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80071aa:	e7dd      	b.n	8007168 <scalbnf+0x48>
 80071ac:	ffff3cb0 	.word	0xffff3cb0
 80071b0:	7149f2ca 	.word	0x7149f2ca
 80071b4:	0da24260 	.word	0x0da24260

080071b8 <copysignf>:
 80071b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80071bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80071c0:	4308      	orrs	r0, r1
 80071c2:	4770      	bx	lr

080071c4 <_init>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	bf00      	nop
 80071c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ca:	bc08      	pop	{r3}
 80071cc:	469e      	mov	lr, r3
 80071ce:	4770      	bx	lr

080071d0 <_fini>:
 80071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d2:	bf00      	nop
 80071d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d6:	bc08      	pop	{r3}
 80071d8:	469e      	mov	lr, r3
 80071da:	4770      	bx	lr
